#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    """
    Parameters:
     - port_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_port_attribute(self, port_id):
    """
    Parameters:
     - port_id
    """
    pass

  def sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
    """
    Parameters:
     - port_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_clear_port_all_stats(self, port_id):
    """
    Parameters:
     - port_id
    """
    pass

  def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    pass

  def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    pass

  def sai_thrift_create_vlan(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_vlan(self, vlan_oid):
    """
    Parameters:
     - vlan_oid
    """
    pass

  def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    """
    Parameters:
     - vlan_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_create_vlan_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
    """
    Parameters:
     - vlan_member_id
    """
    pass

  def sai_thrift_remove_vlan_member(self, vlan_member_id):
    """
    Parameters:
     - vlan_member_id
    """
    pass

  def sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
    """
    Parameters:
     - vlan_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_vlan_attribute(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    pass

  def sai_thrift_get_vlan_id(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    pass

  def sai_thrift_create_virtual_router(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_virtual_router(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    pass

  def sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
    """
    Parameters:
     - vr_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_virtual_router_attribute(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    pass

  def sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_route_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_route(self, thrift_route_entry):
    """
    Parameters:
     - thrift_route_entry
    """
    pass

  def sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
    """
    Parameters:
     - thrift_route_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_route_attribute(self, thrift_route_entry):
    """
    Parameters:
     - thrift_route_entry
    """
    pass

  def sai_thrift_create_router_interface(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_router_interface(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    pass

  def sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
    """
    Parameters:
     - rif_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_router_interface_attribute(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    pass

  def sai_thrift_create_next_hop(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_next_hop(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    pass

  def sai_thrift_get_next_hop_attribute(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    pass

  def sai_thrift_create_next_hop_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_next_hop_group(self, nhop_group_oid):
    """
    Parameters:
     - nhop_group_oid
    """
    pass

  def sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
    """
    Parameters:
     - nhop_group_oid
     - thrift_attr
    """
    pass

  def sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
    """
    Parameters:
     - nhop_group_oid
    """
    pass

  def sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
    """
    Parameters:
     - nhop_group_member_oid
    """
    pass

  def sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
    """
    Parameters:
     - nhop_group_member_oid
    """
    pass

  def sai_thrift_create_lag(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_lag(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    pass

  def sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
    """
    Parameters:
     - lag_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_lag_attribute(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    pass

  def sai_thrift_create_lag_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_lag_member(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    pass

  def sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
    """
    Parameters:
     - lag_member_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_lag_member_attribute(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    pass

  def sai_thrift_create_stp_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_stp_entry(self, stp_id):
    """
    Parameters:
     - stp_id
    """
    pass

  def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    """
    Parameters:
     - stp_id
     - port_id
     - stp_port_state
    """
    pass

  def sai_thrift_get_stp_port_state(self, stp_id, port_id):
    """
    Parameters:
     - stp_id
     - port_id
    """
    pass

  def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    pass

  def sai_thrift_remove_all_neighbor_entry(self):
    pass

  def sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    pass

  def sai_thrift_get_switch_attribute(self, thrift_attr_ids):
    """
    Parameters:
     - thrift_attr_ids
    """
    pass

  def sai_thrift_get_port_list_by_front_port(self):
    pass

  def sai_thrift_get_cpu_port_id(self):
    pass

  def sai_thrift_get_default_trap_group(self):
    pass

  def sai_thrift_get_default_router_id(self):
    pass

  def sai_thrift_get_default_1q_bridge_id(self):
    pass

  def sai_thrift_get_default_vlan_id(self):
    pass

  def sai_thrift_get_port_id_by_front_port(self, port_name):
    """
    Parameters:
     - port_name
    """
    pass

  def sai_thrift_set_switch_attribute(self, attribute):
    """
    Parameters:
     - attribute
    """
    pass

  def sai_thrift_create_switch(self):
    pass

  def sai_thrift_remove_switch(self):
    pass

  def sai_thrift_create_bridge_port(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_bridge_port(self, bridge_port_id):
    """
    Parameters:
     - bridge_port_id
    """
    pass

  def sai_thrift_get_bridge_port_list(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    pass

  def sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
    """
    Parameters:
     - bridge_port_id
    """
    pass

  def sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
    """
    Parameters:
     - bridge_port_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_bridge(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_bridge(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    pass

  def sai_thrift_get_bridge_attribute(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    pass

  def sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
    """
    Parameters:
     - bridge_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_hostif(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif(self, thrift_hif_id):
    """
    Parameters:
     - thrift_hif_id
    """
    pass

  def sai_thrift_get_hostif_attribute(self, thrift_hif_id):
    """
    Parameters:
     - thrift_hif_id
    """
    pass

  def sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
    """
    Parameters:
     - thrift_hif_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
    """
    Parameters:
     - thrift_hostif_table_entry_id
    """
    pass

  def sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
    """
    Parameters:
     - thrift_hostif_table_entry_id
    """
    pass

  def sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_table_entry_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
    """
    Parameters:
     - thrift_hostif_trap_group_id
    """
    pass

  def sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
    """
    Parameters:
     - thrift_hostif_trap_group_id
    """
    pass

  def sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_trap_group_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_hostif_trap(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
    """
    Parameters:
     - thrift_hostif_trap_id
    """
    pass

  def sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
    """
    Parameters:
     - thrift_hostif_trap_id
    """
    pass

  def sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_trap_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_acl_table(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_acl_table(self, acl_table_id):
    """
    Parameters:
     - acl_table_id
    """
    pass

  def sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
    """
    Parameters:
     - acl_table_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_create_acl_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_acl_entry(self, acl_entry):
    """
    Parameters:
     - acl_entry
    """
    pass

  def sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
    """
    Parameters:
     - acl_entry_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
    """
    Parameters:
     - acl_entry_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_create_acl_table_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_acl_table_group(self, acl_table_group_id):
    """
    Parameters:
     - acl_table_group_id
    """
    pass

  def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
    """
    Parameters:
     - acl_table_group_id
    """
    pass

  def sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
    """
    Parameters:
     - acl_table_group_member_id
    """
    pass

  def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
    """
    Parameters:
     - acl_table_group_member_id
    """
    pass

  def sai_thrift_create_acl_counter(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_acl_counter(self, acl_counter_id):
    """
    Parameters:
     - acl_counter_id
    """
    pass

  def sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    """
    Parameters:
     - acl_counter_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_create_hash(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hash(self, hash_id):
    """
    Parameters:
     - hash_id
    """
    pass

  def sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
    """
    Parameters:
     - thrift_hash_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_hash_attribute(self, thrift_hash_id):
    """
    Parameters:
     - thrift_hash_id
    """
    pass

  def sai_thrift_create_udf_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_udf_group(self, udf_group_id):
    """
    Parameters:
     - udf_group_id
    """
    pass

  def sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
    """
    Parameters:
     - thrift_udf_group_id
    """
    pass

  def sai_thrift_create_udf_match(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_udf_match(self, udf_match_id):
    """
    Parameters:
     - udf_match_id
    """
    pass

  def sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
    """
    Parameters:
     - thrift_udf_match_id
    """
    pass

  def sai_thrift_create_udf(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_udf(self, udf_id):
    """
    Parameters:
     - udf_id
    """
    pass

  def sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
    """
    Parameters:
     - thrift_udf_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_udf_attribute(self, thrift_udf_id):
    """
    Parameters:
     - thrift_udf_id
    """
    pass

  def sai_thrift_create_mirror_session(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_mirror_session(self, session_id):
    """
    Parameters:
     - session_id
    """
    pass

  def sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
    """
    Parameters:
     - thrift_mirror_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
    """
    Parameters:
     - thrift_mirror_id
    """
    pass

  def sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_inseg_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
    """
    Parameters:
     - thrift_inseg_entry
    """
    pass

  def sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
    """
    Parameters:
     - thrift_inseg_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
    """
    Parameters:
     - thrift_inseg_entry
    """
    pass

  def sai_thrift_dump_log(self, dump_file_name):
    """
    Parameters:
     - dump_file_name
    """
    pass

  def sai_thrift_create_policer(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_policer(self, thrift_policer_id):
    """
    Parameters:
     - thrift_policer_id
    """
    pass

  def sai_thrift_get_policer_attribute(self, thrift_policer_id):
    """
    Parameters:
     - thrift_policer_id
    """
    pass

  def sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
    """
    Parameters:
     - thrift_policer_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    """
    Parameters:
     - thrift_policer_id
     - thrift_counter_ids
    """
    pass

  def sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    """
    Parameters:
     - thrift_policer_id
     - thrift_counter_ids
    """
    pass

  def sai_thrift_create_scheduler_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_scheduler_profile(self, scheduler_id):
    """
    Parameters:
     - scheduler_id
    """
    pass

  def sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
    """
    Parameters:
     - thrift_scheduler_id
    """
    pass

  def sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
    """
    Parameters:
     - thrift_scheduler_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_scheduler_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_scheduler_group(self, scheduler_group_id):
    """
    Parameters:
     - scheduler_group_id
    """
    pass

  def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
    """
    Parameters:
     - scheduler_group_id
    """
    pass

  def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
    """
    Parameters:
     - scheduler_group_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
    """
    Parameters:
     - queue_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
    """
    Parameters:
     - queue_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_create_queue(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_queue(self, queue_id):
    """
    Parameters:
     - queue_id
    """
    pass

  def sai_thrift_get_queue_attribute(self, queue_id):
    """
    Parameters:
     - queue_id
    """
    pass

  def sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
    """
    Parameters:
     - queue_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_buffer_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_buffer_profile(self, buffer_profile_id):
    """
    Parameters:
     - buffer_profile_id
    """
    pass

  def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
    """
    Parameters:
     - buffer_profile_id
    """
    pass

  def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
    """
    Parameters:
     - buffer_profile_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_pool_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_create_priority_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_priority_group(self, priority_group_id):
    """
    Parameters:
     - priority_group_id
    """
    pass

  def sai_thrift_get_priority_group_attribute(self, priority_group_id):
    """
    Parameters:
     - priority_group_id
    """
    pass

  def sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
    """
    Parameters:
     - pg_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
    """
    Parameters:
     - pg_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_create_wred_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_wred_profile(self, wred_id):
    """
    Parameters:
     - wred_id
    """
    pass

  def sai_thrift_get_wred_attribute_profile(self, wred_id):
    """
    Parameters:
     - wred_id
    """
    pass

  def sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
    """
    Parameters:
     - wred_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_qos_map(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_qos_map(self, qos_map_id):
    """
    Parameters:
     - qos_map_id
    """
    pass

  def sai_thrift_get_qos_map_attribute(self, qos_map_id):
    """
    Parameters:
     - qos_map_id
    """
    pass

  def sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
    """
    Parameters:
     - qos_map_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_l2mc_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_l2mc_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_get_l2mc_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_l2mc_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_l2mc_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_l2mc_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
    """
    Parameters:
     - thrift_l2mc_entry
    """
    pass

  def sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
    """
    Parameters:
     - thrift_l2mc_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
    """
    Parameters:
     - thrift_l2mc_entry
    """
    pass

  def sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_mcast_fdb_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
    """
    Parameters:
     - thrift_mcast_fdb_entry
    """
    pass

  def sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
    """
    Parameters:
     - thrift_mcast_fdb_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
    """
    Parameters:
     - thrift_mcast_fdb_entry
    """
    pass

  def sai_thrift_create_ipmc_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_ipmc_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_get_ipmc_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_ipmc_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_ipmc_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_create_rpf_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_rpf_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_get_rpf_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    pass

  def sai_thrift_create_rpf_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_rpf_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_rpf_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    pass

  def sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_ipmc_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
    """
    Parameters:
     - thrift_ipmc_entry
    """
    pass

  def sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
    """
    Parameters:
     - thrift_ipmc_entry
     - thrift_attr
    """
    pass

  def sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
    """
    Parameters:
     - thrift_ipmc_entry
    """
    pass

  def sai_thrift_create_samplepacket(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_samplepacket(self, samplepacket_id):
    """
    Parameters:
     - samplepacket_id
    """
    pass

  def sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
    """
    Parameters:
     - samplepacket_id
    """
    pass

  def sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
    """
    Parameters:
     - samplepacket_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
    """
    Parameters:
     - tunnel_map_entry_id
    """
    pass

  def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
    """
    Parameters:
     - tunnel_map_entry_id
    """
    pass

  def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
    """
    Parameters:
     - tunnel_map_entry_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_tunnel_map(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_tunnel_map(self, tunnel_map_id):
    """
    Parameters:
     - tunnel_map_id
    """
    pass

  def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
    """
    Parameters:
     - tunnel_map_id
    """
    pass

  def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
    """
    Parameters:
     - tunnel_map_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_tunnel(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_tunnel(self, tunnel_id):
    """
    Parameters:
     - tunnel_id
    """
    pass

  def sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
    """
    Parameters:
     - tunnel_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
    """
    Parameters:
     - tunnel_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    """
    Parameters:
     - tunnel_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    """
    Parameters:
     - tunnel_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
    """
    Parameters:
     - tunnel_term_table_entry_id
    """
    pass

  def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
    """
    Parameters:
     - tunnel_term_table_entry_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
    """
    Parameters:
     - tunnel_term_table_entry_id
     - thrift_attr
    """
    pass

  def sai_thrift_get_cpu_packet_attribute(self, switch_id):
    """
    Parameters:
     - switch_id
    """
    pass

  def sai_thrift_get_cpu_packet_count(self):
    pass

  def sai_thrift_clear_cpu_packet_info(self):
    pass

  def sai_thrift_log_set(self, sai_api_id, log_level):
    """
    Parameters:
     - sai_api_id
     - log_level
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    """
    Parameters:
     - port_id
     - thrift_attr
    """
    self.send_sai_thrift_set_port_attribute(port_id, thrift_attr)
    return self.recv_sai_thrift_set_port_attribute()

  def send_sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_port_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_port_attribute_args()
    args.port_id = port_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_port_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_port_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_port_attribute failed: unknown result");

  def sai_thrift_get_port_attribute(self, port_id):
    """
    Parameters:
     - port_id
    """
    self.send_sai_thrift_get_port_attribute(port_id)
    return self.recv_sai_thrift_get_port_attribute()

  def send_sai_thrift_get_port_attribute(self, port_id):
    self._oprot.writeMessageBegin('sai_thrift_get_port_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_port_attribute_args()
    args.port_id = port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_port_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_port_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_attribute failed: unknown result");

  def sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
    """
    Parameters:
     - port_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_port_stats(port_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_port_stats()

  def send_sai_thrift_get_port_stats(self, port_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_port_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_port_stats_args()
    args.port_id = port_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_port_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_port_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_stats failed: unknown result");

  def sai_thrift_clear_port_all_stats(self, port_id):
    """
    Parameters:
     - port_id
    """
    self.send_sai_thrift_clear_port_all_stats(port_id)
    return self.recv_sai_thrift_clear_port_all_stats()

  def send_sai_thrift_clear_port_all_stats(self, port_id):
    self._oprot.writeMessageBegin('sai_thrift_clear_port_all_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_clear_port_all_stats_args()
    args.port_id = port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_clear_port_all_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_clear_port_all_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_port_all_stats failed: unknown result");

  def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_fdb_entry()

  def send_sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_fdb_entry_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_fdb_entry failed: unknown result");

  def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    self.send_sai_thrift_delete_fdb_entry(thrift_fdb_entry)
    return self.recv_sai_thrift_delete_fdb_entry()

  def send_sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    self._oprot.writeMessageBegin('sai_thrift_delete_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_fdb_entry_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_fdb_entry failed: unknown result");

  def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_flush_fdb_entries(thrift_attr_list)
    return self.recv_sai_thrift_flush_fdb_entries()

  def send_sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_flush_fdb_entries', TMessageType.CALL, self._seqid)
    args = sai_thrift_flush_fdb_entries_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_flush_fdb_entries(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_flush_fdb_entries_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_flush_fdb_entries failed: unknown result");

  def sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr)
    return self.recv_sai_thrift_set_fdb_entry_attribute()

  def send_sai_thrift_set_fdb_entry_attribute(self, thrift_fdb_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_fdb_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_fdb_entry_attribute_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_fdb_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_fdb_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_fdb_entry_attribute failed: unknown result");

  def sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    self.send_sai_thrift_get_fdb_entry_attribute(thrift_fdb_entry)
    return self.recv_sai_thrift_get_fdb_entry_attribute()

  def send_sai_thrift_get_fdb_entry_attribute(self, thrift_fdb_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_fdb_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_fdb_entry_attribute_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_fdb_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_fdb_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_fdb_entry_attribute failed: unknown result");

  def sai_thrift_create_vlan(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_vlan(thrift_attr_list)
    return self.recv_sai_thrift_create_vlan()

  def send_sai_thrift_create_vlan(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_vlan_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result");

  def sai_thrift_remove_vlan(self, vlan_oid):
    """
    Parameters:
     - vlan_oid
    """
    self.send_sai_thrift_remove_vlan(vlan_oid)
    return self.recv_sai_thrift_remove_vlan()

  def send_sai_thrift_remove_vlan(self, vlan_oid):
    self._oprot.writeMessageBegin('sai_thrift_remove_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_vlan_args()
    args.vlan_oid = vlan_oid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_vlan failed: unknown result");

  def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    """
    Parameters:
     - vlan_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_vlan_stats(vlan_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_vlan_stats()

  def send_sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_vlan_stats_args()
    args.vlan_id = vlan_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_vlan_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_vlan_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result");

  def sai_thrift_create_vlan_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_vlan_member(thrift_attr_list)
    return self.recv_sai_thrift_create_vlan_member()

  def send_sai_thrift_create_vlan_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_vlan_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_vlan_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_vlan_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_vlan_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan_member failed: unknown result");

  def sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
    """
    Parameters:
     - vlan_member_id
    """
    self.send_sai_thrift_get_vlan_member_attribute(vlan_member_id)
    return self.recv_sai_thrift_get_vlan_member_attribute()

  def send_sai_thrift_get_vlan_member_attribute(self, vlan_member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_vlan_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_vlan_member_attribute_args()
    args.vlan_member_id = vlan_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_vlan_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_vlan_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_member_attribute failed: unknown result");

  def sai_thrift_remove_vlan_member(self, vlan_member_id):
    """
    Parameters:
     - vlan_member_id
    """
    self.send_sai_thrift_remove_vlan_member(vlan_member_id)
    return self.recv_sai_thrift_remove_vlan_member()

  def send_sai_thrift_remove_vlan_member(self, vlan_member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_vlan_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_vlan_member_args()
    args.vlan_member_id = vlan_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_vlan_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_vlan_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_vlan_member failed: unknown result");

  def sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
    """
    Parameters:
     - vlan_id
     - thrift_attr
    """
    self.send_sai_thrift_set_vlan_attribute(vlan_id, thrift_attr)
    return self.recv_sai_thrift_set_vlan_attribute()

  def send_sai_thrift_set_vlan_attribute(self, vlan_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_vlan_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_vlan_attribute_args()
    args.vlan_id = vlan_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_vlan_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_vlan_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_vlan_attribute failed: unknown result");

  def sai_thrift_get_vlan_attribute(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    self.send_sai_thrift_get_vlan_attribute(vlan_id)
    return self.recv_sai_thrift_get_vlan_attribute()

  def send_sai_thrift_get_vlan_attribute(self, vlan_id):
    self._oprot.writeMessageBegin('sai_thrift_get_vlan_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_vlan_attribute_args()
    args.vlan_id = vlan_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_vlan_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_vlan_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_attribute failed: unknown result");

  def sai_thrift_get_vlan_id(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    self.send_sai_thrift_get_vlan_id(vlan_id)
    return self.recv_sai_thrift_get_vlan_id()

  def send_sai_thrift_get_vlan_id(self, vlan_id):
    self._oprot.writeMessageBegin('sai_thrift_get_vlan_id', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_vlan_id_args()
    args.vlan_id = vlan_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_vlan_id(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_vlan_id_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_id failed: unknown result");

  def sai_thrift_create_virtual_router(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_virtual_router(thrift_attr_list)
    return self.recv_sai_thrift_create_virtual_router()

  def send_sai_thrift_create_virtual_router(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_virtual_router', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_virtual_router_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_virtual_router(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_virtual_router_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result");

  def sai_thrift_remove_virtual_router(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    self.send_sai_thrift_remove_virtual_router(vr_id)
    return self.recv_sai_thrift_remove_virtual_router()

  def send_sai_thrift_remove_virtual_router(self, vr_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_virtual_router', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_virtual_router_args()
    args.vr_id = vr_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_virtual_router(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_virtual_router_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_virtual_router failed: unknown result");

  def sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
    """
    Parameters:
     - vr_id
     - thrift_attr
    """
    self.send_sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr)
    return self.recv_sai_thrift_set_virtual_router_attribute()

  def send_sai_thrift_set_virtual_router_attribute(self, vr_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_virtual_router_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_virtual_router_attribute_args()
    args.vr_id = vr_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_virtual_router_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_virtual_router_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_virtual_router_attribute failed: unknown result");

  def sai_thrift_get_virtual_router_attribute(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    self.send_sai_thrift_get_virtual_router_attribute(vr_id)
    return self.recv_sai_thrift_get_virtual_router_attribute()

  def send_sai_thrift_get_virtual_router_attribute(self, vr_id):
    self._oprot.writeMessageBegin('sai_thrift_get_virtual_router_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_virtual_router_attribute_args()
    args.vr_id = vr_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_virtual_router_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_virtual_router_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_virtual_router_attribute failed: unknown result");

  def sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_route_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_route(thrift_route_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_route()

  def send_sai_thrift_create_route(self, thrift_route_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_route', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_route_args()
    args.thrift_route_entry = thrift_route_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_route(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_route_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_route failed: unknown result");

  def sai_thrift_remove_route(self, thrift_route_entry):
    """
    Parameters:
     - thrift_route_entry
    """
    self.send_sai_thrift_remove_route(thrift_route_entry)
    return self.recv_sai_thrift_remove_route()

  def send_sai_thrift_remove_route(self, thrift_route_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_route', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_route_args()
    args.thrift_route_entry = thrift_route_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_route(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_route_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_route failed: unknown result");

  def sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
    """
    Parameters:
     - thrift_route_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr)
    return self.recv_sai_thrift_set_route_attribute()

  def send_sai_thrift_set_route_attribute(self, thrift_route_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_route_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_route_attribute_args()
    args.thrift_route_entry = thrift_route_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_route_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_route_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_route_attribute failed: unknown result");

  def sai_thrift_get_route_attribute(self, thrift_route_entry):
    """
    Parameters:
     - thrift_route_entry
    """
    self.send_sai_thrift_get_route_attribute(thrift_route_entry)
    return self.recv_sai_thrift_get_route_attribute()

  def send_sai_thrift_get_route_attribute(self, thrift_route_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_route_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_route_attribute_args()
    args.thrift_route_entry = thrift_route_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_route_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_route_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_route_attribute failed: unknown result");

  def sai_thrift_create_router_interface(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_router_interface(thrift_attr_list)
    return self.recv_sai_thrift_create_router_interface()

  def send_sai_thrift_create_router_interface(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_router_interface', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_router_interface_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_router_interface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_router_interface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result");

  def sai_thrift_remove_router_interface(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    self.send_sai_thrift_remove_router_interface(rif_id)
    return self.recv_sai_thrift_remove_router_interface()

  def send_sai_thrift_remove_router_interface(self, rif_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_router_interface', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_router_interface_args()
    args.rif_id = rif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_router_interface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_router_interface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_router_interface failed: unknown result");

  def sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
    """
    Parameters:
     - rif_id
     - thrift_attr
    """
    self.send_sai_thrift_set_router_interface_attribute(rif_id, thrift_attr)
    return self.recv_sai_thrift_set_router_interface_attribute()

  def send_sai_thrift_set_router_interface_attribute(self, rif_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_router_interface_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_router_interface_attribute_args()
    args.rif_id = rif_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_router_interface_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_router_interface_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_router_interface_attribute failed: unknown result");

  def sai_thrift_get_router_interface_attribute(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    self.send_sai_thrift_get_router_interface_attribute(rif_id)
    return self.recv_sai_thrift_get_router_interface_attribute()

  def send_sai_thrift_get_router_interface_attribute(self, rif_id):
    self._oprot.writeMessageBegin('sai_thrift_get_router_interface_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_router_interface_attribute_args()
    args.rif_id = rif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_router_interface_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_router_interface_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_router_interface_attribute failed: unknown result");

  def sai_thrift_create_next_hop(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_next_hop(thrift_attr_list)
    return self.recv_sai_thrift_create_next_hop()

  def send_sai_thrift_create_next_hop(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_next_hop', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_next_hop_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_next_hop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_next_hop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result");

  def sai_thrift_remove_next_hop(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    self.send_sai_thrift_remove_next_hop(next_hop_id)
    return self.recv_sai_thrift_remove_next_hop()

  def send_sai_thrift_remove_next_hop(self, next_hop_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_args()
    args.next_hop_id = next_hop_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop failed: unknown result");

  def sai_thrift_get_next_hop_attribute(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    self.send_sai_thrift_get_next_hop_attribute(next_hop_id)
    return self.recv_sai_thrift_get_next_hop_attribute()

  def send_sai_thrift_get_next_hop_attribute(self, next_hop_id):
    self._oprot.writeMessageBegin('sai_thrift_get_next_hop_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_next_hop_attribute_args()
    args.next_hop_id = next_hop_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_next_hop_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_next_hop_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_attribute failed: unknown result");

  def sai_thrift_create_next_hop_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_next_hop_group(thrift_attr_list)
    return self.recv_sai_thrift_create_next_hop_group()

  def send_sai_thrift_create_next_hop_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_next_hop_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_next_hop_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_next_hop_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result");

  def sai_thrift_remove_next_hop_group(self, nhop_group_oid):
    """
    Parameters:
     - nhop_group_oid
    """
    self.send_sai_thrift_remove_next_hop_group(nhop_group_oid)
    return self.recv_sai_thrift_remove_next_hop_group()

  def send_sai_thrift_remove_next_hop_group(self, nhop_group_oid):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_group_args()
    args.nhop_group_oid = nhop_group_oid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group failed: unknown result");

  def sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
    """
    Parameters:
     - nhop_group_oid
     - thrift_attr
    """
    self.send_sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr)
    return self.recv_sai_thrift_set_next_hop_group_attribute()

  def send_sai_thrift_set_next_hop_group_attribute(self, nhop_group_oid, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_next_hop_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_next_hop_group_attribute_args()
    args.nhop_group_oid = nhop_group_oid
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_next_hop_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_next_hop_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_next_hop_group_attribute failed: unknown result");

  def sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
    """
    Parameters:
     - nhop_group_oid
    """
    self.send_sai_thrift_get_next_hop_group_attribute(nhop_group_oid)
    return self.recv_sai_thrift_get_next_hop_group_attribute()

  def send_sai_thrift_get_next_hop_group_attribute(self, nhop_group_oid):
    self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_next_hop_group_attribute_args()
    args.nhop_group_oid = nhop_group_oid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_next_hop_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_next_hop_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_attribute failed: unknown result");

  def sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_next_hop_group_member(thrift_attr_list)
    return self.recv_sai_thrift_create_next_hop_group_member()

  def send_sai_thrift_create_next_hop_group_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_next_hop_group_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_next_hop_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_next_hop_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group_member failed: unknown result");

  def sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
    """
    Parameters:
     - nhop_group_member_oid
    """
    self.send_sai_thrift_remove_next_hop_group_member(nhop_group_member_oid)
    return self.recv_sai_thrift_remove_next_hop_group_member()

  def send_sai_thrift_remove_next_hop_group_member(self, nhop_group_member_oid):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_group_member_args()
    args.nhop_group_member_oid = nhop_group_member_oid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group_member failed: unknown result");

  def sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
    """
    Parameters:
     - nhop_group_member_oid
    """
    self.send_sai_thrift_get_next_hop_group_member_attribute(nhop_group_member_oid)
    return self.recv_sai_thrift_get_next_hop_group_member_attribute()

  def send_sai_thrift_get_next_hop_group_member_attribute(self, nhop_group_member_oid):
    self._oprot.writeMessageBegin('sai_thrift_get_next_hop_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_next_hop_group_member_attribute_args()
    args.nhop_group_member_oid = nhop_group_member_oid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_next_hop_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_next_hop_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_next_hop_group_member_attribute failed: unknown result");

  def sai_thrift_create_lag(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_lag(thrift_attr_list)
    return self.recv_sai_thrift_create_lag()

  def send_sai_thrift_create_lag(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_lag', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_lag_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_lag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_lag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag failed: unknown result");

  def sai_thrift_remove_lag(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    self.send_sai_thrift_remove_lag(lag_id)
    return self.recv_sai_thrift_remove_lag()

  def send_sai_thrift_remove_lag(self, lag_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_lag', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_lag_args()
    args.lag_id = lag_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_lag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_lag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag failed: unknown result");

  def sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
    """
    Parameters:
     - lag_id
     - thrift_attr
    """
    self.send_sai_thrift_set_lag_attribute(lag_id, thrift_attr)
    return self.recv_sai_thrift_set_lag_attribute()

  def send_sai_thrift_set_lag_attribute(self, lag_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_lag_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_lag_attribute_args()
    args.lag_id = lag_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_lag_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_lag_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_lag_attribute failed: unknown result");

  def sai_thrift_get_lag_attribute(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    self.send_sai_thrift_get_lag_attribute(lag_id)
    return self.recv_sai_thrift_get_lag_attribute()

  def send_sai_thrift_get_lag_attribute(self, lag_id):
    self._oprot.writeMessageBegin('sai_thrift_get_lag_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_lag_attribute_args()
    args.lag_id = lag_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_lag_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_lag_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_attribute failed: unknown result");

  def sai_thrift_create_lag_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_lag_member(thrift_attr_list)
    return self.recv_sai_thrift_create_lag_member()

  def send_sai_thrift_create_lag_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_lag_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_lag_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_lag_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_lag_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result");

  def sai_thrift_remove_lag_member(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    self.send_sai_thrift_remove_lag_member(lag_member_id)
    return self.recv_sai_thrift_remove_lag_member()

  def send_sai_thrift_remove_lag_member(self, lag_member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_lag_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_lag_member_args()
    args.lag_member_id = lag_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_lag_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_lag_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag_member failed: unknown result");

  def sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
    """
    Parameters:
     - lag_member_id
     - thrift_attr
    """
    self.send_sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr)
    return self.recv_sai_thrift_set_lag_member_attribute()

  def send_sai_thrift_set_lag_member_attribute(self, lag_member_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_lag_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_lag_member_attribute_args()
    args.lag_member_id = lag_member_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_lag_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_lag_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_lag_member_attribute failed: unknown result");

  def sai_thrift_get_lag_member_attribute(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    self.send_sai_thrift_get_lag_member_attribute(lag_member_id)
    return self.recv_sai_thrift_get_lag_member_attribute()

  def send_sai_thrift_get_lag_member_attribute(self, lag_member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_lag_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_lag_member_attribute_args()
    args.lag_member_id = lag_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_lag_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_lag_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_lag_member_attribute failed: unknown result");

  def sai_thrift_create_stp_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_stp_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_stp_entry()

  def send_sai_thrift_create_stp_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_stp_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_stp_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_stp_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_stp_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_entry failed: unknown result");

  def sai_thrift_remove_stp_entry(self, stp_id):
    """
    Parameters:
     - stp_id
    """
    self.send_sai_thrift_remove_stp_entry(stp_id)
    return self.recv_sai_thrift_remove_stp_entry()

  def send_sai_thrift_remove_stp_entry(self, stp_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_stp_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_stp_entry_args()
    args.stp_id = stp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_stp_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_stp_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_stp_entry failed: unknown result");

  def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    """
    Parameters:
     - stp_id
     - port_id
     - stp_port_state
    """
    self.send_sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state)
    return self.recv_sai_thrift_set_stp_port_state()

  def send_sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    self._oprot.writeMessageBegin('sai_thrift_set_stp_port_state', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_stp_port_state_args()
    args.stp_id = stp_id
    args.port_id = port_id
    args.stp_port_state = stp_port_state
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_stp_port_state(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_stp_port_state_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_stp_port_state failed: unknown result");

  def sai_thrift_get_stp_port_state(self, stp_id, port_id):
    """
    Parameters:
     - stp_id
     - port_id
    """
    self.send_sai_thrift_get_stp_port_state(stp_id, port_id)
    return self.recv_sai_thrift_get_stp_port_state()

  def send_sai_thrift_get_stp_port_state(self, stp_id, port_id):
    self._oprot.writeMessageBegin('sai_thrift_get_stp_port_state', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_stp_port_state_args()
    args.stp_id = stp_id
    args.port_id = port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_stp_port_state(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_stp_port_state_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_port_state failed: unknown result");

  def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_neighbor_entry()

  def send_sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_neighbor_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_neighbor_entry_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_neighbor_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_neighbor_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_neighbor_entry failed: unknown result");

  def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    self.send_sai_thrift_remove_neighbor_entry(thrift_neighbor_entry)
    return self.recv_sai_thrift_remove_neighbor_entry()

  def send_sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_neighbor_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_neighbor_entry_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_neighbor_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_neighbor_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_neighbor_entry failed: unknown result");

  def sai_thrift_remove_all_neighbor_entry(self):
    self.send_sai_thrift_remove_all_neighbor_entry()
    return self.recv_sai_thrift_remove_all_neighbor_entry()

  def send_sai_thrift_remove_all_neighbor_entry(self):
    self._oprot.writeMessageBegin('sai_thrift_remove_all_neighbor_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_all_neighbor_entry_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_all_neighbor_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_all_neighbor_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_all_neighbor_entry failed: unknown result");

  def sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr)
    return self.recv_sai_thrift_set_neighbor_entry_attribute()

  def send_sai_thrift_set_neighbor_entry_attribute(self, thrift_neighbor_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_neighbor_entry_attribute_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_neighbor_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_neighbor_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_neighbor_entry_attribute failed: unknown result");

  def sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    self.send_sai_thrift_get_neighbor_entry_attribute(thrift_neighbor_entry)
    return self.recv_sai_thrift_get_neighbor_entry_attribute()

  def send_sai_thrift_get_neighbor_entry_attribute(self, thrift_neighbor_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_neighbor_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_neighbor_entry_attribute_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_neighbor_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_neighbor_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_neighbor_entry_attribute failed: unknown result");

  def sai_thrift_get_switch_attribute(self, thrift_attr_ids):
    """
    Parameters:
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_switch_attribute(thrift_attr_ids)
    return self.recv_sai_thrift_get_switch_attribute()

  def send_sai_thrift_get_switch_attribute(self, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_switch_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_switch_attribute_args()
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_switch_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_switch_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result");

  def sai_thrift_get_port_list_by_front_port(self):
    self.send_sai_thrift_get_port_list_by_front_port()
    return self.recv_sai_thrift_get_port_list_by_front_port()

  def send_sai_thrift_get_port_list_by_front_port(self):
    self._oprot.writeMessageBegin('sai_thrift_get_port_list_by_front_port', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_port_list_by_front_port_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_port_list_by_front_port(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_port_list_by_front_port_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_list_by_front_port failed: unknown result");

  def sai_thrift_get_cpu_port_id(self):
    self.send_sai_thrift_get_cpu_port_id()
    return self.recv_sai_thrift_get_cpu_port_id()

  def send_sai_thrift_get_cpu_port_id(self):
    self._oprot.writeMessageBegin('sai_thrift_get_cpu_port_id', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_cpu_port_id_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_cpu_port_id(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_cpu_port_id_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_port_id failed: unknown result");

  def sai_thrift_get_default_trap_group(self):
    self.send_sai_thrift_get_default_trap_group()
    return self.recv_sai_thrift_get_default_trap_group()

  def send_sai_thrift_get_default_trap_group(self):
    self._oprot.writeMessageBegin('sai_thrift_get_default_trap_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_default_trap_group_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_default_trap_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_default_trap_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_trap_group failed: unknown result");

  def sai_thrift_get_default_router_id(self):
    self.send_sai_thrift_get_default_router_id()
    return self.recv_sai_thrift_get_default_router_id()

  def send_sai_thrift_get_default_router_id(self):
    self._oprot.writeMessageBegin('sai_thrift_get_default_router_id', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_default_router_id_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_default_router_id(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_default_router_id_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_router_id failed: unknown result");

  def sai_thrift_get_default_1q_bridge_id(self):
    self.send_sai_thrift_get_default_1q_bridge_id()
    return self.recv_sai_thrift_get_default_1q_bridge_id()

  def send_sai_thrift_get_default_1q_bridge_id(self):
    self._oprot.writeMessageBegin('sai_thrift_get_default_1q_bridge_id', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_default_1q_bridge_id_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_default_1q_bridge_id(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_default_1q_bridge_id_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_1q_bridge_id failed: unknown result");

  def sai_thrift_get_default_vlan_id(self):
    self.send_sai_thrift_get_default_vlan_id()
    return self.recv_sai_thrift_get_default_vlan_id()

  def send_sai_thrift_get_default_vlan_id(self):
    self._oprot.writeMessageBegin('sai_thrift_get_default_vlan_id', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_default_vlan_id_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_default_vlan_id(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_default_vlan_id_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_default_vlan_id failed: unknown result");

  def sai_thrift_get_port_id_by_front_port(self, port_name):
    """
    Parameters:
     - port_name
    """
    self.send_sai_thrift_get_port_id_by_front_port(port_name)
    return self.recv_sai_thrift_get_port_id_by_front_port()

  def send_sai_thrift_get_port_id_by_front_port(self, port_name):
    self._oprot.writeMessageBegin('sai_thrift_get_port_id_by_front_port', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_port_id_by_front_port_args()
    args.port_name = port_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_port_id_by_front_port(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_port_id_by_front_port_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_port_id_by_front_port failed: unknown result");

  def sai_thrift_set_switch_attribute(self, attribute):
    """
    Parameters:
     - attribute
    """
    self.send_sai_thrift_set_switch_attribute(attribute)
    return self.recv_sai_thrift_set_switch_attribute()

  def send_sai_thrift_set_switch_attribute(self, attribute):
    self._oprot.writeMessageBegin('sai_thrift_set_switch_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_switch_attribute_args()
    args.attribute = attribute
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_switch_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_switch_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_switch_attribute failed: unknown result");

  def sai_thrift_create_switch(self):
    self.send_sai_thrift_create_switch()
    return self.recv_sai_thrift_create_switch()

  def send_sai_thrift_create_switch(self):
    self._oprot.writeMessageBegin('sai_thrift_create_switch', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_switch_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_switch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_switch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_switch failed: unknown result");

  def sai_thrift_remove_switch(self):
    self.send_sai_thrift_remove_switch()
    return self.recv_sai_thrift_remove_switch()

  def send_sai_thrift_remove_switch(self):
    self._oprot.writeMessageBegin('sai_thrift_remove_switch', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_switch_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_switch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_switch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_switch failed: unknown result");

  def sai_thrift_create_bridge_port(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_bridge_port(thrift_attr_list)
    return self.recv_sai_thrift_create_bridge_port()

  def send_sai_thrift_create_bridge_port(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_bridge_port', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_bridge_port_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_bridge_port(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_bridge_port_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge_port failed: unknown result");

  def sai_thrift_remove_bridge_port(self, bridge_port_id):
    """
    Parameters:
     - bridge_port_id
    """
    self.send_sai_thrift_remove_bridge_port(bridge_port_id)
    return self.recv_sai_thrift_remove_bridge_port()

  def send_sai_thrift_remove_bridge_port(self, bridge_port_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_bridge_port', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_bridge_port_args()
    args.bridge_port_id = bridge_port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_bridge_port(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_bridge_port_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_bridge_port failed: unknown result");

  def sai_thrift_get_bridge_port_list(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    self.send_sai_thrift_get_bridge_port_list(bridge_id)
    return self.recv_sai_thrift_get_bridge_port_list()

  def send_sai_thrift_get_bridge_port_list(self, bridge_id):
    self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_list', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_bridge_port_list_args()
    args.bridge_id = bridge_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_bridge_port_list(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_bridge_port_list_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_list failed: unknown result");

  def sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
    """
    Parameters:
     - bridge_port_id
    """
    self.send_sai_thrift_get_bridge_port_attribute(bridge_port_id)
    return self.recv_sai_thrift_get_bridge_port_attribute()

  def send_sai_thrift_get_bridge_port_attribute(self, bridge_port_id):
    self._oprot.writeMessageBegin('sai_thrift_get_bridge_port_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_bridge_port_attribute_args()
    args.bridge_port_id = bridge_port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_bridge_port_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_bridge_port_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_port_attribute failed: unknown result");

  def sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
    """
    Parameters:
     - bridge_port_id
     - thrift_attr
    """
    self.send_sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr)
    return self.recv_sai_thrift_set_bridge_port_attribute()

  def send_sai_thrift_set_bridge_port_attribute(self, bridge_port_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_bridge_port_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_bridge_port_attribute_args()
    args.bridge_port_id = bridge_port_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_bridge_port_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_bridge_port_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_bridge_port_attribute failed: unknown result");

  def sai_thrift_create_bridge(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_bridge(thrift_attr_list)
    return self.recv_sai_thrift_create_bridge()

  def send_sai_thrift_create_bridge(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_bridge', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_bridge_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_bridge(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_bridge_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_bridge failed: unknown result");

  def sai_thrift_remove_bridge(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    self.send_sai_thrift_remove_bridge(bridge_id)
    return self.recv_sai_thrift_remove_bridge()

  def send_sai_thrift_remove_bridge(self, bridge_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_bridge', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_bridge_args()
    args.bridge_id = bridge_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_bridge(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_bridge_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_bridge failed: unknown result");

  def sai_thrift_get_bridge_attribute(self, bridge_id):
    """
    Parameters:
     - bridge_id
    """
    self.send_sai_thrift_get_bridge_attribute(bridge_id)
    return self.recv_sai_thrift_get_bridge_attribute()

  def send_sai_thrift_get_bridge_attribute(self, bridge_id):
    self._oprot.writeMessageBegin('sai_thrift_get_bridge_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_bridge_attribute_args()
    args.bridge_id = bridge_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_bridge_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_bridge_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_bridge_attribute failed: unknown result");

  def sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
    """
    Parameters:
     - bridge_id
     - thrift_attr
    """
    self.send_sai_thrift_set_bridge_attribute(bridge_id, thrift_attr)
    return self.recv_sai_thrift_set_bridge_attribute()

  def send_sai_thrift_set_bridge_attribute(self, bridge_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_bridge_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_bridge_attribute_args()
    args.bridge_id = bridge_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_bridge_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_bridge_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_bridge_attribute failed: unknown result");

  def sai_thrift_create_hostif(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif()

  def send_sai_thrift_create_hostif(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result");

  def sai_thrift_remove_hostif(self, thrift_hif_id):
    """
    Parameters:
     - thrift_hif_id
    """
    self.send_sai_thrift_remove_hostif(thrift_hif_id)
    return self.recv_sai_thrift_remove_hostif()

  def send_sai_thrift_remove_hostif(self, thrift_hif_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_args()
    args.thrift_hif_id = thrift_hif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif failed: unknown result");

  def sai_thrift_get_hostif_attribute(self, thrift_hif_id):
    """
    Parameters:
     - thrift_hif_id
    """
    self.send_sai_thrift_get_hostif_attribute(thrift_hif_id)
    return self.recv_sai_thrift_get_hostif_attribute()

  def send_sai_thrift_get_hostif_attribute(self, thrift_hif_id):
    self._oprot.writeMessageBegin('sai_thrift_get_hostif_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_hostif_attribute_args()
    args.thrift_hif_id = thrift_hif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_hostif_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_hostif_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_attribute failed: unknown result");

  def sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
    """
    Parameters:
     - thrift_hif_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr)
    return self.recv_sai_thrift_set_hostif_attribute()

  def send_sai_thrift_set_hostif_attribute(self, thrift_hif_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hostif_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hostif_attribute_args()
    args.thrift_hif_id = thrift_hif_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hostif_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hostif_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_attribute failed: unknown result");

  def sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif_table_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif_table_entry()

  def send_sai_thrift_create_hostif_table_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif_table_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_table_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif_table_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_table_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_table_entry failed: unknown result");

  def sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
    """
    Parameters:
     - thrift_hostif_table_entry_id
    """
    self.send_sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id)
    return self.recv_sai_thrift_remove_hostif_table_entry()

  def send_sai_thrift_remove_hostif_table_entry(self, thrift_hostif_table_entry_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif_table_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_table_entry_args()
    args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif_table_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_table_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_table_entry failed: unknown result");

  def sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
    """
    Parameters:
     - thrift_hostif_table_entry_id
    """
    self.send_sai_thrift_get_hostif_table_entry_attribute(thrift_hostif_table_entry_id)
    return self.recv_sai_thrift_get_hostif_table_entry_attribute()

  def send_sai_thrift_get_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id):
    self._oprot.writeMessageBegin('sai_thrift_get_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_hostif_table_entry_attribute_args()
    args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_hostif_table_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_hostif_table_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_table_entry_attribute failed: unknown result");

  def sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_table_entry_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr)
    return self.recv_sai_thrift_set_hostif_table_entry_attribute()

  def send_sai_thrift_set_hostif_table_entry_attribute(self, thrift_hostif_table_entry_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hostif_table_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hostif_table_entry_attribute_args()
    args.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hostif_table_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hostif_table_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_table_entry_attribute failed: unknown result");

  def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif_trap_group(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif_trap_group()

  def send_sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_trap_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif_trap_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_trap_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result");

  def sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
    """
    Parameters:
     - thrift_hostif_trap_group_id
    """
    self.send_sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id)
    return self.recv_sai_thrift_remove_hostif_trap_group()

  def send_sai_thrift_remove_hostif_trap_group(self, thrift_hostif_trap_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_trap_group_args()
    args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif_trap_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_trap_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap_group failed: unknown result");

  def sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
    """
    Parameters:
     - thrift_hostif_trap_group_id
    """
    self.send_sai_thrift_get_hostif_trap_group_attribute(thrift_hostif_trap_group_id)
    return self.recv_sai_thrift_get_hostif_trap_group_attribute()

  def send_sai_thrift_get_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id):
    self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_hostif_trap_group_attribute_args()
    args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_hostif_trap_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_hostif_trap_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_group_attribute failed: unknown result");

  def sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_trap_group_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr)
    return self.recv_sai_thrift_set_hostif_trap_group_attribute()

  def send_sai_thrift_set_hostif_trap_group_attribute(self, thrift_hostif_trap_group_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hostif_trap_group_attribute_args()
    args.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hostif_trap_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hostif_trap_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_trap_group_attribute failed: unknown result");

  def sai_thrift_create_hostif_trap(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif_trap(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif_trap()

  def send_sai_thrift_create_hostif_trap(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_trap_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif_trap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_trap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result");

  def sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
    """
    Parameters:
     - thrift_hostif_trap_id
    """
    self.send_sai_thrift_remove_hostif_trap(thrift_hostif_trap_id)
    return self.recv_sai_thrift_remove_hostif_trap()

  def send_sai_thrift_remove_hostif_trap(self, thrift_hostif_trap_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_trap_args()
    args.thrift_hostif_trap_id = thrift_hostif_trap_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif_trap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_trap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap failed: unknown result");

  def sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
    """
    Parameters:
     - thrift_hostif_trap_id
    """
    self.send_sai_thrift_get_hostif_trap_attribute(thrift_hostif_trap_id)
    return self.recv_sai_thrift_get_hostif_trap_attribute()

  def send_sai_thrift_get_hostif_trap_attribute(self, thrift_hostif_trap_id):
    self._oprot.writeMessageBegin('sai_thrift_get_hostif_trap_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_hostif_trap_attribute_args()
    args.thrift_hostif_trap_id = thrift_hostif_trap_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_hostif_trap_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_hostif_trap_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hostif_trap_attribute failed: unknown result");

  def sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
    """
    Parameters:
     - thrift_hostif_trap_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr)
    return self.recv_sai_thrift_set_hostif_trap_attribute()

  def send_sai_thrift_set_hostif_trap_attribute(self, thrift_hostif_trap_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hostif_trap_attribute_args()
    args.thrift_hostif_trap_id = thrift_hostif_trap_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hostif_trap_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hostif_trap_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_trap_attribute failed: unknown result");

  def sai_thrift_create_acl_table(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_table(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_table()

  def send_sai_thrift_create_acl_table(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_table', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_table_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_table(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_table_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result");

  def sai_thrift_remove_acl_table(self, acl_table_id):
    """
    Parameters:
     - acl_table_id
    """
    self.send_sai_thrift_remove_acl_table(acl_table_id)
    return self.recv_sai_thrift_remove_acl_table()

  def send_sai_thrift_remove_acl_table(self, acl_table_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_acl_table', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_acl_table_args()
    args.acl_table_id = acl_table_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_acl_table(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_acl_table_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table failed: unknown result");

  def sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
    """
    Parameters:
     - acl_table_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_acl_table_attribute(acl_table_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_acl_table_attribute()

  def send_sai_thrift_get_acl_table_attribute(self, acl_table_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_table_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_table_attribute_args()
    args.acl_table_id = acl_table_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_table_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_table_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_attribute failed: unknown result");

  def sai_thrift_create_acl_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_entry()

  def send_sai_thrift_create_acl_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result");

  def sai_thrift_remove_acl_entry(self, acl_entry):
    """
    Parameters:
     - acl_entry
    """
    self.send_sai_thrift_remove_acl_entry(acl_entry)
    return self.recv_sai_thrift_remove_acl_entry()

  def send_sai_thrift_remove_acl_entry(self, acl_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_acl_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_acl_entry_args()
    args.acl_entry = acl_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_acl_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_acl_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_entry failed: unknown result");

  def sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
    """
    Parameters:
     - acl_entry_id
     - thrift_attr
    """
    self.send_sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr)
    return self.recv_sai_thrift_set_acl_entry_attribute()

  def send_sai_thrift_set_acl_entry_attribute(self, acl_entry_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_acl_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_acl_entry_attribute_args()
    args.acl_entry_id = acl_entry_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_acl_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_acl_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_acl_entry_attribute failed: unknown result");

  def sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
    """
    Parameters:
     - acl_entry_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_acl_entry_attribute(acl_entry_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_acl_entry_attribute()

  def send_sai_thrift_get_acl_entry_attribute(self, acl_entry_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_entry_attribute_args()
    args.acl_entry_id = acl_entry_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_entry_attribute failed: unknown result");

  def sai_thrift_create_acl_table_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_table_group(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_table_group()

  def send_sai_thrift_create_acl_table_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_table_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_table_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_table_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group failed: unknown result");

  def sai_thrift_remove_acl_table_group(self, acl_table_group_id):
    """
    Parameters:
     - acl_table_group_id
    """
    self.send_sai_thrift_remove_acl_table_group(acl_table_group_id)
    return self.recv_sai_thrift_remove_acl_table_group()

  def send_sai_thrift_remove_acl_table_group(self, acl_table_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_acl_table_group_args()
    args.acl_table_group_id = acl_table_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_acl_table_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_acl_table_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table_group failed: unknown result");

  def sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
    """
    Parameters:
     - acl_table_group_id
    """
    self.send_sai_thrift_get_acl_table_group_attribute(acl_table_group_id)
    return self.recv_sai_thrift_get_acl_table_group_attribute()

  def send_sai_thrift_get_acl_table_group_attribute(self, acl_table_group_id):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_table_group_attribute_args()
    args.acl_table_group_id = acl_table_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_table_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_table_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_attribute failed: unknown result");

  def sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_table_group_member(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_table_group_member()

  def send_sai_thrift_create_acl_table_group_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_table_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_table_group_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_table_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_table_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table_group_member failed: unknown result");

  def sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
    """
    Parameters:
     - acl_table_group_member_id
    """
    self.send_sai_thrift_remove_acl_table_group_member(acl_table_group_member_id)
    return self.recv_sai_thrift_remove_acl_table_group_member()

  def send_sai_thrift_remove_acl_table_group_member(self, acl_table_group_member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_acl_table_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_acl_table_group_member_args()
    args.acl_table_group_member_id = acl_table_group_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_acl_table_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_acl_table_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_table_group_member failed: unknown result");

  def sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
    """
    Parameters:
     - acl_table_group_member_id
    """
    self.send_sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_id)
    return self.recv_sai_thrift_get_acl_table_group_member_attribute()

  def send_sai_thrift_get_acl_table_group_member_attribute(self, acl_table_group_member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_table_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_table_group_member_attribute_args()
    args.acl_table_group_member_id = acl_table_group_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_table_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_table_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_table_group_member_attribute failed: unknown result");

  def sai_thrift_create_acl_counter(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_counter(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_counter()

  def send_sai_thrift_create_acl_counter(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_counter', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_counter_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_counter(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_counter_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result");

  def sai_thrift_remove_acl_counter(self, acl_counter_id):
    """
    Parameters:
     - acl_counter_id
    """
    self.send_sai_thrift_remove_acl_counter(acl_counter_id)
    return self.recv_sai_thrift_remove_acl_counter()

  def send_sai_thrift_remove_acl_counter(self, acl_counter_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_acl_counter', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_acl_counter_args()
    args.acl_counter_id = acl_counter_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_acl_counter(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_acl_counter_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_acl_counter failed: unknown result");

  def sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    """
    Parameters:
     - acl_counter_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_acl_counter_attribute(acl_counter_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_acl_counter_attribute()

  def send_sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_counter_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_counter_attribute_args()
    args.acl_counter_id = acl_counter_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_counter_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_counter_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result");

  def sai_thrift_create_hash(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hash(thrift_attr_list)
    return self.recv_sai_thrift_create_hash()

  def send_sai_thrift_create_hash(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hash', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hash_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hash(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hash_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hash failed: unknown result");

  def sai_thrift_remove_hash(self, hash_id):
    """
    Parameters:
     - hash_id
    """
    self.send_sai_thrift_remove_hash(hash_id)
    return self.recv_sai_thrift_remove_hash()

  def send_sai_thrift_remove_hash(self, hash_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hash', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hash_args()
    args.hash_id = hash_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hash(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hash_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hash failed: unknown result");

  def sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
    """
    Parameters:
     - thrift_hash_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr)
    return self.recv_sai_thrift_set_hash_attribute()

  def send_sai_thrift_set_hash_attribute(self, thrift_hash_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hash_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hash_attribute_args()
    args.thrift_hash_id = thrift_hash_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hash_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hash_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hash_attribute failed: unknown result");

  def sai_thrift_get_hash_attribute(self, thrift_hash_id):
    """
    Parameters:
     - thrift_hash_id
    """
    self.send_sai_thrift_get_hash_attribute(thrift_hash_id)
    return self.recv_sai_thrift_get_hash_attribute()

  def send_sai_thrift_get_hash_attribute(self, thrift_hash_id):
    self._oprot.writeMessageBegin('sai_thrift_get_hash_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_hash_attribute_args()
    args.thrift_hash_id = thrift_hash_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_hash_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_hash_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_hash_attribute failed: unknown result");

  def sai_thrift_create_udf_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_udf_group(thrift_attr_list)
    return self.recv_sai_thrift_create_udf_group()

  def send_sai_thrift_create_udf_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_udf_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_udf_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_udf_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_udf_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_group failed: unknown result");

  def sai_thrift_remove_udf_group(self, udf_group_id):
    """
    Parameters:
     - udf_group_id
    """
    self.send_sai_thrift_remove_udf_group(udf_group_id)
    return self.recv_sai_thrift_remove_udf_group()

  def send_sai_thrift_remove_udf_group(self, udf_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_udf_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_udf_group_args()
    args.udf_group_id = udf_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_udf_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_udf_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf_group failed: unknown result");

  def sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
    """
    Parameters:
     - thrift_udf_group_id
    """
    self.send_sai_thrift_get_udf_group_attribute(thrift_udf_group_id)
    return self.recv_sai_thrift_get_udf_group_attribute()

  def send_sai_thrift_get_udf_group_attribute(self, thrift_udf_group_id):
    self._oprot.writeMessageBegin('sai_thrift_get_udf_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_udf_group_attribute_args()
    args.thrift_udf_group_id = thrift_udf_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_udf_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_udf_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_group_attribute failed: unknown result");

  def sai_thrift_create_udf_match(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_udf_match(thrift_attr_list)
    return self.recv_sai_thrift_create_udf_match()

  def send_sai_thrift_create_udf_match(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_udf_match', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_udf_match_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_udf_match(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_udf_match_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf_match failed: unknown result");

  def sai_thrift_remove_udf_match(self, udf_match_id):
    """
    Parameters:
     - udf_match_id
    """
    self.send_sai_thrift_remove_udf_match(udf_match_id)
    return self.recv_sai_thrift_remove_udf_match()

  def send_sai_thrift_remove_udf_match(self, udf_match_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_udf_match', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_udf_match_args()
    args.udf_match_id = udf_match_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_udf_match(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_udf_match_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf_match failed: unknown result");

  def sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
    """
    Parameters:
     - thrift_udf_match_id
    """
    self.send_sai_thrift_get_udf_match_attribute(thrift_udf_match_id)
    return self.recv_sai_thrift_get_udf_match_attribute()

  def send_sai_thrift_get_udf_match_attribute(self, thrift_udf_match_id):
    self._oprot.writeMessageBegin('sai_thrift_get_udf_match_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_udf_match_attribute_args()
    args.thrift_udf_match_id = thrift_udf_match_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_udf_match_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_udf_match_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_match_attribute failed: unknown result");

  def sai_thrift_create_udf(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_udf(thrift_attr_list)
    return self.recv_sai_thrift_create_udf()

  def send_sai_thrift_create_udf(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_udf', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_udf_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_udf(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_udf_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_udf failed: unknown result");

  def sai_thrift_remove_udf(self, udf_id):
    """
    Parameters:
     - udf_id
    """
    self.send_sai_thrift_remove_udf(udf_id)
    return self.recv_sai_thrift_remove_udf()

  def send_sai_thrift_remove_udf(self, udf_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_udf', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_udf_args()
    args.udf_id = udf_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_udf(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_udf_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_udf failed: unknown result");

  def sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
    """
    Parameters:
     - thrift_udf_id
     - thrift_attr
    """
    self.send_sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr)
    return self.recv_sai_thrift_set_udf_attribute()

  def send_sai_thrift_set_udf_attribute(self, thrift_udf_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_udf_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_udf_attribute_args()
    args.thrift_udf_id = thrift_udf_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_udf_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_udf_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_udf_attribute failed: unknown result");

  def sai_thrift_get_udf_attribute(self, thrift_udf_id):
    """
    Parameters:
     - thrift_udf_id
    """
    self.send_sai_thrift_get_udf_attribute(thrift_udf_id)
    return self.recv_sai_thrift_get_udf_attribute()

  def send_sai_thrift_get_udf_attribute(self, thrift_udf_id):
    self._oprot.writeMessageBegin('sai_thrift_get_udf_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_udf_attribute_args()
    args.thrift_udf_id = thrift_udf_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_udf_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_udf_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_udf_attribute failed: unknown result");

  def sai_thrift_create_mirror_session(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_mirror_session(thrift_attr_list)
    return self.recv_sai_thrift_create_mirror_session()

  def send_sai_thrift_create_mirror_session(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_mirror_session', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_mirror_session_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_mirror_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_mirror_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result");

  def sai_thrift_remove_mirror_session(self, session_id):
    """
    Parameters:
     - session_id
    """
    self.send_sai_thrift_remove_mirror_session(session_id)
    return self.recv_sai_thrift_remove_mirror_session()

  def send_sai_thrift_remove_mirror_session(self, session_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_mirror_session', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_mirror_session_args()
    args.session_id = session_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_mirror_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_mirror_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_mirror_session failed: unknown result");

  def sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
    """
    Parameters:
     - thrift_mirror_id
     - thrift_attr
    """
    self.send_sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr)
    return self.recv_sai_thrift_set_mirror_attribute()

  def send_sai_thrift_set_mirror_attribute(self, thrift_mirror_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_mirror_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_mirror_attribute_args()
    args.thrift_mirror_id = thrift_mirror_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_mirror_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_mirror_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_mirror_attribute failed: unknown result");

  def sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
    """
    Parameters:
     - thrift_mirror_id
    """
    self.send_sai_thrift_get_mirror_attribute(thrift_mirror_id)
    return self.recv_sai_thrift_get_mirror_attribute()

  def send_sai_thrift_get_mirror_attribute(self, thrift_mirror_id):
    self._oprot.writeMessageBegin('sai_thrift_get_mirror_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_mirror_attribute_args()
    args.thrift_mirror_id = thrift_mirror_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_mirror_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_mirror_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mirror_attribute failed: unknown result");

  def sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_inseg_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_inseg_entry()

  def send_sai_thrift_create_inseg_entry(self, thrift_inseg_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_inseg_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_inseg_entry_args()
    args.thrift_inseg_entry = thrift_inseg_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_inseg_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_inseg_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_inseg_entry failed: unknown result");

  def sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
    """
    Parameters:
     - thrift_inseg_entry
    """
    self.send_sai_thrift_remove_inseg_entry(thrift_inseg_entry)
    return self.recv_sai_thrift_remove_inseg_entry()

  def send_sai_thrift_remove_inseg_entry(self, thrift_inseg_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_inseg_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_inseg_entry_args()
    args.thrift_inseg_entry = thrift_inseg_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_inseg_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_inseg_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_inseg_entry failed: unknown result");

  def sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
    """
    Parameters:
     - thrift_inseg_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr)
    return self.recv_sai_thrift_set_inseg_entry_attribute()

  def send_sai_thrift_set_inseg_entry_attribute(self, thrift_inseg_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_inseg_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_inseg_entry_attribute_args()
    args.thrift_inseg_entry = thrift_inseg_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_inseg_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_inseg_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_inseg_entry_attribute failed: unknown result");

  def sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
    """
    Parameters:
     - thrift_inseg_entry
    """
    self.send_sai_thrift_get_inseg_entry_attribute(thrift_inseg_entry)
    return self.recv_sai_thrift_get_inseg_entry_attribute()

  def send_sai_thrift_get_inseg_entry_attribute(self, thrift_inseg_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_inseg_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_inseg_entry_attribute_args()
    args.thrift_inseg_entry = thrift_inseg_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_inseg_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_inseg_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_inseg_entry_attribute failed: unknown result");

  def sai_thrift_dump_log(self, dump_file_name):
    """
    Parameters:
     - dump_file_name
    """
    self.send_sai_thrift_dump_log(dump_file_name)
    return self.recv_sai_thrift_dump_log()

  def send_sai_thrift_dump_log(self, dump_file_name):
    self._oprot.writeMessageBegin('sai_thrift_dump_log', TMessageType.CALL, self._seqid)
    args = sai_thrift_dump_log_args()
    args.dump_file_name = dump_file_name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_dump_log(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_dump_log_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_dump_log failed: unknown result");

  def sai_thrift_create_policer(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_policer(thrift_attr_list)
    return self.recv_sai_thrift_create_policer()

  def send_sai_thrift_create_policer(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_policer', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_policer_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_policer(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_policer_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_policer failed: unknown result");

  def sai_thrift_remove_policer(self, thrift_policer_id):
    """
    Parameters:
     - thrift_policer_id
    """
    self.send_sai_thrift_remove_policer(thrift_policer_id)
    return self.recv_sai_thrift_remove_policer()

  def send_sai_thrift_remove_policer(self, thrift_policer_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_policer', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_policer_args()
    args.thrift_policer_id = thrift_policer_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_policer(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_policer_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_policer failed: unknown result");

  def sai_thrift_get_policer_attribute(self, thrift_policer_id):
    """
    Parameters:
     - thrift_policer_id
    """
    self.send_sai_thrift_get_policer_attribute(thrift_policer_id)
    return self.recv_sai_thrift_get_policer_attribute()

  def send_sai_thrift_get_policer_attribute(self, thrift_policer_id):
    self._oprot.writeMessageBegin('sai_thrift_get_policer_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_policer_attribute_args()
    args.thrift_policer_id = thrift_policer_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_policer_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_policer_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_attribute failed: unknown result");

  def sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
    """
    Parameters:
     - thrift_policer_id
     - thrift_attr
    """
    self.send_sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr)
    return self.recv_sai_thrift_set_policer_attribute()

  def send_sai_thrift_set_policer_attribute(self, thrift_policer_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_policer_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_policer_attribute_args()
    args.thrift_policer_id = thrift_policer_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_policer_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_policer_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_policer_attribute failed: unknown result");

  def sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    """
    Parameters:
     - thrift_policer_id
     - thrift_counter_ids
    """
    self.send_sai_thrift_get_policer_stats(thrift_policer_id, thrift_counter_ids)
    return self.recv_sai_thrift_get_policer_stats()

  def send_sai_thrift_get_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_policer_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_policer_stats_args()
    args.thrift_policer_id = thrift_policer_id
    args.thrift_counter_ids = thrift_counter_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_policer_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_policer_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result");

  def sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    """
    Parameters:
     - thrift_policer_id
     - thrift_counter_ids
    """
    self.send_sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids)
    return self.recv_sai_thrift_clear_policer_stats()

  def send_sai_thrift_clear_policer_stats(self, thrift_policer_id, thrift_counter_ids):
    self._oprot.writeMessageBegin('sai_thrift_clear_policer_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_clear_policer_stats_args()
    args.thrift_policer_id = thrift_policer_id
    args.thrift_counter_ids = thrift_counter_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_clear_policer_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_clear_policer_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_policer_stats failed: unknown result");

  def sai_thrift_create_scheduler_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_scheduler_profile(thrift_attr_list)
    return self.recv_sai_thrift_create_scheduler_profile()

  def send_sai_thrift_create_scheduler_profile(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_scheduler_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_scheduler_profile_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_scheduler_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_scheduler_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler_profile failed: unknown result");

  def sai_thrift_remove_scheduler_profile(self, scheduler_id):
    """
    Parameters:
     - scheduler_id
    """
    self.send_sai_thrift_remove_scheduler_profile(scheduler_id)
    return self.recv_sai_thrift_remove_scheduler_profile()

  def send_sai_thrift_remove_scheduler_profile(self, scheduler_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_scheduler_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_scheduler_profile_args()
    args.scheduler_id = scheduler_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_scheduler_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_scheduler_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_scheduler_profile failed: unknown result");

  def sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
    """
    Parameters:
     - thrift_scheduler_id
    """
    self.send_sai_thrift_get_scheduler_attribute(thrift_scheduler_id)
    return self.recv_sai_thrift_get_scheduler_attribute()

  def send_sai_thrift_get_scheduler_attribute(self, thrift_scheduler_id):
    self._oprot.writeMessageBegin('sai_thrift_get_scheduler_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_scheduler_attribute_args()
    args.thrift_scheduler_id = thrift_scheduler_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_scheduler_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_scheduler_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_attribute failed: unknown result");

  def sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
    """
    Parameters:
     - thrift_scheduler_id
     - thrift_attr
    """
    self.send_sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr)
    return self.recv_sai_thrift_set_scheduler_attribute()

  def send_sai_thrift_set_scheduler_attribute(self, thrift_scheduler_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_scheduler_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_scheduler_attribute_args()
    args.thrift_scheduler_id = thrift_scheduler_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_scheduler_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_scheduler_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_scheduler_attribute failed: unknown result");

  def sai_thrift_create_scheduler_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_scheduler_group(thrift_attr_list)
    return self.recv_sai_thrift_create_scheduler_group()

  def send_sai_thrift_create_scheduler_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_scheduler_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_scheduler_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_scheduler_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_scheduler_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_scheduler_group failed: unknown result");

  def sai_thrift_remove_scheduler_group(self, scheduler_group_id):
    """
    Parameters:
     - scheduler_group_id
    """
    self.send_sai_thrift_remove_scheduler_group(scheduler_group_id)
    return self.recv_sai_thrift_remove_scheduler_group()

  def send_sai_thrift_remove_scheduler_group(self, scheduler_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_scheduler_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_scheduler_group_args()
    args.scheduler_group_id = scheduler_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_scheduler_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_scheduler_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_scheduler_group failed: unknown result");

  def sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
    """
    Parameters:
     - scheduler_group_id
    """
    self.send_sai_thrift_get_scheduler_group_attribute(scheduler_group_id)
    return self.recv_sai_thrift_get_scheduler_group_attribute()

  def send_sai_thrift_get_scheduler_group_attribute(self, scheduler_group_id):
    self._oprot.writeMessageBegin('sai_thrift_get_scheduler_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_scheduler_group_attribute_args()
    args.scheduler_group_id = scheduler_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_scheduler_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_scheduler_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_scheduler_group_attribute failed: unknown result");

  def sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
    """
    Parameters:
     - scheduler_group_id
     - thrift_attr
    """
    self.send_sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr)
    return self.recv_sai_thrift_set_scheduler_group_attribute()

  def send_sai_thrift_set_scheduler_group_attribute(self, scheduler_group_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_scheduler_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_scheduler_group_attribute_args()
    args.scheduler_group_id = scheduler_group_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_scheduler_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_scheduler_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_scheduler_group_attribute failed: unknown result");

  def sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
    """
    Parameters:
     - queue_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_queue_stats(queue_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_queue_stats()

  def send_sai_thrift_get_queue_stats(self, queue_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_queue_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_queue_stats_args()
    args.queue_id = queue_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_queue_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_queue_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_stats failed: unknown result");

  def sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
    """
    Parameters:
     - queue_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_clear_queue_stats()

  def send_sai_thrift_clear_queue_stats(self, queue_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_clear_queue_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_clear_queue_stats_args()
    args.queue_id = queue_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_clear_queue_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_clear_queue_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_queue_stats failed: unknown result");

  def sai_thrift_create_queue(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_queue(thrift_attr_list)
    return self.recv_sai_thrift_create_queue()

  def send_sai_thrift_create_queue(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_queue', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_queue_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_queue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_queue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_queue failed: unknown result");

  def sai_thrift_remove_queue(self, queue_id):
    """
    Parameters:
     - queue_id
    """
    self.send_sai_thrift_remove_queue(queue_id)
    return self.recv_sai_thrift_remove_queue()

  def send_sai_thrift_remove_queue(self, queue_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_queue', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_queue_args()
    args.queue_id = queue_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_queue(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_queue_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_queue failed: unknown result");

  def sai_thrift_get_queue_attribute(self, queue_id):
    """
    Parameters:
     - queue_id
    """
    self.send_sai_thrift_get_queue_attribute(queue_id)
    return self.recv_sai_thrift_get_queue_attribute()

  def send_sai_thrift_get_queue_attribute(self, queue_id):
    self._oprot.writeMessageBegin('sai_thrift_get_queue_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_queue_attribute_args()
    args.queue_id = queue_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_queue_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_queue_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_queue_attribute failed: unknown result");

  def sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
    """
    Parameters:
     - queue_id
     - thrift_attr
    """
    self.send_sai_thrift_set_queue_attribute(queue_id, thrift_attr)
    return self.recv_sai_thrift_set_queue_attribute()

  def send_sai_thrift_set_queue_attribute(self, queue_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_queue_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_queue_attribute_args()
    args.queue_id = queue_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_queue_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_queue_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_queue_attribute failed: unknown result");

  def sai_thrift_create_buffer_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_buffer_profile(thrift_attr_list)
    return self.recv_sai_thrift_create_buffer_profile()

  def send_sai_thrift_create_buffer_profile(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_buffer_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_buffer_profile_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_buffer_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_buffer_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_buffer_profile failed: unknown result");

  def sai_thrift_remove_buffer_profile(self, buffer_profile_id):
    """
    Parameters:
     - buffer_profile_id
    """
    self.send_sai_thrift_remove_buffer_profile(buffer_profile_id)
    return self.recv_sai_thrift_remove_buffer_profile()

  def send_sai_thrift_remove_buffer_profile(self, buffer_profile_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_buffer_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_buffer_profile_args()
    args.buffer_profile_id = buffer_profile_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_buffer_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_buffer_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_buffer_profile failed: unknown result");

  def sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
    """
    Parameters:
     - buffer_profile_id
    """
    self.send_sai_thrift_get_buffer_profile_attribute(buffer_profile_id)
    return self.recv_sai_thrift_get_buffer_profile_attribute()

  def send_sai_thrift_get_buffer_profile_attribute(self, buffer_profile_id):
    self._oprot.writeMessageBegin('sai_thrift_get_buffer_profile_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_buffer_profile_attribute_args()
    args.buffer_profile_id = buffer_profile_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_buffer_profile_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_buffer_profile_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_buffer_profile_attribute failed: unknown result");

  def sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
    """
    Parameters:
     - buffer_profile_id
     - thrift_attr
    """
    self.send_sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr)
    return self.recv_sai_thrift_set_buffer_profile_attribute()

  def send_sai_thrift_set_buffer_profile_attribute(self, buffer_profile_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_buffer_profile_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_buffer_profile_attribute_args()
    args.buffer_profile_id = buffer_profile_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_buffer_profile_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_buffer_profile_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_buffer_profile_attribute failed: unknown result");

  def sai_thrift_create_pool_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_pool_profile(thrift_attr_list)
    return self.recv_sai_thrift_create_pool_profile()

  def send_sai_thrift_create_pool_profile(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_pool_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_pool_profile_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_pool_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_pool_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_pool_profile failed: unknown result");

  def sai_thrift_create_priority_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_priority_group(thrift_attr_list)
    return self.recv_sai_thrift_create_priority_group()

  def send_sai_thrift_create_priority_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_priority_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_priority_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_priority_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_priority_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_priority_group failed: unknown result");

  def sai_thrift_remove_priority_group(self, priority_group_id):
    """
    Parameters:
     - priority_group_id
    """
    self.send_sai_thrift_remove_priority_group(priority_group_id)
    return self.recv_sai_thrift_remove_priority_group()

  def send_sai_thrift_remove_priority_group(self, priority_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_priority_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_priority_group_args()
    args.priority_group_id = priority_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_priority_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_priority_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_priority_group failed: unknown result");

  def sai_thrift_get_priority_group_attribute(self, priority_group_id):
    """
    Parameters:
     - priority_group_id
    """
    self.send_sai_thrift_get_priority_group_attribute(priority_group_id)
    return self.recv_sai_thrift_get_priority_group_attribute()

  def send_sai_thrift_get_priority_group_attribute(self, priority_group_id):
    self._oprot.writeMessageBegin('sai_thrift_get_priority_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_priority_group_attribute_args()
    args.priority_group_id = priority_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_priority_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_priority_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_priority_group_attribute failed: unknown result");

  def sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
    """
    Parameters:
     - pg_id
     - thrift_attr
    """
    self.send_sai_thrift_set_priority_group_attribute(pg_id, thrift_attr)
    return self.recv_sai_thrift_set_priority_group_attribute()

  def send_sai_thrift_set_priority_group_attribute(self, pg_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_priority_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_priority_group_attribute_args()
    args.pg_id = pg_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_priority_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_priority_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_priority_group_attribute failed: unknown result");

  def sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
    """
    Parameters:
     - pg_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_pg_stats(pg_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_pg_stats()

  def send_sai_thrift_get_pg_stats(self, pg_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_pg_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_pg_stats_args()
    args.pg_id = pg_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_pg_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_pg_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_pg_stats failed: unknown result");

  def sai_thrift_create_wred_profile(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_wred_profile(thrift_attr_list)
    return self.recv_sai_thrift_create_wred_profile()

  def send_sai_thrift_create_wred_profile(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_wred_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_wred_profile_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_wred_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_wred_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_wred_profile failed: unknown result");

  def sai_thrift_remove_wred_profile(self, wred_id):
    """
    Parameters:
     - wred_id
    """
    self.send_sai_thrift_remove_wred_profile(wred_id)
    return self.recv_sai_thrift_remove_wred_profile()

  def send_sai_thrift_remove_wred_profile(self, wred_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_wred_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_wred_profile_args()
    args.wred_id = wred_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_wred_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_wred_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_wred_profile failed: unknown result");

  def sai_thrift_get_wred_attribute_profile(self, wred_id):
    """
    Parameters:
     - wred_id
    """
    self.send_sai_thrift_get_wred_attribute_profile(wred_id)
    return self.recv_sai_thrift_get_wred_attribute_profile()

  def send_sai_thrift_get_wred_attribute_profile(self, wred_id):
    self._oprot.writeMessageBegin('sai_thrift_get_wred_attribute_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_wred_attribute_profile_args()
    args.wred_id = wred_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_wred_attribute_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_wred_attribute_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_wred_attribute_profile failed: unknown result");

  def sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
    """
    Parameters:
     - wred_id
     - thrift_attr
    """
    self.send_sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr)
    return self.recv_sai_thrift_set_wred_attribute_profile()

  def send_sai_thrift_set_wred_attribute_profile(self, wred_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_wred_attribute_profile', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_wred_attribute_profile_args()
    args.wred_id = wred_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_wred_attribute_profile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_wred_attribute_profile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_wred_attribute_profile failed: unknown result");

  def sai_thrift_create_qos_map(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_qos_map(thrift_attr_list)
    return self.recv_sai_thrift_create_qos_map()

  def send_sai_thrift_create_qos_map(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_qos_map', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_qos_map_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_qos_map(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_qos_map_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_qos_map failed: unknown result");

  def sai_thrift_remove_qos_map(self, qos_map_id):
    """
    Parameters:
     - qos_map_id
    """
    self.send_sai_thrift_remove_qos_map(qos_map_id)
    return self.recv_sai_thrift_remove_qos_map()

  def send_sai_thrift_remove_qos_map(self, qos_map_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_qos_map', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_qos_map_args()
    args.qos_map_id = qos_map_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_qos_map(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_qos_map_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_qos_map failed: unknown result");

  def sai_thrift_get_qos_map_attribute(self, qos_map_id):
    """
    Parameters:
     - qos_map_id
    """
    self.send_sai_thrift_get_qos_map_attribute(qos_map_id)
    return self.recv_sai_thrift_get_qos_map_attribute()

  def send_sai_thrift_get_qos_map_attribute(self, qos_map_id):
    self._oprot.writeMessageBegin('sai_thrift_get_qos_map_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_qos_map_attribute_args()
    args.qos_map_id = qos_map_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_qos_map_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_qos_map_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_qos_map_attribute failed: unknown result");

  def sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
    """
    Parameters:
     - qos_map_id
     - thrift_attr
    """
    self.send_sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr)
    return self.recv_sai_thrift_set_qos_map_attribute()

  def send_sai_thrift_set_qos_map_attribute(self, qos_map_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_qos_map_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_qos_map_attribute_args()
    args.qos_map_id = qos_map_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_qos_map_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_qos_map_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_qos_map_attribute failed: unknown result");

  def sai_thrift_create_l2mc_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_l2mc_group(thrift_attr_list)
    return self.recv_sai_thrift_create_l2mc_group()

  def send_sai_thrift_create_l2mc_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_l2mc_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_l2mc_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_l2mc_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group failed: unknown result");

  def sai_thrift_remove_l2mc_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_remove_l2mc_group(grp_id)
    return self.recv_sai_thrift_remove_l2mc_group()

  def send_sai_thrift_remove_l2mc_group(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_l2mc_group_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_l2mc_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_l2mc_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_group failed: unknown result");

  def sai_thrift_get_l2mc_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_get_l2mc_group_attribute(grp_id)
    return self.recv_sai_thrift_get_l2mc_group_attribute()

  def send_sai_thrift_get_l2mc_group_attribute(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_l2mc_group_attribute_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_l2mc_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_l2mc_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_attribute failed: unknown result");

  def sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_l2mc_group_member(thrift_attr_list)
    return self.recv_sai_thrift_create_l2mc_group_member()

  def send_sai_thrift_create_l2mc_group_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_l2mc_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_l2mc_group_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_l2mc_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_l2mc_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_group_member failed: unknown result");

  def sai_thrift_remove_l2mc_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_remove_l2mc_group_member(member_id)
    return self.recv_sai_thrift_remove_l2mc_group_member()

  def send_sai_thrift_remove_l2mc_group_member(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_l2mc_group_member_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_l2mc_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_l2mc_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_group_member failed: unknown result");

  def sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    self.send_sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr)
    return self.recv_sai_thrift_set_l2mc_group_member_attribute()

  def send_sai_thrift_set_l2mc_group_member_attribute(self, member_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_l2mc_group_member_attribute_args()
    args.member_id = member_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_l2mc_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_l2mc_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_l2mc_group_member_attribute failed: unknown result");

  def sai_thrift_get_l2mc_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_get_l2mc_group_member_attribute(member_id)
    return self.recv_sai_thrift_get_l2mc_group_member_attribute()

  def send_sai_thrift_get_l2mc_group_member_attribute(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_l2mc_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_l2mc_group_member_attribute_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_l2mc_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_l2mc_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_group_member_attribute failed: unknown result");

  def sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_l2mc_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_l2mc_entry()

  def send_sai_thrift_create_l2mc_entry(self, thrift_l2mc_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_l2mc_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_l2mc_entry_args()
    args.thrift_l2mc_entry = thrift_l2mc_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_l2mc_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_l2mc_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_l2mc_entry failed: unknown result");

  def sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
    """
    Parameters:
     - thrift_l2mc_entry
    """
    self.send_sai_thrift_remove_l2mc_entry(thrift_l2mc_entry)
    return self.recv_sai_thrift_remove_l2mc_entry()

  def send_sai_thrift_remove_l2mc_entry(self, thrift_l2mc_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_l2mc_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_l2mc_entry_args()
    args.thrift_l2mc_entry = thrift_l2mc_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_l2mc_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_l2mc_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_l2mc_entry failed: unknown result");

  def sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
    """
    Parameters:
     - thrift_l2mc_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr)
    return self.recv_sai_thrift_set_l2mc_entry_attribute()

  def send_sai_thrift_set_l2mc_entry_attribute(self, thrift_l2mc_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_l2mc_entry_attribute_args()
    args.thrift_l2mc_entry = thrift_l2mc_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_l2mc_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_l2mc_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_l2mc_entry_attribute failed: unknown result");

  def sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
    """
    Parameters:
     - thrift_l2mc_entry
    """
    self.send_sai_thrift_get_l2mc_entry_attribute(thrift_l2mc_entry)
    return self.recv_sai_thrift_get_l2mc_entry_attribute()

  def send_sai_thrift_get_l2mc_entry_attribute(self, thrift_l2mc_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_l2mc_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_l2mc_entry_attribute_args()
    args.thrift_l2mc_entry = thrift_l2mc_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_l2mc_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_l2mc_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_l2mc_entry_attribute failed: unknown result");

  def sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_mcast_fdb_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_mcast_fdb_entry()

  def send_sai_thrift_create_mcast_fdb_entry(self, thrift_mcast_fdb_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_mcast_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_mcast_fdb_entry_args()
    args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_mcast_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_mcast_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mcast_fdb_entry failed: unknown result");

  def sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
    """
    Parameters:
     - thrift_mcast_fdb_entry
    """
    self.send_sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry)
    return self.recv_sai_thrift_remove_mcast_fdb_entry()

  def send_sai_thrift_remove_mcast_fdb_entry(self, thrift_mcast_fdb_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_mcast_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_mcast_fdb_entry_args()
    args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_mcast_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_mcast_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_mcast_fdb_entry failed: unknown result");

  def sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
    """
    Parameters:
     - thrift_mcast_fdb_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr)
    return self.recv_sai_thrift_set_mcast_fdb_entry_attribute()

  def send_sai_thrift_set_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_mcast_fdb_entry_attribute_args()
    args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_mcast_fdb_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_mcast_fdb_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_mcast_fdb_entry_attribute failed: unknown result");

  def sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
    """
    Parameters:
     - thrift_mcast_fdb_entry
    """
    self.send_sai_thrift_get_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry)
    return self.recv_sai_thrift_get_mcast_fdb_entry_attribute()

  def send_sai_thrift_get_mcast_fdb_entry_attribute(self, thrift_mcast_fdb_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_mcast_fdb_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_mcast_fdb_entry_attribute_args()
    args.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_mcast_fdb_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_mcast_fdb_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_mcast_fdb_entry_attribute failed: unknown result");

  def sai_thrift_create_ipmc_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_ipmc_group(thrift_attr_list)
    return self.recv_sai_thrift_create_ipmc_group()

  def send_sai_thrift_create_ipmc_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_ipmc_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_ipmc_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_ipmc_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group failed: unknown result");

  def sai_thrift_remove_ipmc_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_remove_ipmc_group(grp_id)
    return self.recv_sai_thrift_remove_ipmc_group()

  def send_sai_thrift_remove_ipmc_group(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_ipmc_group_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_ipmc_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_ipmc_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_group failed: unknown result");

  def sai_thrift_get_ipmc_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_get_ipmc_group_attribute(grp_id)
    return self.recv_sai_thrift_get_ipmc_group_attribute()

  def send_sai_thrift_get_ipmc_group_attribute(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_ipmc_group_attribute_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_ipmc_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_ipmc_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_attribute failed: unknown result");

  def sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_ipmc_group_member(thrift_attr_list)
    return self.recv_sai_thrift_create_ipmc_group_member()

  def send_sai_thrift_create_ipmc_group_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_ipmc_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_ipmc_group_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_ipmc_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_ipmc_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_group_member failed: unknown result");

  def sai_thrift_remove_ipmc_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_remove_ipmc_group_member(member_id)
    return self.recv_sai_thrift_remove_ipmc_group_member()

  def send_sai_thrift_remove_ipmc_group_member(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_ipmc_group_member_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_ipmc_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_ipmc_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_group_member failed: unknown result");

  def sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    self.send_sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr)
    return self.recv_sai_thrift_set_ipmc_group_member_attribute()

  def send_sai_thrift_set_ipmc_group_member_attribute(self, member_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_ipmc_group_member_attribute_args()
    args.member_id = member_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_ipmc_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_ipmc_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_ipmc_group_member_attribute failed: unknown result");

  def sai_thrift_get_ipmc_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_get_ipmc_group_member_attribute(member_id)
    return self.recv_sai_thrift_get_ipmc_group_member_attribute()

  def send_sai_thrift_get_ipmc_group_member_attribute(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_ipmc_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_ipmc_group_member_attribute_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_ipmc_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_ipmc_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_group_member_attribute failed: unknown result");

  def sai_thrift_create_rpf_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_rpf_group(thrift_attr_list)
    return self.recv_sai_thrift_create_rpf_group()

  def send_sai_thrift_create_rpf_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_rpf_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_rpf_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_rpf_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_rpf_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group failed: unknown result");

  def sai_thrift_remove_rpf_group(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_remove_rpf_group(grp_id)
    return self.recv_sai_thrift_remove_rpf_group()

  def send_sai_thrift_remove_rpf_group(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_rpf_group_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_rpf_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_rpf_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_rpf_group failed: unknown result");

  def sai_thrift_get_rpf_group_attribute(self, grp_id):
    """
    Parameters:
     - grp_id
    """
    self.send_sai_thrift_get_rpf_group_attribute(grp_id)
    return self.recv_sai_thrift_get_rpf_group_attribute()

  def send_sai_thrift_get_rpf_group_attribute(self, grp_id):
    self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_rpf_group_attribute_args()
    args.grp_id = grp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_rpf_group_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_rpf_group_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_attribute failed: unknown result");

  def sai_thrift_create_rpf_group_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_rpf_group_member(thrift_attr_list)
    return self.recv_sai_thrift_create_rpf_group_member()

  def send_sai_thrift_create_rpf_group_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_rpf_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_rpf_group_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_rpf_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_rpf_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_rpf_group_member failed: unknown result");

  def sai_thrift_remove_rpf_group_member(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_remove_rpf_group_member(member_id)
    return self.recv_sai_thrift_remove_rpf_group_member()

  def send_sai_thrift_remove_rpf_group_member(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_rpf_group_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_rpf_group_member_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_rpf_group_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_rpf_group_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_rpf_group_member failed: unknown result");

  def sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
    """
    Parameters:
     - member_id
     - thrift_attr
    """
    self.send_sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr)
    return self.recv_sai_thrift_set_rpf_group_member_attribute()

  def send_sai_thrift_set_rpf_group_member_attribute(self, member_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_rpf_group_member_attribute_args()
    args.member_id = member_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_rpf_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_rpf_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_rpf_group_member_attribute failed: unknown result");

  def sai_thrift_get_rpf_group_member_attribute(self, member_id):
    """
    Parameters:
     - member_id
    """
    self.send_sai_thrift_get_rpf_group_member_attribute(member_id)
    return self.recv_sai_thrift_get_rpf_group_member_attribute()

  def send_sai_thrift_get_rpf_group_member_attribute(self, member_id):
    self._oprot.writeMessageBegin('sai_thrift_get_rpf_group_member_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_rpf_group_member_attribute_args()
    args.member_id = member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_rpf_group_member_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_rpf_group_member_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_rpf_group_member_attribute failed: unknown result");

  def sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_ipmc_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_ipmc_entry()

  def send_sai_thrift_create_ipmc_entry(self, thrift_ipmc_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_ipmc_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_ipmc_entry_args()
    args.thrift_ipmc_entry = thrift_ipmc_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_ipmc_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_ipmc_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_ipmc_entry failed: unknown result");

  def sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
    """
    Parameters:
     - thrift_ipmc_entry
    """
    self.send_sai_thrift_remove_ipmc_entry(thrift_ipmc_entry)
    return self.recv_sai_thrift_remove_ipmc_entry()

  def send_sai_thrift_remove_ipmc_entry(self, thrift_ipmc_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_ipmc_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_ipmc_entry_args()
    args.thrift_ipmc_entry = thrift_ipmc_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_ipmc_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_ipmc_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ipmc_entry failed: unknown result");

  def sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
    """
    Parameters:
     - thrift_ipmc_entry
     - thrift_attr
    """
    self.send_sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr)
    return self.recv_sai_thrift_set_ipmc_entry_attribute()

  def send_sai_thrift_set_ipmc_entry_attribute(self, thrift_ipmc_entry, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_ipmc_entry_attribute_args()
    args.thrift_ipmc_entry = thrift_ipmc_entry
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_ipmc_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_ipmc_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_ipmc_entry_attribute failed: unknown result");

  def sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
    """
    Parameters:
     - thrift_ipmc_entry
    """
    self.send_sai_thrift_get_ipmc_entry_attribute(thrift_ipmc_entry)
    return self.recv_sai_thrift_get_ipmc_entry_attribute()

  def send_sai_thrift_get_ipmc_entry_attribute(self, thrift_ipmc_entry):
    self._oprot.writeMessageBegin('sai_thrift_get_ipmc_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_ipmc_entry_attribute_args()
    args.thrift_ipmc_entry = thrift_ipmc_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_ipmc_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_ipmc_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_ipmc_entry_attribute failed: unknown result");

  def sai_thrift_create_samplepacket(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_samplepacket(thrift_attr_list)
    return self.recv_sai_thrift_create_samplepacket()

  def send_sai_thrift_create_samplepacket(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_samplepacket', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_samplepacket_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_samplepacket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_samplepacket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_samplepacket failed: unknown result");

  def sai_thrift_remove_samplepacket(self, samplepacket_id):
    """
    Parameters:
     - samplepacket_id
    """
    self.send_sai_thrift_remove_samplepacket(samplepacket_id)
    return self.recv_sai_thrift_remove_samplepacket()

  def send_sai_thrift_remove_samplepacket(self, samplepacket_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_samplepacket', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_samplepacket_args()
    args.samplepacket_id = samplepacket_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_samplepacket(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_samplepacket_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_samplepacket failed: unknown result");

  def sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
    """
    Parameters:
     - samplepacket_id
    """
    self.send_sai_thrift_get_samplepacket_attribute(samplepacket_id)
    return self.recv_sai_thrift_get_samplepacket_attribute()

  def send_sai_thrift_get_samplepacket_attribute(self, samplepacket_id):
    self._oprot.writeMessageBegin('sai_thrift_get_samplepacket_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_samplepacket_attribute_args()
    args.samplepacket_id = samplepacket_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_samplepacket_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_samplepacket_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_samplepacket_attribute failed: unknown result");

  def sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
    """
    Parameters:
     - samplepacket_id
     - thrift_attr
    """
    self.send_sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr)
    return self.recv_sai_thrift_set_samplepacket_attribute()

  def send_sai_thrift_set_samplepacket_attribute(self, samplepacket_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_samplepacket_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_samplepacket_attribute_args()
    args.samplepacket_id = samplepacket_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_samplepacket_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_samplepacket_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_samplepacket_attribute failed: unknown result");

  def sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_tunnel_map_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_tunnel_map_entry()

  def send_sai_thrift_create_tunnel_map_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_tunnel_map_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_tunnel_map_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_tunnel_map_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map_entry failed: unknown result");

  def sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
    """
    Parameters:
     - tunnel_map_entry_id
    """
    self.send_sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id)
    return self.recv_sai_thrift_remove_tunnel_map_entry()

  def send_sai_thrift_remove_tunnel_map_entry(self, tunnel_map_entry_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_tunnel_map_entry_args()
    args.tunnel_map_entry_id = tunnel_map_entry_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_tunnel_map_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_tunnel_map_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_map_entry failed: unknown result");

  def sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
    """
    Parameters:
     - tunnel_map_entry_id
    """
    self.send_sai_thrift_get_tunnel_map_entry_attribute(tunnel_map_entry_id)
    return self.recv_sai_thrift_get_tunnel_map_entry_attribute()

  def send_sai_thrift_get_tunnel_map_entry_attribute(self, tunnel_map_entry_id):
    self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_tunnel_map_entry_attribute_args()
    args.tunnel_map_entry_id = tunnel_map_entry_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_tunnel_map_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_tunnel_map_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_entry_attribute failed: unknown result");

  def sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
    """
    Parameters:
     - tunnel_map_entry_id
     - thrift_attr
    """
    self.send_sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr)
    return self.recv_sai_thrift_set_tunnel_map_entry_attribute()

  def send_sai_thrift_set_tunnel_map_entry_attribute(self, tunnel_map_entry_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_tunnel_map_entry_attribute_args()
    args.tunnel_map_entry_id = tunnel_map_entry_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_tunnel_map_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_tunnel_map_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_map_entry_attribute failed: unknown result");

  def sai_thrift_create_tunnel_map(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_tunnel_map(thrift_attr_list)
    return self.recv_sai_thrift_create_tunnel_map()

  def send_sai_thrift_create_tunnel_map(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_tunnel_map', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_tunnel_map_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_tunnel_map(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_tunnel_map_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_map failed: unknown result");

  def sai_thrift_remove_tunnel_map(self, tunnel_map_id):
    """
    Parameters:
     - tunnel_map_id
    """
    self.send_sai_thrift_remove_tunnel_map(tunnel_map_id)
    return self.recv_sai_thrift_remove_tunnel_map()

  def send_sai_thrift_remove_tunnel_map(self, tunnel_map_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_map', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_tunnel_map_args()
    args.tunnel_map_id = tunnel_map_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_tunnel_map(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_tunnel_map_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_map failed: unknown result");

  def sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
    """
    Parameters:
     - tunnel_map_id
    """
    self.send_sai_thrift_get_tunnel_map_attribute(tunnel_map_id)
    return self.recv_sai_thrift_get_tunnel_map_attribute()

  def send_sai_thrift_get_tunnel_map_attribute(self, tunnel_map_id):
    self._oprot.writeMessageBegin('sai_thrift_get_tunnel_map_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_tunnel_map_attribute_args()
    args.tunnel_map_id = tunnel_map_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_tunnel_map_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_tunnel_map_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_map_attribute failed: unknown result");

  def sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
    """
    Parameters:
     - tunnel_map_id
     - thrift_attr
    """
    self.send_sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr)
    return self.recv_sai_thrift_set_tunnel_map_attribute()

  def send_sai_thrift_set_tunnel_map_attribute(self, tunnel_map_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_tunnel_map_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_tunnel_map_attribute_args()
    args.tunnel_map_id = tunnel_map_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_tunnel_map_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_tunnel_map_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_map_attribute failed: unknown result");

  def sai_thrift_create_tunnel(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_tunnel(thrift_attr_list)
    return self.recv_sai_thrift_create_tunnel()

  def send_sai_thrift_create_tunnel(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_tunnel', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_tunnel_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_tunnel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_tunnel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel failed: unknown result");

  def sai_thrift_remove_tunnel(self, tunnel_id):
    """
    Parameters:
     - tunnel_id
    """
    self.send_sai_thrift_remove_tunnel(tunnel_id)
    return self.recv_sai_thrift_remove_tunnel()

  def send_sai_thrift_remove_tunnel(self, tunnel_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_tunnel', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_tunnel_args()
    args.tunnel_id = tunnel_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_tunnel(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_tunnel_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel failed: unknown result");

  def sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
    """
    Parameters:
     - tunnel_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_tunnel_attribute(tunnel_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_tunnel_attribute()

  def send_sai_thrift_get_tunnel_attribute(self, tunnel_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_tunnel_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_tunnel_attribute_args()
    args.tunnel_id = tunnel_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_tunnel_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_tunnel_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_attribute failed: unknown result");

  def sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
    """
    Parameters:
     - tunnel_id
     - thrift_attr
    """
    self.send_sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr)
    return self.recv_sai_thrift_set_tunnel_attribute()

  def send_sai_thrift_set_tunnel_attribute(self, tunnel_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_tunnel_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_tunnel_attribute_args()
    args.tunnel_id = tunnel_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_tunnel_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_tunnel_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_attribute failed: unknown result");

  def sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    """
    Parameters:
     - tunnel_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_tunnel_stats(tunnel_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_tunnel_stats()

  def send_sai_thrift_get_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_tunnel_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_tunnel_stats_args()
    args.tunnel_id = tunnel_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_tunnel_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_tunnel_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_stats failed: unknown result");

  def sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    """
    Parameters:
     - tunnel_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_clear_tunnel_stats()

  def send_sai_thrift_clear_tunnel_stats(self, tunnel_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_clear_tunnel_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_clear_tunnel_stats_args()
    args.tunnel_id = tunnel_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_clear_tunnel_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_clear_tunnel_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_tunnel_stats failed: unknown result");

  def sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_tunnel_term_table_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_tunnel_term_table_entry()

  def send_sai_thrift_create_tunnel_term_table_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_tunnel_term_table_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_tunnel_term_table_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_tunnel_term_table_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_tunnel_term_table_entry failed: unknown result");

  def sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
    """
    Parameters:
     - tunnel_term_table_entry_id
    """
    self.send_sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id)
    return self.recv_sai_thrift_remove_tunnel_term_table_entry()

  def send_sai_thrift_remove_tunnel_term_table_entry(self, tunnel_term_table_entry_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_tunnel_term_table_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_tunnel_term_table_entry_args()
    args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_tunnel_term_table_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_tunnel_term_table_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_tunnel_term_table_entry failed: unknown result");

  def sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
    """
    Parameters:
     - tunnel_term_table_entry_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_tunnel_term_table_entry_attribute()

  def send_sai_thrift_get_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
    args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_tunnel_term_table_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_tunnel_term_table_entry_attribute failed: unknown result");

  def sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
    """
    Parameters:
     - tunnel_term_table_entry_id
     - thrift_attr
    """
    self.send_sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr)
    return self.recv_sai_thrift_set_tunnel_term_table_entry_attribute()

  def send_sai_thrift_set_tunnel_term_table_entry_attribute(self, tunnel_term_table_entry_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_tunnel_term_table_entry_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
    args.tunnel_term_table_entry_id = tunnel_term_table_entry_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_tunnel_term_table_entry_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_tunnel_term_table_entry_attribute failed: unknown result");

  def sai_thrift_get_cpu_packet_attribute(self, switch_id):
    """
    Parameters:
     - switch_id
    """
    self.send_sai_thrift_get_cpu_packet_attribute(switch_id)
    return self.recv_sai_thrift_get_cpu_packet_attribute()

  def send_sai_thrift_get_cpu_packet_attribute(self, switch_id):
    self._oprot.writeMessageBegin('sai_thrift_get_cpu_packet_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_cpu_packet_attribute_args()
    args.switch_id = switch_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_cpu_packet_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_cpu_packet_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_packet_attribute failed: unknown result");

  def sai_thrift_get_cpu_packet_count(self):
    self.send_sai_thrift_get_cpu_packet_count()
    return self.recv_sai_thrift_get_cpu_packet_count()

  def send_sai_thrift_get_cpu_packet_count(self):
    self._oprot.writeMessageBegin('sai_thrift_get_cpu_packet_count', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_cpu_packet_count_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_cpu_packet_count(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_cpu_packet_count_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_cpu_packet_count failed: unknown result");

  def sai_thrift_clear_cpu_packet_info(self):
    self.send_sai_thrift_clear_cpu_packet_info()
    return self.recv_sai_thrift_clear_cpu_packet_info()

  def send_sai_thrift_clear_cpu_packet_info(self):
    self._oprot.writeMessageBegin('sai_thrift_clear_cpu_packet_info', TMessageType.CALL, self._seqid)
    args = sai_thrift_clear_cpu_packet_info_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_clear_cpu_packet_info(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_clear_cpu_packet_info_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_clear_cpu_packet_info failed: unknown result");

  def sai_thrift_log_set(self, sai_api_id, log_level):
    """
    Parameters:
     - sai_api_id
     - log_level
    """
    self.send_sai_thrift_log_set(sai_api_id, log_level)
    return self.recv_sai_thrift_log_set()

  def send_sai_thrift_log_set(self, sai_api_id, log_level):
    self._oprot.writeMessageBegin('sai_thrift_log_set', TMessageType.CALL, self._seqid)
    args = sai_thrift_log_set_args()
    args.sai_api_id = sai_api_id
    args.log_level = log_level
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_log_set(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_log_set_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_log_set failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sai_thrift_set_port_attribute"] = Processor.process_sai_thrift_set_port_attribute
    self._processMap["sai_thrift_get_port_attribute"] = Processor.process_sai_thrift_get_port_attribute
    self._processMap["sai_thrift_get_port_stats"] = Processor.process_sai_thrift_get_port_stats
    self._processMap["sai_thrift_clear_port_all_stats"] = Processor.process_sai_thrift_clear_port_all_stats
    self._processMap["sai_thrift_create_fdb_entry"] = Processor.process_sai_thrift_create_fdb_entry
    self._processMap["sai_thrift_delete_fdb_entry"] = Processor.process_sai_thrift_delete_fdb_entry
    self._processMap["sai_thrift_flush_fdb_entries"] = Processor.process_sai_thrift_flush_fdb_entries
    self._processMap["sai_thrift_set_fdb_entry_attribute"] = Processor.process_sai_thrift_set_fdb_entry_attribute
    self._processMap["sai_thrift_get_fdb_entry_attribute"] = Processor.process_sai_thrift_get_fdb_entry_attribute
    self._processMap["sai_thrift_create_vlan"] = Processor.process_sai_thrift_create_vlan
    self._processMap["sai_thrift_remove_vlan"] = Processor.process_sai_thrift_remove_vlan
    self._processMap["sai_thrift_get_vlan_stats"] = Processor.process_sai_thrift_get_vlan_stats
    self._processMap["sai_thrift_create_vlan_member"] = Processor.process_sai_thrift_create_vlan_member
    self._processMap["sai_thrift_get_vlan_member_attribute"] = Processor.process_sai_thrift_get_vlan_member_attribute
    self._processMap["sai_thrift_remove_vlan_member"] = Processor.process_sai_thrift_remove_vlan_member
    self._processMap["sai_thrift_set_vlan_attribute"] = Processor.process_sai_thrift_set_vlan_attribute
    self._processMap["sai_thrift_get_vlan_attribute"] = Processor.process_sai_thrift_get_vlan_attribute
    self._processMap["sai_thrift_get_vlan_id"] = Processor.process_sai_thrift_get_vlan_id
    self._processMap["sai_thrift_create_virtual_router"] = Processor.process_sai_thrift_create_virtual_router
    self._processMap["sai_thrift_remove_virtual_router"] = Processor.process_sai_thrift_remove_virtual_router
    self._processMap["sai_thrift_set_virtual_router_attribute"] = Processor.process_sai_thrift_set_virtual_router_attribute
    self._processMap["sai_thrift_get_virtual_router_attribute"] = Processor.process_sai_thrift_get_virtual_router_attribute
    self._processMap["sai_thrift_create_route"] = Processor.process_sai_thrift_create_route
    self._processMap["sai_thrift_remove_route"] = Processor.process_sai_thrift_remove_route
    self._processMap["sai_thrift_set_route_attribute"] = Processor.process_sai_thrift_set_route_attribute
    self._processMap["sai_thrift_get_route_attribute"] = Processor.process_sai_thrift_get_route_attribute
    self._processMap["sai_thrift_create_router_interface"] = Processor.process_sai_thrift_create_router_interface
    self._processMap["sai_thrift_remove_router_interface"] = Processor.process_sai_thrift_remove_router_interface
    self._processMap["sai_thrift_set_router_interface_attribute"] = Processor.process_sai_thrift_set_router_interface_attribute
    self._processMap["sai_thrift_get_router_interface_attribute"] = Processor.process_sai_thrift_get_router_interface_attribute
    self._processMap["sai_thrift_create_next_hop"] = Processor.process_sai_thrift_create_next_hop
    self._processMap["sai_thrift_remove_next_hop"] = Processor.process_sai_thrift_remove_next_hop
    self._processMap["sai_thrift_get_next_hop_attribute"] = Processor.process_sai_thrift_get_next_hop_attribute
    self._processMap["sai_thrift_create_next_hop_group"] = Processor.process_sai_thrift_create_next_hop_group
    self._processMap["sai_thrift_remove_next_hop_group"] = Processor.process_sai_thrift_remove_next_hop_group
    self._processMap["sai_thrift_set_next_hop_group_attribute"] = Processor.process_sai_thrift_set_next_hop_group_attribute
    self._processMap["sai_thrift_get_next_hop_group_attribute"] = Processor.process_sai_thrift_get_next_hop_group_attribute
    self._processMap["sai_thrift_create_next_hop_group_member"] = Processor.process_sai_thrift_create_next_hop_group_member
    self._processMap["sai_thrift_remove_next_hop_group_member"] = Processor.process_sai_thrift_remove_next_hop_group_member
    self._processMap["sai_thrift_get_next_hop_group_member_attribute"] = Processor.process_sai_thrift_get_next_hop_group_member_attribute
    self._processMap["sai_thrift_create_lag"] = Processor.process_sai_thrift_create_lag
    self._processMap["sai_thrift_remove_lag"] = Processor.process_sai_thrift_remove_lag
    self._processMap["sai_thrift_set_lag_attribute"] = Processor.process_sai_thrift_set_lag_attribute
    self._processMap["sai_thrift_get_lag_attribute"] = Processor.process_sai_thrift_get_lag_attribute
    self._processMap["sai_thrift_create_lag_member"] = Processor.process_sai_thrift_create_lag_member
    self._processMap["sai_thrift_remove_lag_member"] = Processor.process_sai_thrift_remove_lag_member
    self._processMap["sai_thrift_set_lag_member_attribute"] = Processor.process_sai_thrift_set_lag_member_attribute
    self._processMap["sai_thrift_get_lag_member_attribute"] = Processor.process_sai_thrift_get_lag_member_attribute
    self._processMap["sai_thrift_create_stp_entry"] = Processor.process_sai_thrift_create_stp_entry
    self._processMap["sai_thrift_remove_stp_entry"] = Processor.process_sai_thrift_remove_stp_entry
    self._processMap["sai_thrift_set_stp_port_state"] = Processor.process_sai_thrift_set_stp_port_state
    self._processMap["sai_thrift_get_stp_port_state"] = Processor.process_sai_thrift_get_stp_port_state
    self._processMap["sai_thrift_create_neighbor_entry"] = Processor.process_sai_thrift_create_neighbor_entry
    self._processMap["sai_thrift_remove_neighbor_entry"] = Processor.process_sai_thrift_remove_neighbor_entry
    self._processMap["sai_thrift_remove_all_neighbor_entry"] = Processor.process_sai_thrift_remove_all_neighbor_entry
    self._processMap["sai_thrift_set_neighbor_entry_attribute"] = Processor.process_sai_thrift_set_neighbor_entry_attribute
    self._processMap["sai_thrift_get_neighbor_entry_attribute"] = Processor.process_sai_thrift_get_neighbor_entry_attribute
    self._processMap["sai_thrift_get_switch_attribute"] = Processor.process_sai_thrift_get_switch_attribute
    self._processMap["sai_thrift_get_port_list_by_front_port"] = Processor.process_sai_thrift_get_port_list_by_front_port
    self._processMap["sai_thrift_get_cpu_port_id"] = Processor.process_sai_thrift_get_cpu_port_id
    self._processMap["sai_thrift_get_default_trap_group"] = Processor.process_sai_thrift_get_default_trap_group
    self._processMap["sai_thrift_get_default_router_id"] = Processor.process_sai_thrift_get_default_router_id
    self._processMap["sai_thrift_get_default_1q_bridge_id"] = Processor.process_sai_thrift_get_default_1q_bridge_id
    self._processMap["sai_thrift_get_default_vlan_id"] = Processor.process_sai_thrift_get_default_vlan_id
    self._processMap["sai_thrift_get_port_id_by_front_port"] = Processor.process_sai_thrift_get_port_id_by_front_port
    self._processMap["sai_thrift_set_switch_attribute"] = Processor.process_sai_thrift_set_switch_attribute
    self._processMap["sai_thrift_create_switch"] = Processor.process_sai_thrift_create_switch
    self._processMap["sai_thrift_remove_switch"] = Processor.process_sai_thrift_remove_switch
    self._processMap["sai_thrift_create_bridge_port"] = Processor.process_sai_thrift_create_bridge_port
    self._processMap["sai_thrift_remove_bridge_port"] = Processor.process_sai_thrift_remove_bridge_port
    self._processMap["sai_thrift_get_bridge_port_list"] = Processor.process_sai_thrift_get_bridge_port_list
    self._processMap["sai_thrift_get_bridge_port_attribute"] = Processor.process_sai_thrift_get_bridge_port_attribute
    self._processMap["sai_thrift_set_bridge_port_attribute"] = Processor.process_sai_thrift_set_bridge_port_attribute
    self._processMap["sai_thrift_create_bridge"] = Processor.process_sai_thrift_create_bridge
    self._processMap["sai_thrift_remove_bridge"] = Processor.process_sai_thrift_remove_bridge
    self._processMap["sai_thrift_get_bridge_attribute"] = Processor.process_sai_thrift_get_bridge_attribute
    self._processMap["sai_thrift_set_bridge_attribute"] = Processor.process_sai_thrift_set_bridge_attribute
    self._processMap["sai_thrift_create_hostif"] = Processor.process_sai_thrift_create_hostif
    self._processMap["sai_thrift_remove_hostif"] = Processor.process_sai_thrift_remove_hostif
    self._processMap["sai_thrift_get_hostif_attribute"] = Processor.process_sai_thrift_get_hostif_attribute
    self._processMap["sai_thrift_set_hostif_attribute"] = Processor.process_sai_thrift_set_hostif_attribute
    self._processMap["sai_thrift_create_hostif_table_entry"] = Processor.process_sai_thrift_create_hostif_table_entry
    self._processMap["sai_thrift_remove_hostif_table_entry"] = Processor.process_sai_thrift_remove_hostif_table_entry
    self._processMap["sai_thrift_get_hostif_table_entry_attribute"] = Processor.process_sai_thrift_get_hostif_table_entry_attribute
    self._processMap["sai_thrift_set_hostif_table_entry_attribute"] = Processor.process_sai_thrift_set_hostif_table_entry_attribute
    self._processMap["sai_thrift_create_hostif_trap_group"] = Processor.process_sai_thrift_create_hostif_trap_group
    self._processMap["sai_thrift_remove_hostif_trap_group"] = Processor.process_sai_thrift_remove_hostif_trap_group
    self._processMap["sai_thrift_get_hostif_trap_group_attribute"] = Processor.process_sai_thrift_get_hostif_trap_group_attribute
    self._processMap["sai_thrift_set_hostif_trap_group_attribute"] = Processor.process_sai_thrift_set_hostif_trap_group_attribute
    self._processMap["sai_thrift_create_hostif_trap"] = Processor.process_sai_thrift_create_hostif_trap
    self._processMap["sai_thrift_remove_hostif_trap"] = Processor.process_sai_thrift_remove_hostif_trap
    self._processMap["sai_thrift_get_hostif_trap_attribute"] = Processor.process_sai_thrift_get_hostif_trap_attribute
    self._processMap["sai_thrift_set_hostif_trap_attribute"] = Processor.process_sai_thrift_set_hostif_trap_attribute
    self._processMap["sai_thrift_create_acl_table"] = Processor.process_sai_thrift_create_acl_table
    self._processMap["sai_thrift_remove_acl_table"] = Processor.process_sai_thrift_remove_acl_table
    self._processMap["sai_thrift_get_acl_table_attribute"] = Processor.process_sai_thrift_get_acl_table_attribute
    self._processMap["sai_thrift_create_acl_entry"] = Processor.process_sai_thrift_create_acl_entry
    self._processMap["sai_thrift_remove_acl_entry"] = Processor.process_sai_thrift_remove_acl_entry
    self._processMap["sai_thrift_set_acl_entry_attribute"] = Processor.process_sai_thrift_set_acl_entry_attribute
    self._processMap["sai_thrift_get_acl_entry_attribute"] = Processor.process_sai_thrift_get_acl_entry_attribute
    self._processMap["sai_thrift_create_acl_table_group"] = Processor.process_sai_thrift_create_acl_table_group
    self._processMap["sai_thrift_remove_acl_table_group"] = Processor.process_sai_thrift_remove_acl_table_group
    self._processMap["sai_thrift_get_acl_table_group_attribute"] = Processor.process_sai_thrift_get_acl_table_group_attribute
    self._processMap["sai_thrift_create_acl_table_group_member"] = Processor.process_sai_thrift_create_acl_table_group_member
    self._processMap["sai_thrift_remove_acl_table_group_member"] = Processor.process_sai_thrift_remove_acl_table_group_member
    self._processMap["sai_thrift_get_acl_table_group_member_attribute"] = Processor.process_sai_thrift_get_acl_table_group_member_attribute
    self._processMap["sai_thrift_create_acl_counter"] = Processor.process_sai_thrift_create_acl_counter
    self._processMap["sai_thrift_remove_acl_counter"] = Processor.process_sai_thrift_remove_acl_counter
    self._processMap["sai_thrift_get_acl_counter_attribute"] = Processor.process_sai_thrift_get_acl_counter_attribute
    self._processMap["sai_thrift_create_hash"] = Processor.process_sai_thrift_create_hash
    self._processMap["sai_thrift_remove_hash"] = Processor.process_sai_thrift_remove_hash
    self._processMap["sai_thrift_set_hash_attribute"] = Processor.process_sai_thrift_set_hash_attribute
    self._processMap["sai_thrift_get_hash_attribute"] = Processor.process_sai_thrift_get_hash_attribute
    self._processMap["sai_thrift_create_udf_group"] = Processor.process_sai_thrift_create_udf_group
    self._processMap["sai_thrift_remove_udf_group"] = Processor.process_sai_thrift_remove_udf_group
    self._processMap["sai_thrift_get_udf_group_attribute"] = Processor.process_sai_thrift_get_udf_group_attribute
    self._processMap["sai_thrift_create_udf_match"] = Processor.process_sai_thrift_create_udf_match
    self._processMap["sai_thrift_remove_udf_match"] = Processor.process_sai_thrift_remove_udf_match
    self._processMap["sai_thrift_get_udf_match_attribute"] = Processor.process_sai_thrift_get_udf_match_attribute
    self._processMap["sai_thrift_create_udf"] = Processor.process_sai_thrift_create_udf
    self._processMap["sai_thrift_remove_udf"] = Processor.process_sai_thrift_remove_udf
    self._processMap["sai_thrift_set_udf_attribute"] = Processor.process_sai_thrift_set_udf_attribute
    self._processMap["sai_thrift_get_udf_attribute"] = Processor.process_sai_thrift_get_udf_attribute
    self._processMap["sai_thrift_create_mirror_session"] = Processor.process_sai_thrift_create_mirror_session
    self._processMap["sai_thrift_remove_mirror_session"] = Processor.process_sai_thrift_remove_mirror_session
    self._processMap["sai_thrift_set_mirror_attribute"] = Processor.process_sai_thrift_set_mirror_attribute
    self._processMap["sai_thrift_get_mirror_attribute"] = Processor.process_sai_thrift_get_mirror_attribute
    self._processMap["sai_thrift_create_inseg_entry"] = Processor.process_sai_thrift_create_inseg_entry
    self._processMap["sai_thrift_remove_inseg_entry"] = Processor.process_sai_thrift_remove_inseg_entry
    self._processMap["sai_thrift_set_inseg_entry_attribute"] = Processor.process_sai_thrift_set_inseg_entry_attribute
    self._processMap["sai_thrift_get_inseg_entry_attribute"] = Processor.process_sai_thrift_get_inseg_entry_attribute
    self._processMap["sai_thrift_dump_log"] = Processor.process_sai_thrift_dump_log
    self._processMap["sai_thrift_create_policer"] = Processor.process_sai_thrift_create_policer
    self._processMap["sai_thrift_remove_policer"] = Processor.process_sai_thrift_remove_policer
    self._processMap["sai_thrift_get_policer_attribute"] = Processor.process_sai_thrift_get_policer_attribute
    self._processMap["sai_thrift_set_policer_attribute"] = Processor.process_sai_thrift_set_policer_attribute
    self._processMap["sai_thrift_get_policer_stats"] = Processor.process_sai_thrift_get_policer_stats
    self._processMap["sai_thrift_clear_policer_stats"] = Processor.process_sai_thrift_clear_policer_stats
    self._processMap["sai_thrift_create_scheduler_profile"] = Processor.process_sai_thrift_create_scheduler_profile
    self._processMap["sai_thrift_remove_scheduler_profile"] = Processor.process_sai_thrift_remove_scheduler_profile
    self._processMap["sai_thrift_get_scheduler_attribute"] = Processor.process_sai_thrift_get_scheduler_attribute
    self._processMap["sai_thrift_set_scheduler_attribute"] = Processor.process_sai_thrift_set_scheduler_attribute
    self._processMap["sai_thrift_create_scheduler_group"] = Processor.process_sai_thrift_create_scheduler_group
    self._processMap["sai_thrift_remove_scheduler_group"] = Processor.process_sai_thrift_remove_scheduler_group
    self._processMap["sai_thrift_get_scheduler_group_attribute"] = Processor.process_sai_thrift_get_scheduler_group_attribute
    self._processMap["sai_thrift_set_scheduler_group_attribute"] = Processor.process_sai_thrift_set_scheduler_group_attribute
    self._processMap["sai_thrift_get_queue_stats"] = Processor.process_sai_thrift_get_queue_stats
    self._processMap["sai_thrift_clear_queue_stats"] = Processor.process_sai_thrift_clear_queue_stats
    self._processMap["sai_thrift_create_queue"] = Processor.process_sai_thrift_create_queue
    self._processMap["sai_thrift_remove_queue"] = Processor.process_sai_thrift_remove_queue
    self._processMap["sai_thrift_get_queue_attribute"] = Processor.process_sai_thrift_get_queue_attribute
    self._processMap["sai_thrift_set_queue_attribute"] = Processor.process_sai_thrift_set_queue_attribute
    self._processMap["sai_thrift_create_buffer_profile"] = Processor.process_sai_thrift_create_buffer_profile
    self._processMap["sai_thrift_remove_buffer_profile"] = Processor.process_sai_thrift_remove_buffer_profile
    self._processMap["sai_thrift_get_buffer_profile_attribute"] = Processor.process_sai_thrift_get_buffer_profile_attribute
    self._processMap["sai_thrift_set_buffer_profile_attribute"] = Processor.process_sai_thrift_set_buffer_profile_attribute
    self._processMap["sai_thrift_create_pool_profile"] = Processor.process_sai_thrift_create_pool_profile
    self._processMap["sai_thrift_create_priority_group"] = Processor.process_sai_thrift_create_priority_group
    self._processMap["sai_thrift_remove_priority_group"] = Processor.process_sai_thrift_remove_priority_group
    self._processMap["sai_thrift_get_priority_group_attribute"] = Processor.process_sai_thrift_get_priority_group_attribute
    self._processMap["sai_thrift_set_priority_group_attribute"] = Processor.process_sai_thrift_set_priority_group_attribute
    self._processMap["sai_thrift_get_pg_stats"] = Processor.process_sai_thrift_get_pg_stats
    self._processMap["sai_thrift_create_wred_profile"] = Processor.process_sai_thrift_create_wred_profile
    self._processMap["sai_thrift_remove_wred_profile"] = Processor.process_sai_thrift_remove_wred_profile
    self._processMap["sai_thrift_get_wred_attribute_profile"] = Processor.process_sai_thrift_get_wred_attribute_profile
    self._processMap["sai_thrift_set_wred_attribute_profile"] = Processor.process_sai_thrift_set_wred_attribute_profile
    self._processMap["sai_thrift_create_qos_map"] = Processor.process_sai_thrift_create_qos_map
    self._processMap["sai_thrift_remove_qos_map"] = Processor.process_sai_thrift_remove_qos_map
    self._processMap["sai_thrift_get_qos_map_attribute"] = Processor.process_sai_thrift_get_qos_map_attribute
    self._processMap["sai_thrift_set_qos_map_attribute"] = Processor.process_sai_thrift_set_qos_map_attribute
    self._processMap["sai_thrift_create_l2mc_group"] = Processor.process_sai_thrift_create_l2mc_group
    self._processMap["sai_thrift_remove_l2mc_group"] = Processor.process_sai_thrift_remove_l2mc_group
    self._processMap["sai_thrift_get_l2mc_group_attribute"] = Processor.process_sai_thrift_get_l2mc_group_attribute
    self._processMap["sai_thrift_create_l2mc_group_member"] = Processor.process_sai_thrift_create_l2mc_group_member
    self._processMap["sai_thrift_remove_l2mc_group_member"] = Processor.process_sai_thrift_remove_l2mc_group_member
    self._processMap["sai_thrift_set_l2mc_group_member_attribute"] = Processor.process_sai_thrift_set_l2mc_group_member_attribute
    self._processMap["sai_thrift_get_l2mc_group_member_attribute"] = Processor.process_sai_thrift_get_l2mc_group_member_attribute
    self._processMap["sai_thrift_create_l2mc_entry"] = Processor.process_sai_thrift_create_l2mc_entry
    self._processMap["sai_thrift_remove_l2mc_entry"] = Processor.process_sai_thrift_remove_l2mc_entry
    self._processMap["sai_thrift_set_l2mc_entry_attribute"] = Processor.process_sai_thrift_set_l2mc_entry_attribute
    self._processMap["sai_thrift_get_l2mc_entry_attribute"] = Processor.process_sai_thrift_get_l2mc_entry_attribute
    self._processMap["sai_thrift_create_mcast_fdb_entry"] = Processor.process_sai_thrift_create_mcast_fdb_entry
    self._processMap["sai_thrift_remove_mcast_fdb_entry"] = Processor.process_sai_thrift_remove_mcast_fdb_entry
    self._processMap["sai_thrift_set_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_set_mcast_fdb_entry_attribute
    self._processMap["sai_thrift_get_mcast_fdb_entry_attribute"] = Processor.process_sai_thrift_get_mcast_fdb_entry_attribute
    self._processMap["sai_thrift_create_ipmc_group"] = Processor.process_sai_thrift_create_ipmc_group
    self._processMap["sai_thrift_remove_ipmc_group"] = Processor.process_sai_thrift_remove_ipmc_group
    self._processMap["sai_thrift_get_ipmc_group_attribute"] = Processor.process_sai_thrift_get_ipmc_group_attribute
    self._processMap["sai_thrift_create_ipmc_group_member"] = Processor.process_sai_thrift_create_ipmc_group_member
    self._processMap["sai_thrift_remove_ipmc_group_member"] = Processor.process_sai_thrift_remove_ipmc_group_member
    self._processMap["sai_thrift_set_ipmc_group_member_attribute"] = Processor.process_sai_thrift_set_ipmc_group_member_attribute
    self._processMap["sai_thrift_get_ipmc_group_member_attribute"] = Processor.process_sai_thrift_get_ipmc_group_member_attribute
    self._processMap["sai_thrift_create_rpf_group"] = Processor.process_sai_thrift_create_rpf_group
    self._processMap["sai_thrift_remove_rpf_group"] = Processor.process_sai_thrift_remove_rpf_group
    self._processMap["sai_thrift_get_rpf_group_attribute"] = Processor.process_sai_thrift_get_rpf_group_attribute
    self._processMap["sai_thrift_create_rpf_group_member"] = Processor.process_sai_thrift_create_rpf_group_member
    self._processMap["sai_thrift_remove_rpf_group_member"] = Processor.process_sai_thrift_remove_rpf_group_member
    self._processMap["sai_thrift_set_rpf_group_member_attribute"] = Processor.process_sai_thrift_set_rpf_group_member_attribute
    self._processMap["sai_thrift_get_rpf_group_member_attribute"] = Processor.process_sai_thrift_get_rpf_group_member_attribute
    self._processMap["sai_thrift_create_ipmc_entry"] = Processor.process_sai_thrift_create_ipmc_entry
    self._processMap["sai_thrift_remove_ipmc_entry"] = Processor.process_sai_thrift_remove_ipmc_entry
    self._processMap["sai_thrift_set_ipmc_entry_attribute"] = Processor.process_sai_thrift_set_ipmc_entry_attribute
    self._processMap["sai_thrift_get_ipmc_entry_attribute"] = Processor.process_sai_thrift_get_ipmc_entry_attribute
    self._processMap["sai_thrift_create_samplepacket"] = Processor.process_sai_thrift_create_samplepacket
    self._processMap["sai_thrift_remove_samplepacket"] = Processor.process_sai_thrift_remove_samplepacket
    self._processMap["sai_thrift_get_samplepacket_attribute"] = Processor.process_sai_thrift_get_samplepacket_attribute
    self._processMap["sai_thrift_set_samplepacket_attribute"] = Processor.process_sai_thrift_set_samplepacket_attribute
    self._processMap["sai_thrift_create_tunnel_map_entry"] = Processor.process_sai_thrift_create_tunnel_map_entry
    self._processMap["sai_thrift_remove_tunnel_map_entry"] = Processor.process_sai_thrift_remove_tunnel_map_entry
    self._processMap["sai_thrift_get_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_map_entry_attribute
    self._processMap["sai_thrift_set_tunnel_map_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_map_entry_attribute
    self._processMap["sai_thrift_create_tunnel_map"] = Processor.process_sai_thrift_create_tunnel_map
    self._processMap["sai_thrift_remove_tunnel_map"] = Processor.process_sai_thrift_remove_tunnel_map
    self._processMap["sai_thrift_get_tunnel_map_attribute"] = Processor.process_sai_thrift_get_tunnel_map_attribute
    self._processMap["sai_thrift_set_tunnel_map_attribute"] = Processor.process_sai_thrift_set_tunnel_map_attribute
    self._processMap["sai_thrift_create_tunnel"] = Processor.process_sai_thrift_create_tunnel
    self._processMap["sai_thrift_remove_tunnel"] = Processor.process_sai_thrift_remove_tunnel
    self._processMap["sai_thrift_get_tunnel_attribute"] = Processor.process_sai_thrift_get_tunnel_attribute
    self._processMap["sai_thrift_set_tunnel_attribute"] = Processor.process_sai_thrift_set_tunnel_attribute
    self._processMap["sai_thrift_get_tunnel_stats"] = Processor.process_sai_thrift_get_tunnel_stats
    self._processMap["sai_thrift_clear_tunnel_stats"] = Processor.process_sai_thrift_clear_tunnel_stats
    self._processMap["sai_thrift_create_tunnel_term_table_entry"] = Processor.process_sai_thrift_create_tunnel_term_table_entry
    self._processMap["sai_thrift_remove_tunnel_term_table_entry"] = Processor.process_sai_thrift_remove_tunnel_term_table_entry
    self._processMap["sai_thrift_get_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_get_tunnel_term_table_entry_attribute
    self._processMap["sai_thrift_set_tunnel_term_table_entry_attribute"] = Processor.process_sai_thrift_set_tunnel_term_table_entry_attribute
    self._processMap["sai_thrift_get_cpu_packet_attribute"] = Processor.process_sai_thrift_get_cpu_packet_attribute
    self._processMap["sai_thrift_get_cpu_packet_count"] = Processor.process_sai_thrift_get_cpu_packet_count
    self._processMap["sai_thrift_clear_cpu_packet_info"] = Processor.process_sai_thrift_clear_cpu_packet_info
    self._processMap["sai_thrift_log_set"] = Processor.process_sai_thrift_log_set

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sai_thrift_set_port_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_port_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_port_attribute_result()
    result.success = self._handler.sai_thrift_set_port_attribute(args.port_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_port_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_port_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_port_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_port_attribute_result()
    result.success = self._handler.sai_thrift_get_port_attribute(args.port_id)
    oprot.writeMessageBegin("sai_thrift_get_port_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_port_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_port_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_port_stats_result()
    result.success = self._handler.sai_thrift_get_port_stats(args.port_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_get_port_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_clear_port_all_stats(self, seqid, iprot, oprot):
    args = sai_thrift_clear_port_all_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_clear_port_all_stats_result()
    result.success = self._handler.sai_thrift_clear_port_all_stats(args.port_id)
    oprot.writeMessageBegin("sai_thrift_clear_port_all_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_fdb_entry_result()
    result.success = self._handler.sai_thrift_create_fdb_entry(args.thrift_fdb_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_fdb_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_delete_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_fdb_entry_result()
    result.success = self._handler.sai_thrift_delete_fdb_entry(args.thrift_fdb_entry)
    oprot.writeMessageBegin("sai_thrift_delete_fdb_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_flush_fdb_entries(self, seqid, iprot, oprot):
    args = sai_thrift_flush_fdb_entries_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_flush_fdb_entries_result()
    result.success = self._handler.sai_thrift_flush_fdb_entries(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_flush_fdb_entries", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_fdb_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_fdb_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_fdb_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_fdb_entry_attribute(args.thrift_fdb_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_fdb_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_fdb_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_fdb_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_fdb_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_fdb_entry_attribute(args.thrift_fdb_entry)
    oprot.writeMessageBegin("sai_thrift_get_fdb_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_create_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_vlan_result()
    result.success = self._handler.sai_thrift_create_vlan(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_vlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_remove_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_vlan_result()
    result.success = self._handler.sai_thrift_remove_vlan(args.vlan_oid)
    oprot.writeMessageBegin("sai_thrift_remove_vlan", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_vlan_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_vlan_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_vlan_stats_result()
    result.success = self._handler.sai_thrift_get_vlan_stats(args.vlan_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_get_vlan_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_vlan_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_vlan_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_vlan_member_result()
    result.success = self._handler.sai_thrift_create_vlan_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_vlan_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_vlan_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_vlan_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_vlan_member_attribute_result()
    result.success = self._handler.sai_thrift_get_vlan_member_attribute(args.vlan_member_id)
    oprot.writeMessageBegin("sai_thrift_get_vlan_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_vlan_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_vlan_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_vlan_member_result()
    result.success = self._handler.sai_thrift_remove_vlan_member(args.vlan_member_id)
    oprot.writeMessageBegin("sai_thrift_remove_vlan_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_vlan_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_vlan_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_vlan_attribute_result()
    result.success = self._handler.sai_thrift_set_vlan_attribute(args.vlan_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_vlan_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_vlan_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_vlan_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_vlan_attribute_result()
    result.success = self._handler.sai_thrift_get_vlan_attribute(args.vlan_id)
    oprot.writeMessageBegin("sai_thrift_get_vlan_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_vlan_id(self, seqid, iprot, oprot):
    args = sai_thrift_get_vlan_id_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_vlan_id_result()
    result.success = self._handler.sai_thrift_get_vlan_id(args.vlan_id)
    oprot.writeMessageBegin("sai_thrift_get_vlan_id", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_virtual_router(self, seqid, iprot, oprot):
    args = sai_thrift_create_virtual_router_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_virtual_router_result()
    result.success = self._handler.sai_thrift_create_virtual_router(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_virtual_router", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_virtual_router(self, seqid, iprot, oprot):
    args = sai_thrift_remove_virtual_router_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_virtual_router_result()
    result.success = self._handler.sai_thrift_remove_virtual_router(args.vr_id)
    oprot.writeMessageBegin("sai_thrift_remove_virtual_router", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_virtual_router_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_virtual_router_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_virtual_router_attribute_result()
    result.success = self._handler.sai_thrift_set_virtual_router_attribute(args.vr_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_virtual_router_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_virtual_router_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_virtual_router_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_virtual_router_attribute_result()
    result.success = self._handler.sai_thrift_get_virtual_router_attribute(args.vr_id)
    oprot.writeMessageBegin("sai_thrift_get_virtual_router_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_route(self, seqid, iprot, oprot):
    args = sai_thrift_create_route_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_route_result()
    result.success = self._handler.sai_thrift_create_route(args.thrift_route_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_route", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_route(self, seqid, iprot, oprot):
    args = sai_thrift_remove_route_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_route_result()
    result.success = self._handler.sai_thrift_remove_route(args.thrift_route_entry)
    oprot.writeMessageBegin("sai_thrift_remove_route", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_route_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_route_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_route_attribute_result()
    result.success = self._handler.sai_thrift_set_route_attribute(args.thrift_route_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_route_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_route_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_route_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_route_attribute_result()
    result.success = self._handler.sai_thrift_get_route_attribute(args.thrift_route_entry)
    oprot.writeMessageBegin("sai_thrift_get_route_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_router_interface(self, seqid, iprot, oprot):
    args = sai_thrift_create_router_interface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_router_interface_result()
    result.success = self._handler.sai_thrift_create_router_interface(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_router_interface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_router_interface(self, seqid, iprot, oprot):
    args = sai_thrift_remove_router_interface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_router_interface_result()
    result.success = self._handler.sai_thrift_remove_router_interface(args.rif_id)
    oprot.writeMessageBegin("sai_thrift_remove_router_interface", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_router_interface_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_router_interface_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_router_interface_attribute_result()
    result.success = self._handler.sai_thrift_set_router_interface_attribute(args.rif_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_router_interface_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_router_interface_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_router_interface_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_router_interface_attribute_result()
    result.success = self._handler.sai_thrift_get_router_interface_attribute(args.rif_id)
    oprot.writeMessageBegin("sai_thrift_get_router_interface_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_next_hop(self, seqid, iprot, oprot):
    args = sai_thrift_create_next_hop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_next_hop_result()
    result.success = self._handler.sai_thrift_create_next_hop(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_next_hop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_result()
    result.success = self._handler.sai_thrift_remove_next_hop(args.next_hop_id)
    oprot.writeMessageBegin("sai_thrift_remove_next_hop", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_next_hop_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_next_hop_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_next_hop_attribute_result()
    result.success = self._handler.sai_thrift_get_next_hop_attribute(args.next_hop_id)
    oprot.writeMessageBegin("sai_thrift_get_next_hop_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_next_hop_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_next_hop_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_next_hop_group_result()
    result.success = self._handler.sai_thrift_create_next_hop_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_next_hop_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_group_result()
    result.success = self._handler.sai_thrift_remove_next_hop_group(args.nhop_group_oid)
    oprot.writeMessageBegin("sai_thrift_remove_next_hop_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_next_hop_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_next_hop_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_next_hop_group_attribute_result()
    result.success = self._handler.sai_thrift_set_next_hop_group_attribute(args.nhop_group_oid, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_next_hop_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_next_hop_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_next_hop_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_next_hop_group_attribute_result()
    result.success = self._handler.sai_thrift_get_next_hop_group_attribute(args.nhop_group_oid)
    oprot.writeMessageBegin("sai_thrift_get_next_hop_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_next_hop_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_next_hop_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_next_hop_group_member_result()
    result.success = self._handler.sai_thrift_create_next_hop_group_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_next_hop_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_group_member_result()
    result.success = self._handler.sai_thrift_remove_next_hop_group_member(args.nhop_group_member_oid)
    oprot.writeMessageBegin("sai_thrift_remove_next_hop_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_next_hop_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_next_hop_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_next_hop_group_member_attribute_result()
    result.success = self._handler.sai_thrift_get_next_hop_group_member_attribute(args.nhop_group_member_oid)
    oprot.writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_lag(self, seqid, iprot, oprot):
    args = sai_thrift_create_lag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_lag_result()
    result.success = self._handler.sai_thrift_create_lag(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_lag", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_lag(self, seqid, iprot, oprot):
    args = sai_thrift_remove_lag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_lag_result()
    result.success = self._handler.sai_thrift_remove_lag(args.lag_id)
    oprot.writeMessageBegin("sai_thrift_remove_lag", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_lag_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_lag_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_lag_attribute_result()
    result.success = self._handler.sai_thrift_set_lag_attribute(args.lag_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_lag_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_lag_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_lag_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_lag_attribute_result()
    result.success = self._handler.sai_thrift_get_lag_attribute(args.lag_id)
    oprot.writeMessageBegin("sai_thrift_get_lag_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_lag_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_lag_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_lag_member_result()
    result.success = self._handler.sai_thrift_create_lag_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_lag_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_lag_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_lag_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_lag_member_result()
    result.success = self._handler.sai_thrift_remove_lag_member(args.lag_member_id)
    oprot.writeMessageBegin("sai_thrift_remove_lag_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_lag_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_lag_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_lag_member_attribute_result()
    result.success = self._handler.sai_thrift_set_lag_member_attribute(args.lag_member_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_lag_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_lag_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_lag_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_lag_member_attribute_result()
    result.success = self._handler.sai_thrift_get_lag_member_attribute(args.lag_member_id)
    oprot.writeMessageBegin("sai_thrift_get_lag_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_stp_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_stp_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_stp_entry_result()
    result.success = self._handler.sai_thrift_create_stp_entry(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_stp_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_stp_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_stp_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_stp_entry_result()
    result.success = self._handler.sai_thrift_remove_stp_entry(args.stp_id)
    oprot.writeMessageBegin("sai_thrift_remove_stp_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_stp_port_state(self, seqid, iprot, oprot):
    args = sai_thrift_set_stp_port_state_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_stp_port_state_result()
    result.success = self._handler.sai_thrift_set_stp_port_state(args.stp_id, args.port_id, args.stp_port_state)
    oprot.writeMessageBegin("sai_thrift_set_stp_port_state", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_stp_port_state(self, seqid, iprot, oprot):
    args = sai_thrift_get_stp_port_state_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_stp_port_state_result()
    result.success = self._handler.sai_thrift_get_stp_port_state(args.stp_id, args.port_id)
    oprot.writeMessageBegin("sai_thrift_get_stp_port_state", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_neighbor_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_neighbor_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_neighbor_entry_result()
    result.success = self._handler.sai_thrift_create_neighbor_entry(args.thrift_neighbor_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_neighbor_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_neighbor_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_neighbor_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_neighbor_entry_result()
    result.success = self._handler.sai_thrift_remove_neighbor_entry(args.thrift_neighbor_entry)
    oprot.writeMessageBegin("sai_thrift_remove_neighbor_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_all_neighbor_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_all_neighbor_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_all_neighbor_entry_result()
    result.success = self._handler.sai_thrift_remove_all_neighbor_entry()
    oprot.writeMessageBegin("sai_thrift_remove_all_neighbor_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_neighbor_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_neighbor_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_neighbor_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_neighbor_entry_attribute(args.thrift_neighbor_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_neighbor_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_neighbor_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_neighbor_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_neighbor_entry_attribute(args.thrift_neighbor_entry)
    oprot.writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_switch_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_switch_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_switch_attribute_result()
    result.success = self._handler.sai_thrift_get_switch_attribute(args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_switch_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_port_list_by_front_port(self, seqid, iprot, oprot):
    args = sai_thrift_get_port_list_by_front_port_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_port_list_by_front_port_result()
    result.success = self._handler.sai_thrift_get_port_list_by_front_port()
    oprot.writeMessageBegin("sai_thrift_get_port_list_by_front_port", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_cpu_port_id(self, seqid, iprot, oprot):
    args = sai_thrift_get_cpu_port_id_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_cpu_port_id_result()
    result.success = self._handler.sai_thrift_get_cpu_port_id()
    oprot.writeMessageBegin("sai_thrift_get_cpu_port_id", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_default_trap_group(self, seqid, iprot, oprot):
    args = sai_thrift_get_default_trap_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_default_trap_group_result()
    result.success = self._handler.sai_thrift_get_default_trap_group()
    oprot.writeMessageBegin("sai_thrift_get_default_trap_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_default_router_id(self, seqid, iprot, oprot):
    args = sai_thrift_get_default_router_id_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_default_router_id_result()
    result.success = self._handler.sai_thrift_get_default_router_id()
    oprot.writeMessageBegin("sai_thrift_get_default_router_id", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_default_1q_bridge_id(self, seqid, iprot, oprot):
    args = sai_thrift_get_default_1q_bridge_id_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_default_1q_bridge_id_result()
    result.success = self._handler.sai_thrift_get_default_1q_bridge_id()
    oprot.writeMessageBegin("sai_thrift_get_default_1q_bridge_id", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_default_vlan_id(self, seqid, iprot, oprot):
    args = sai_thrift_get_default_vlan_id_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_default_vlan_id_result()
    result.success = self._handler.sai_thrift_get_default_vlan_id()
    oprot.writeMessageBegin("sai_thrift_get_default_vlan_id", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_port_id_by_front_port(self, seqid, iprot, oprot):
    args = sai_thrift_get_port_id_by_front_port_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_port_id_by_front_port_result()
    result.success = self._handler.sai_thrift_get_port_id_by_front_port(args.port_name)
    oprot.writeMessageBegin("sai_thrift_get_port_id_by_front_port", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_switch_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_switch_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_switch_attribute_result()
    result.success = self._handler.sai_thrift_set_switch_attribute(args.attribute)
    oprot.writeMessageBegin("sai_thrift_set_switch_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_switch(self, seqid, iprot, oprot):
    args = sai_thrift_create_switch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_switch_result()
    result.success = self._handler.sai_thrift_create_switch()
    oprot.writeMessageBegin("sai_thrift_create_switch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_switch(self, seqid, iprot, oprot):
    args = sai_thrift_remove_switch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_switch_result()
    result.success = self._handler.sai_thrift_remove_switch()
    oprot.writeMessageBegin("sai_thrift_remove_switch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_bridge_port(self, seqid, iprot, oprot):
    args = sai_thrift_create_bridge_port_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_bridge_port_result()
    result.success = self._handler.sai_thrift_create_bridge_port(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_bridge_port", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_bridge_port(self, seqid, iprot, oprot):
    args = sai_thrift_remove_bridge_port_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_bridge_port_result()
    result.success = self._handler.sai_thrift_remove_bridge_port(args.bridge_port_id)
    oprot.writeMessageBegin("sai_thrift_remove_bridge_port", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_bridge_port_list(self, seqid, iprot, oprot):
    args = sai_thrift_get_bridge_port_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_bridge_port_list_result()
    result.success = self._handler.sai_thrift_get_bridge_port_list(args.bridge_id)
    oprot.writeMessageBegin("sai_thrift_get_bridge_port_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_bridge_port_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_bridge_port_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_bridge_port_attribute_result()
    result.success = self._handler.sai_thrift_get_bridge_port_attribute(args.bridge_port_id)
    oprot.writeMessageBegin("sai_thrift_get_bridge_port_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_bridge_port_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_bridge_port_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_bridge_port_attribute_result()
    result.success = self._handler.sai_thrift_set_bridge_port_attribute(args.bridge_port_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_bridge_port_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_bridge(self, seqid, iprot, oprot):
    args = sai_thrift_create_bridge_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_bridge_result()
    result.success = self._handler.sai_thrift_create_bridge(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_bridge", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_bridge(self, seqid, iprot, oprot):
    args = sai_thrift_remove_bridge_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_bridge_result()
    result.success = self._handler.sai_thrift_remove_bridge(args.bridge_id)
    oprot.writeMessageBegin("sai_thrift_remove_bridge", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_bridge_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_bridge_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_bridge_attribute_result()
    result.success = self._handler.sai_thrift_get_bridge_attribute(args.bridge_id)
    oprot.writeMessageBegin("sai_thrift_get_bridge_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_bridge_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_bridge_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_bridge_attribute_result()
    result.success = self._handler.sai_thrift_set_bridge_attribute(args.bridge_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_bridge_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_result()
    result.success = self._handler.sai_thrift_create_hostif(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_hostif", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_result()
    result.success = self._handler.sai_thrift_remove_hostif(args.thrift_hif_id)
    oprot.writeMessageBegin("sai_thrift_remove_hostif", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_hostif_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_hostif_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_hostif_attribute_result()
    result.success = self._handler.sai_thrift_get_hostif_attribute(args.thrift_hif_id)
    oprot.writeMessageBegin("sai_thrift_get_hostif_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hostif_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_hostif_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hostif_attribute_result()
    result.success = self._handler.sai_thrift_set_hostif_attribute(args.thrift_hif_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_hostif_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif_table_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_table_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_table_entry_result()
    result.success = self._handler.sai_thrift_create_hostif_table_entry(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_hostif_table_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif_table_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_table_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_table_entry_result()
    result.success = self._handler.sai_thrift_remove_hostif_table_entry(args.thrift_hostif_table_entry_id)
    oprot.writeMessageBegin("sai_thrift_remove_hostif_table_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_hostif_table_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_hostif_table_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_hostif_table_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_hostif_table_entry_attribute(args.thrift_hostif_table_entry_id)
    oprot.writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hostif_table_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_hostif_table_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hostif_table_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_hostif_table_entry_attribute(args.thrift_hostif_table_entry_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif_trap_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_trap_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_trap_group_result()
    result.success = self._handler.sai_thrift_create_hostif_trap_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_hostif_trap_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif_trap_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_trap_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_trap_group_result()
    result.success = self._handler.sai_thrift_remove_hostif_trap_group(args.thrift_hostif_trap_group_id)
    oprot.writeMessageBegin("sai_thrift_remove_hostif_trap_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_hostif_trap_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_hostif_trap_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_hostif_trap_group_attribute_result()
    result.success = self._handler.sai_thrift_get_hostif_trap_group_attribute(args.thrift_hostif_trap_group_id)
    oprot.writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hostif_trap_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_hostif_trap_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hostif_trap_group_attribute_result()
    result.success = self._handler.sai_thrift_set_hostif_trap_group_attribute(args.thrift_hostif_trap_group_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif_trap(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_trap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_trap_result()
    result.success = self._handler.sai_thrift_create_hostif_trap(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_hostif_trap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif_trap(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_trap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_trap_result()
    result.success = self._handler.sai_thrift_remove_hostif_trap(args.thrift_hostif_trap_id)
    oprot.writeMessageBegin("sai_thrift_remove_hostif_trap", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_hostif_trap_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_hostif_trap_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_hostif_trap_attribute_result()
    result.success = self._handler.sai_thrift_get_hostif_trap_attribute(args.thrift_hostif_trap_id)
    oprot.writeMessageBegin("sai_thrift_get_hostif_trap_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hostif_trap_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_hostif_trap_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hostif_trap_attribute_result()
    result.success = self._handler.sai_thrift_set_hostif_trap_attribute(args.thrift_hostif_trap_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_hostif_trap_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_table(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_table_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_table_result()
    result.success = self._handler.sai_thrift_create_acl_table(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_acl_table", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_acl_table(self, seqid, iprot, oprot):
    args = sai_thrift_remove_acl_table_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_acl_table_result()
    result.success = self._handler.sai_thrift_remove_acl_table(args.acl_table_id)
    oprot.writeMessageBegin("sai_thrift_remove_acl_table", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_table_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_table_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_table_attribute_result()
    result.success = self._handler.sai_thrift_get_acl_table_attribute(args.acl_table_id, args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_acl_table_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_entry_result()
    result.success = self._handler.sai_thrift_create_acl_entry(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_acl_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_acl_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_acl_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_acl_entry_result()
    result.success = self._handler.sai_thrift_remove_acl_entry(args.acl_entry)
    oprot.writeMessageBegin("sai_thrift_remove_acl_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_acl_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_acl_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_acl_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_acl_entry_attribute(args.acl_entry_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_acl_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_acl_entry_attribute(args.acl_entry_id, args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_acl_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_table_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_table_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_table_group_result()
    result.success = self._handler.sai_thrift_create_acl_table_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_acl_table_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_acl_table_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_acl_table_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_acl_table_group_result()
    result.success = self._handler.sai_thrift_remove_acl_table_group(args.acl_table_group_id)
    oprot.writeMessageBegin("sai_thrift_remove_acl_table_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_table_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_table_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_table_group_attribute_result()
    result.success = self._handler.sai_thrift_get_acl_table_group_attribute(args.acl_table_group_id)
    oprot.writeMessageBegin("sai_thrift_get_acl_table_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_table_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_table_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_table_group_member_result()
    result.success = self._handler.sai_thrift_create_acl_table_group_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_acl_table_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_acl_table_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_acl_table_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_acl_table_group_member_result()
    result.success = self._handler.sai_thrift_remove_acl_table_group_member(args.acl_table_group_member_id)
    oprot.writeMessageBegin("sai_thrift_remove_acl_table_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_table_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_table_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_table_group_member_attribute_result()
    result.success = self._handler.sai_thrift_get_acl_table_group_member_attribute(args.acl_table_group_member_id)
    oprot.writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_counter(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_counter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_counter_result()
    result.success = self._handler.sai_thrift_create_acl_counter(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_acl_counter", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_acl_counter(self, seqid, iprot, oprot):
    args = sai_thrift_remove_acl_counter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_acl_counter_result()
    result.success = self._handler.sai_thrift_remove_acl_counter(args.acl_counter_id)
    oprot.writeMessageBegin("sai_thrift_remove_acl_counter", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_counter_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_counter_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_counter_attribute_result()
    result.success = self._handler.sai_thrift_get_acl_counter_attribute(args.acl_counter_id, args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_acl_counter_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hash(self, seqid, iprot, oprot):
    args = sai_thrift_create_hash_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hash_result()
    result.success = self._handler.sai_thrift_create_hash(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_hash", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hash(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hash_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hash_result()
    result.success = self._handler.sai_thrift_remove_hash(args.hash_id)
    oprot.writeMessageBegin("sai_thrift_remove_hash", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hash_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_hash_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hash_attribute_result()
    result.success = self._handler.sai_thrift_set_hash_attribute(args.thrift_hash_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_hash_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_hash_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_hash_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_hash_attribute_result()
    result.success = self._handler.sai_thrift_get_hash_attribute(args.thrift_hash_id)
    oprot.writeMessageBegin("sai_thrift_get_hash_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_udf_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_udf_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_udf_group_result()
    result.success = self._handler.sai_thrift_create_udf_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_udf_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_udf_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_udf_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_udf_group_result()
    result.success = self._handler.sai_thrift_remove_udf_group(args.udf_group_id)
    oprot.writeMessageBegin("sai_thrift_remove_udf_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_udf_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_udf_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_udf_group_attribute_result()
    result.success = self._handler.sai_thrift_get_udf_group_attribute(args.thrift_udf_group_id)
    oprot.writeMessageBegin("sai_thrift_get_udf_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_udf_match(self, seqid, iprot, oprot):
    args = sai_thrift_create_udf_match_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_udf_match_result()
    result.success = self._handler.sai_thrift_create_udf_match(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_udf_match", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_udf_match(self, seqid, iprot, oprot):
    args = sai_thrift_remove_udf_match_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_udf_match_result()
    result.success = self._handler.sai_thrift_remove_udf_match(args.udf_match_id)
    oprot.writeMessageBegin("sai_thrift_remove_udf_match", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_udf_match_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_udf_match_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_udf_match_attribute_result()
    result.success = self._handler.sai_thrift_get_udf_match_attribute(args.thrift_udf_match_id)
    oprot.writeMessageBegin("sai_thrift_get_udf_match_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_udf(self, seqid, iprot, oprot):
    args = sai_thrift_create_udf_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_udf_result()
    result.success = self._handler.sai_thrift_create_udf(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_udf", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_udf(self, seqid, iprot, oprot):
    args = sai_thrift_remove_udf_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_udf_result()
    result.success = self._handler.sai_thrift_remove_udf(args.udf_id)
    oprot.writeMessageBegin("sai_thrift_remove_udf", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_udf_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_udf_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_udf_attribute_result()
    result.success = self._handler.sai_thrift_set_udf_attribute(args.thrift_udf_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_udf_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_udf_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_udf_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_udf_attribute_result()
    result.success = self._handler.sai_thrift_get_udf_attribute(args.thrift_udf_id)
    oprot.writeMessageBegin("sai_thrift_get_udf_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_mirror_session(self, seqid, iprot, oprot):
    args = sai_thrift_create_mirror_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_mirror_session_result()
    result.success = self._handler.sai_thrift_create_mirror_session(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_mirror_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_mirror_session(self, seqid, iprot, oprot):
    args = sai_thrift_remove_mirror_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_mirror_session_result()
    result.success = self._handler.sai_thrift_remove_mirror_session(args.session_id)
    oprot.writeMessageBegin("sai_thrift_remove_mirror_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_mirror_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_mirror_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_mirror_attribute_result()
    result.success = self._handler.sai_thrift_set_mirror_attribute(args.thrift_mirror_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_mirror_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_mirror_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_mirror_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_mirror_attribute_result()
    result.success = self._handler.sai_thrift_get_mirror_attribute(args.thrift_mirror_id)
    oprot.writeMessageBegin("sai_thrift_get_mirror_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_inseg_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_inseg_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_inseg_entry_result()
    result.success = self._handler.sai_thrift_create_inseg_entry(args.thrift_inseg_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_inseg_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_inseg_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_inseg_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_inseg_entry_result()
    result.success = self._handler.sai_thrift_remove_inseg_entry(args.thrift_inseg_entry)
    oprot.writeMessageBegin("sai_thrift_remove_inseg_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_inseg_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_inseg_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_inseg_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_inseg_entry_attribute(args.thrift_inseg_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_inseg_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_inseg_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_inseg_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_inseg_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_inseg_entry_attribute(args.thrift_inseg_entry)
    oprot.writeMessageBegin("sai_thrift_get_inseg_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_dump_log(self, seqid, iprot, oprot):
    args = sai_thrift_dump_log_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_dump_log_result()
    result.success = self._handler.sai_thrift_dump_log(args.dump_file_name)
    oprot.writeMessageBegin("sai_thrift_dump_log", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_policer(self, seqid, iprot, oprot):
    args = sai_thrift_create_policer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_policer_result()
    result.success = self._handler.sai_thrift_create_policer(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_policer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_policer(self, seqid, iprot, oprot):
    args = sai_thrift_remove_policer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_policer_result()
    result.success = self._handler.sai_thrift_remove_policer(args.thrift_policer_id)
    oprot.writeMessageBegin("sai_thrift_remove_policer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_policer_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_policer_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_policer_attribute_result()
    result.success = self._handler.sai_thrift_get_policer_attribute(args.thrift_policer_id)
    oprot.writeMessageBegin("sai_thrift_get_policer_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_policer_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_policer_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_policer_attribute_result()
    result.success = self._handler.sai_thrift_set_policer_attribute(args.thrift_policer_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_policer_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_policer_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_policer_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_policer_stats_result()
    result.success = self._handler.sai_thrift_get_policer_stats(args.thrift_policer_id, args.thrift_counter_ids)
    oprot.writeMessageBegin("sai_thrift_get_policer_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_clear_policer_stats(self, seqid, iprot, oprot):
    args = sai_thrift_clear_policer_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_clear_policer_stats_result()
    result.success = self._handler.sai_thrift_clear_policer_stats(args.thrift_policer_id, args.thrift_counter_ids)
    oprot.writeMessageBegin("sai_thrift_clear_policer_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_scheduler_profile(self, seqid, iprot, oprot):
    args = sai_thrift_create_scheduler_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_scheduler_profile_result()
    result.success = self._handler.sai_thrift_create_scheduler_profile(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_scheduler_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_scheduler_profile(self, seqid, iprot, oprot):
    args = sai_thrift_remove_scheduler_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_scheduler_profile_result()
    result.success = self._handler.sai_thrift_remove_scheduler_profile(args.scheduler_id)
    oprot.writeMessageBegin("sai_thrift_remove_scheduler_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_scheduler_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_scheduler_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_scheduler_attribute_result()
    result.success = self._handler.sai_thrift_get_scheduler_attribute(args.thrift_scheduler_id)
    oprot.writeMessageBegin("sai_thrift_get_scheduler_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_scheduler_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_scheduler_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_scheduler_attribute_result()
    result.success = self._handler.sai_thrift_set_scheduler_attribute(args.thrift_scheduler_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_scheduler_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_scheduler_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_scheduler_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_scheduler_group_result()
    result.success = self._handler.sai_thrift_create_scheduler_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_scheduler_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_scheduler_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_scheduler_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_scheduler_group_result()
    result.success = self._handler.sai_thrift_remove_scheduler_group(args.scheduler_group_id)
    oprot.writeMessageBegin("sai_thrift_remove_scheduler_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_scheduler_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_scheduler_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_scheduler_group_attribute_result()
    result.success = self._handler.sai_thrift_get_scheduler_group_attribute(args.scheduler_group_id)
    oprot.writeMessageBegin("sai_thrift_get_scheduler_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_scheduler_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_scheduler_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_scheduler_group_attribute_result()
    result.success = self._handler.sai_thrift_set_scheduler_group_attribute(args.scheduler_group_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_scheduler_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_queue_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_queue_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_queue_stats_result()
    result.success = self._handler.sai_thrift_get_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_get_queue_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_clear_queue_stats(self, seqid, iprot, oprot):
    args = sai_thrift_clear_queue_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_clear_queue_stats_result()
    result.success = self._handler.sai_thrift_clear_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_clear_queue_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_queue(self, seqid, iprot, oprot):
    args = sai_thrift_create_queue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_queue_result()
    result.success = self._handler.sai_thrift_create_queue(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_queue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_queue(self, seqid, iprot, oprot):
    args = sai_thrift_remove_queue_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_queue_result()
    result.success = self._handler.sai_thrift_remove_queue(args.queue_id)
    oprot.writeMessageBegin("sai_thrift_remove_queue", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_queue_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_queue_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_queue_attribute_result()
    result.success = self._handler.sai_thrift_get_queue_attribute(args.queue_id)
    oprot.writeMessageBegin("sai_thrift_get_queue_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_queue_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_queue_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_queue_attribute_result()
    result.success = self._handler.sai_thrift_set_queue_attribute(args.queue_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_queue_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_buffer_profile(self, seqid, iprot, oprot):
    args = sai_thrift_create_buffer_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_buffer_profile_result()
    result.success = self._handler.sai_thrift_create_buffer_profile(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_buffer_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_buffer_profile(self, seqid, iprot, oprot):
    args = sai_thrift_remove_buffer_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_buffer_profile_result()
    result.success = self._handler.sai_thrift_remove_buffer_profile(args.buffer_profile_id)
    oprot.writeMessageBegin("sai_thrift_remove_buffer_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_buffer_profile_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_buffer_profile_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_buffer_profile_attribute_result()
    result.success = self._handler.sai_thrift_get_buffer_profile_attribute(args.buffer_profile_id)
    oprot.writeMessageBegin("sai_thrift_get_buffer_profile_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_buffer_profile_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_buffer_profile_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_buffer_profile_attribute_result()
    result.success = self._handler.sai_thrift_set_buffer_profile_attribute(args.buffer_profile_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_buffer_profile_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_pool_profile(self, seqid, iprot, oprot):
    args = sai_thrift_create_pool_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_pool_profile_result()
    result.success = self._handler.sai_thrift_create_pool_profile(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_pool_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_priority_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_priority_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_priority_group_result()
    result.success = self._handler.sai_thrift_create_priority_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_priority_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_priority_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_priority_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_priority_group_result()
    result.success = self._handler.sai_thrift_remove_priority_group(args.priority_group_id)
    oprot.writeMessageBegin("sai_thrift_remove_priority_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_priority_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_priority_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_priority_group_attribute_result()
    result.success = self._handler.sai_thrift_get_priority_group_attribute(args.priority_group_id)
    oprot.writeMessageBegin("sai_thrift_get_priority_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_priority_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_priority_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_priority_group_attribute_result()
    result.success = self._handler.sai_thrift_set_priority_group_attribute(args.pg_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_priority_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_pg_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_pg_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_pg_stats_result()
    result.success = self._handler.sai_thrift_get_pg_stats(args.pg_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_get_pg_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_wred_profile(self, seqid, iprot, oprot):
    args = sai_thrift_create_wred_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_wred_profile_result()
    result.success = self._handler.sai_thrift_create_wred_profile(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_wred_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_wred_profile(self, seqid, iprot, oprot):
    args = sai_thrift_remove_wred_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_wred_profile_result()
    result.success = self._handler.sai_thrift_remove_wred_profile(args.wred_id)
    oprot.writeMessageBegin("sai_thrift_remove_wred_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_wred_attribute_profile(self, seqid, iprot, oprot):
    args = sai_thrift_get_wred_attribute_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_wred_attribute_profile_result()
    result.success = self._handler.sai_thrift_get_wred_attribute_profile(args.wred_id)
    oprot.writeMessageBegin("sai_thrift_get_wred_attribute_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_wred_attribute_profile(self, seqid, iprot, oprot):
    args = sai_thrift_set_wred_attribute_profile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_wred_attribute_profile_result()
    result.success = self._handler.sai_thrift_set_wred_attribute_profile(args.wred_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_wred_attribute_profile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_qos_map(self, seqid, iprot, oprot):
    args = sai_thrift_create_qos_map_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_qos_map_result()
    result.success = self._handler.sai_thrift_create_qos_map(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_qos_map", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_qos_map(self, seqid, iprot, oprot):
    args = sai_thrift_remove_qos_map_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_qos_map_result()
    result.success = self._handler.sai_thrift_remove_qos_map(args.qos_map_id)
    oprot.writeMessageBegin("sai_thrift_remove_qos_map", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_qos_map_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_qos_map_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_qos_map_attribute_result()
    result.success = self._handler.sai_thrift_get_qos_map_attribute(args.qos_map_id)
    oprot.writeMessageBegin("sai_thrift_get_qos_map_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_qos_map_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_qos_map_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_qos_map_attribute_result()
    result.success = self._handler.sai_thrift_set_qos_map_attribute(args.qos_map_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_qos_map_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_l2mc_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_l2mc_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_l2mc_group_result()
    result.success = self._handler.sai_thrift_create_l2mc_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_l2mc_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_l2mc_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_l2mc_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_l2mc_group_result()
    result.success = self._handler.sai_thrift_remove_l2mc_group(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_remove_l2mc_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_l2mc_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_l2mc_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_l2mc_group_attribute_result()
    result.success = self._handler.sai_thrift_get_l2mc_group_attribute(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_get_l2mc_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_l2mc_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_l2mc_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_l2mc_group_member_result()
    result.success = self._handler.sai_thrift_create_l2mc_group_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_l2mc_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_l2mc_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_l2mc_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_l2mc_group_member_result()
    result.success = self._handler.sai_thrift_remove_l2mc_group_member(args.member_id)
    oprot.writeMessageBegin("sai_thrift_remove_l2mc_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_l2mc_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_l2mc_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_l2mc_group_member_attribute_result()
    result.success = self._handler.sai_thrift_set_l2mc_group_member_attribute(args.member_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_l2mc_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_l2mc_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_l2mc_group_member_attribute_result()
    result.success = self._handler.sai_thrift_get_l2mc_group_member_attribute(args.member_id)
    oprot.writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_l2mc_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_l2mc_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_l2mc_entry_result()
    result.success = self._handler.sai_thrift_create_l2mc_entry(args.thrift_l2mc_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_l2mc_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_l2mc_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_l2mc_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_l2mc_entry_result()
    result.success = self._handler.sai_thrift_remove_l2mc_entry(args.thrift_l2mc_entry)
    oprot.writeMessageBegin("sai_thrift_remove_l2mc_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_l2mc_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_l2mc_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_l2mc_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_l2mc_entry_attribute(args.thrift_l2mc_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_l2mc_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_l2mc_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_l2mc_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_l2mc_entry_attribute(args.thrift_l2mc_entry)
    oprot.writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_mcast_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_mcast_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_mcast_fdb_entry_result()
    result.success = self._handler.sai_thrift_create_mcast_fdb_entry(args.thrift_mcast_fdb_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_mcast_fdb_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_mcast_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_mcast_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_mcast_fdb_entry_result()
    result.success = self._handler.sai_thrift_remove_mcast_fdb_entry(args.thrift_mcast_fdb_entry)
    oprot.writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_mcast_fdb_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_mcast_fdb_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_mcast_fdb_entry_attribute(args.thrift_mcast_fdb_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_mcast_fdb_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_mcast_fdb_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_mcast_fdb_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_mcast_fdb_entry_attribute(args.thrift_mcast_fdb_entry)
    oprot.writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_ipmc_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_ipmc_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_ipmc_group_result()
    result.success = self._handler.sai_thrift_create_ipmc_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_ipmc_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_ipmc_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_ipmc_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_ipmc_group_result()
    result.success = self._handler.sai_thrift_remove_ipmc_group(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_remove_ipmc_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_ipmc_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_ipmc_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_ipmc_group_attribute_result()
    result.success = self._handler.sai_thrift_get_ipmc_group_attribute(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_get_ipmc_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_ipmc_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_ipmc_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_ipmc_group_member_result()
    result.success = self._handler.sai_thrift_create_ipmc_group_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_ipmc_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_ipmc_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_ipmc_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_ipmc_group_member_result()
    result.success = self._handler.sai_thrift_remove_ipmc_group_member(args.member_id)
    oprot.writeMessageBegin("sai_thrift_remove_ipmc_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_ipmc_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_ipmc_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_ipmc_group_member_attribute_result()
    result.success = self._handler.sai_thrift_set_ipmc_group_member_attribute(args.member_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_ipmc_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_ipmc_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_ipmc_group_member_attribute_result()
    result.success = self._handler.sai_thrift_get_ipmc_group_member_attribute(args.member_id)
    oprot.writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_rpf_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_rpf_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_rpf_group_result()
    result.success = self._handler.sai_thrift_create_rpf_group(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_rpf_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_rpf_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_rpf_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_rpf_group_result()
    result.success = self._handler.sai_thrift_remove_rpf_group(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_remove_rpf_group", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_rpf_group_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_rpf_group_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_rpf_group_attribute_result()
    result.success = self._handler.sai_thrift_get_rpf_group_attribute(args.grp_id)
    oprot.writeMessageBegin("sai_thrift_get_rpf_group_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_rpf_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_rpf_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_rpf_group_member_result()
    result.success = self._handler.sai_thrift_create_rpf_group_member(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_rpf_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_rpf_group_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_rpf_group_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_rpf_group_member_result()
    result.success = self._handler.sai_thrift_remove_rpf_group_member(args.member_id)
    oprot.writeMessageBegin("sai_thrift_remove_rpf_group_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_rpf_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_rpf_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_rpf_group_member_attribute_result()
    result.success = self._handler.sai_thrift_set_rpf_group_member_attribute(args.member_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_rpf_group_member_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_rpf_group_member_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_rpf_group_member_attribute_result()
    result.success = self._handler.sai_thrift_get_rpf_group_member_attribute(args.member_id)
    oprot.writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_ipmc_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_ipmc_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_ipmc_entry_result()
    result.success = self._handler.sai_thrift_create_ipmc_entry(args.thrift_ipmc_entry, args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_ipmc_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_ipmc_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_ipmc_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_ipmc_entry_result()
    result.success = self._handler.sai_thrift_remove_ipmc_entry(args.thrift_ipmc_entry)
    oprot.writeMessageBegin("sai_thrift_remove_ipmc_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_ipmc_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_ipmc_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_ipmc_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_ipmc_entry_attribute(args.thrift_ipmc_entry, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_ipmc_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_ipmc_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_ipmc_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_ipmc_entry_attribute(args.thrift_ipmc_entry)
    oprot.writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_samplepacket(self, seqid, iprot, oprot):
    args = sai_thrift_create_samplepacket_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_samplepacket_result()
    result.success = self._handler.sai_thrift_create_samplepacket(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_samplepacket", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_samplepacket(self, seqid, iprot, oprot):
    args = sai_thrift_remove_samplepacket_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_samplepacket_result()
    result.success = self._handler.sai_thrift_remove_samplepacket(args.samplepacket_id)
    oprot.writeMessageBegin("sai_thrift_remove_samplepacket", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_samplepacket_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_samplepacket_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_samplepacket_attribute_result()
    result.success = self._handler.sai_thrift_get_samplepacket_attribute(args.samplepacket_id)
    oprot.writeMessageBegin("sai_thrift_get_samplepacket_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_samplepacket_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_samplepacket_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_samplepacket_attribute_result()
    result.success = self._handler.sai_thrift_set_samplepacket_attribute(args.samplepacket_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_samplepacket_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_tunnel_map_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_tunnel_map_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_tunnel_map_entry_result()
    result.success = self._handler.sai_thrift_create_tunnel_map_entry(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_tunnel_map_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_tunnel_map_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_tunnel_map_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_tunnel_map_entry_result()
    result.success = self._handler.sai_thrift_remove_tunnel_map_entry(args.tunnel_map_entry_id)
    oprot.writeMessageBegin("sai_thrift_remove_tunnel_map_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_tunnel_map_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_tunnel_map_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_tunnel_map_entry_attribute(args.tunnel_map_entry_id)
    oprot.writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_tunnel_map_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_tunnel_map_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_tunnel_map_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_tunnel_map_entry_attribute(args.tunnel_map_entry_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_tunnel_map(self, seqid, iprot, oprot):
    args = sai_thrift_create_tunnel_map_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_tunnel_map_result()
    result.success = self._handler.sai_thrift_create_tunnel_map(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_tunnel_map", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_tunnel_map(self, seqid, iprot, oprot):
    args = sai_thrift_remove_tunnel_map_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_tunnel_map_result()
    result.success = self._handler.sai_thrift_remove_tunnel_map(args.tunnel_map_id)
    oprot.writeMessageBegin("sai_thrift_remove_tunnel_map", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_tunnel_map_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_tunnel_map_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_tunnel_map_attribute_result()
    result.success = self._handler.sai_thrift_get_tunnel_map_attribute(args.tunnel_map_id)
    oprot.writeMessageBegin("sai_thrift_get_tunnel_map_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_tunnel_map_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_tunnel_map_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_tunnel_map_attribute_result()
    result.success = self._handler.sai_thrift_set_tunnel_map_attribute(args.tunnel_map_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_tunnel_map_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_tunnel(self, seqid, iprot, oprot):
    args = sai_thrift_create_tunnel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_tunnel_result()
    result.success = self._handler.sai_thrift_create_tunnel(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_tunnel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_tunnel(self, seqid, iprot, oprot):
    args = sai_thrift_remove_tunnel_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_tunnel_result()
    result.success = self._handler.sai_thrift_remove_tunnel(args.tunnel_id)
    oprot.writeMessageBegin("sai_thrift_remove_tunnel", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_tunnel_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_tunnel_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_tunnel_attribute_result()
    result.success = self._handler.sai_thrift_get_tunnel_attribute(args.tunnel_id, args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_tunnel_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_tunnel_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_tunnel_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_tunnel_attribute_result()
    result.success = self._handler.sai_thrift_set_tunnel_attribute(args.tunnel_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_tunnel_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_tunnel_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_tunnel_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_tunnel_stats_result()
    result.success = self._handler.sai_thrift_get_tunnel_stats(args.tunnel_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_get_tunnel_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_clear_tunnel_stats(self, seqid, iprot, oprot):
    args = sai_thrift_clear_tunnel_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_clear_tunnel_stats_result()
    result.success = self._handler.sai_thrift_clear_tunnel_stats(args.tunnel_id, args.counter_ids, args.number_of_counters)
    oprot.writeMessageBegin("sai_thrift_clear_tunnel_stats", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_tunnel_term_table_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_tunnel_term_table_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_tunnel_term_table_entry_result()
    result.success = self._handler.sai_thrift_create_tunnel_term_table_entry(args.thrift_attr_list)
    oprot.writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_tunnel_term_table_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_tunnel_term_table_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_tunnel_term_table_entry_result()
    result.success = self._handler.sai_thrift_remove_tunnel_term_table_entry(args.tunnel_term_table_entry_id)
    oprot.writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_tunnel_term_table_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_tunnel_term_table_entry_attribute_result()
    result.success = self._handler.sai_thrift_get_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_id, args.thrift_attr_ids)
    oprot.writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_tunnel_term_table_entry_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_tunnel_term_table_entry_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_tunnel_term_table_entry_attribute_result()
    result.success = self._handler.sai_thrift_set_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_id, args.thrift_attr)
    oprot.writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_cpu_packet_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_cpu_packet_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_cpu_packet_attribute_result()
    result.success = self._handler.sai_thrift_get_cpu_packet_attribute(args.switch_id)
    oprot.writeMessageBegin("sai_thrift_get_cpu_packet_attribute", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_cpu_packet_count(self, seqid, iprot, oprot):
    args = sai_thrift_get_cpu_packet_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_cpu_packet_count_result()
    result.success = self._handler.sai_thrift_get_cpu_packet_count()
    oprot.writeMessageBegin("sai_thrift_get_cpu_packet_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_clear_cpu_packet_info(self, seqid, iprot, oprot):
    args = sai_thrift_clear_cpu_packet_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_clear_cpu_packet_info_result()
    result.success = self._handler.sai_thrift_clear_cpu_packet_info()
    oprot.writeMessageBegin("sai_thrift_clear_cpu_packet_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_log_set(self, seqid, iprot, oprot):
    args = sai_thrift_log_set_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_log_set_result()
    result.success = self._handler.sai_thrift_log_set(args.sai_api_id, args.log_level)
    oprot.writeMessageBegin("sai_thrift_log_set", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sai_thrift_set_port_attribute_args:
  """
  Attributes:
   - port_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, port_id=None, thrift_attr=None,):
    self.port_id = port_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_port_attribute_args')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_port_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_port_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_attribute_args:
  """
  Attributes:
   - port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
  )

  def __init__(self, port_id=None,):
    self.port_id = port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_attribute_args')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_stats_args:
  """
  Attributes:
   - port_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, port_id=None, counter_ids=None, number_of_counters=None,):
    self.port_id = port_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI32();
            self.counter_ids.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_stats_args')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter62 in self.counter_ids:
        oprot.writeI32(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readI64();
            self.success.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter69 in self.success:
        oprot.writeI64(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_port_all_stats_args:
  """
  Attributes:
   - port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
  )

  def __init__(self, port_id=None,):
    self.port_id = port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_port_all_stats_args')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_port_all_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_port_all_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_fdb_entry_args:
  """
  Attributes:
   - thrift_fdb_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_fdb_entry=None, thrift_attr_list=None,):
    self.thrift_fdb_entry = thrift_fdb_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = sai_thrift_attribute_t()
            _elem75.read(iprot)
            self.thrift_attr_list.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_fdb_entry_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter76 in self.thrift_attr_list:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_fdb_entry_args:
  """
  Attributes:
   - thrift_fdb_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_fdb_entry=None,):
    self.thrift_fdb_entry = thrift_fdb_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_fdb_entry_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_flush_fdb_entries_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = sai_thrift_attribute_t()
            _elem82.read(iprot)
            self.thrift_attr_list.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_flush_fdb_entries_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter83 in self.thrift_attr_list:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_flush_fdb_entries_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_flush_fdb_entries_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_fdb_entry_attribute_args:
  """
  Attributes:
   - thrift_fdb_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_fdb_entry=None, thrift_attr=None,):
    self.thrift_fdb_entry = thrift_fdb_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_fdb_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_fdb_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_fdb_entry_attribute_args:
  """
  Attributes:
   - thrift_fdb_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_fdb_entry=None,):
    self.thrift_fdb_entry = thrift_fdb_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_fdb_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_fdb_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = sai_thrift_attribute_t()
            _elem89.read(iprot)
            self.thrift_attr_list.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter90 in self.thrift_attr_list:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_vlan_args:
  """
  Attributes:
   - vlan_oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_oid', None, None, ), # 1
  )

  def __init__(self, vlan_oid=None,):
    self.vlan_oid = vlan_oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_vlan_args')
    if self.vlan_oid is not None:
      oprot.writeFieldBegin('vlan_oid', TType.I64, 1)
      oprot.writeI64(self.vlan_oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_stats_args:
  """
  Attributes:
   - vlan_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, vlan_id=None, counter_ids=None, number_of_counters=None,):
    self.vlan_id = vlan_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readI32();
            self.counter_ids.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_stats_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter97 in self.counter_ids:
        oprot.writeI32(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readI64();
            self.success.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter104 in self.success:
        oprot.writeI64(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = sai_thrift_attribute_t()
            _elem110.read(iprot)
            self.thrift_attr_list.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter111 in self.thrift_attr_list:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_member_attribute_args:
  """
  Attributes:
   - vlan_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_member_id', None, None, ), # 1
  )

  def __init__(self, vlan_member_id=None,):
    self.vlan_member_id = vlan_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_args')
    if self.vlan_member_id is not None:
      oprot.writeFieldBegin('vlan_member_id', TType.I64, 1)
      oprot.writeI64(self.vlan_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_vlan_member_args:
  """
  Attributes:
   - vlan_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_member_id', None, None, ), # 1
  )

  def __init__(self, vlan_member_id=None,):
    self.vlan_member_id = vlan_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_vlan_member_args')
    if self.vlan_member_id is not None:
      oprot.writeFieldBegin('vlan_member_id', TType.I64, 1)
      oprot.writeI64(self.vlan_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_vlan_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_vlan_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_vlan_attribute_args:
  """
  Attributes:
   - vlan_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, vlan_id=None, thrift_attr=None,):
    self.vlan_id = vlan_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_vlan_attribute_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I64, 1)
      oprot.writeI64(self.vlan_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_vlan_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_vlan_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_attribute_args:
  """
  Attributes:
   - vlan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_id', None, None, ), # 1
  )

  def __init__(self, vlan_id=None,):
    self.vlan_id = vlan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_attribute_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I64, 1)
      oprot.writeI64(self.vlan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_id_args:
  """
  Attributes:
   - vlan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vlan_id', None, None, ), # 1
  )

  def __init__(self, vlan_id=None,):
    self.vlan_id = vlan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vlan_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_id_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I64, 1)
      oprot.writeI64(self.vlan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_id_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_id_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_virtual_router_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = sai_thrift_attribute_t()
            _elem117.read(iprot)
            self.thrift_attr_list.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_virtual_router_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter118 in self.thrift_attr_list:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_virtual_router_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_virtual_router_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_virtual_router_args:
  """
  Attributes:
   - vr_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vr_id', None, None, ), # 1
  )

  def __init__(self, vr_id=None,):
    self.vr_id = vr_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vr_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_virtual_router_args')
    if self.vr_id is not None:
      oprot.writeFieldBegin('vr_id', TType.I64, 1)
      oprot.writeI64(self.vr_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vr_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_virtual_router_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_virtual_router_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_virtual_router_attribute_args:
  """
  Attributes:
   - vr_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vr_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, vr_id=None, thrift_attr=None,):
    self.vr_id = vr_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vr_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_args')
    if self.vr_id is not None:
      oprot.writeFieldBegin('vr_id', TType.I64, 1)
      oprot.writeI64(self.vr_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vr_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_virtual_router_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_virtual_router_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_virtual_router_attribute_args:
  """
  Attributes:
   - vr_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vr_id', None, None, ), # 1
  )

  def __init__(self, vr_id=None,):
    self.vr_id = vr_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vr_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_args')
    if self.vr_id is not None:
      oprot.writeFieldBegin('vr_id', TType.I64, 1)
      oprot.writeI64(self.vr_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vr_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_virtual_router_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_virtual_router_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_route_args:
  """
  Attributes:
   - thrift_route_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_route_entry', (sai_thrift_route_entry_t, sai_thrift_route_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_route_entry=None, thrift_attr_list=None,):
    self.thrift_route_entry = thrift_route_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_route_entry = sai_thrift_route_entry_t()
          self.thrift_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = sai_thrift_attribute_t()
            _elem124.read(iprot)
            self.thrift_attr_list.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_route_args')
    if self.thrift_route_entry is not None:
      oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
      self.thrift_route_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter125 in self.thrift_attr_list:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_route_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_route_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_route_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_route_args:
  """
  Attributes:
   - thrift_route_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_route_entry', (sai_thrift_route_entry_t, sai_thrift_route_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_route_entry=None,):
    self.thrift_route_entry = thrift_route_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_route_entry = sai_thrift_route_entry_t()
          self.thrift_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_route_args')
    if self.thrift_route_entry is not None:
      oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
      self.thrift_route_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_route_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_route_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_route_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_route_attribute_args:
  """
  Attributes:
   - thrift_route_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_route_entry', (sai_thrift_route_entry_t, sai_thrift_route_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_route_entry=None, thrift_attr=None,):
    self.thrift_route_entry = thrift_route_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_route_entry = sai_thrift_route_entry_t()
          self.thrift_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_route_attribute_args')
    if self.thrift_route_entry is not None:
      oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
      self.thrift_route_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_route_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_route_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_route_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_route_attribute_args:
  """
  Attributes:
   - thrift_route_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_route_entry', (sai_thrift_route_entry_t, sai_thrift_route_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_route_entry=None,):
    self.thrift_route_entry = thrift_route_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_route_entry = sai_thrift_route_entry_t()
          self.thrift_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_route_attribute_args')
    if self.thrift_route_entry is not None:
      oprot.writeFieldBegin('thrift_route_entry', TType.STRUCT, 1)
      self.thrift_route_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_route_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_route_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_route_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_router_interface_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = sai_thrift_attribute_t()
            _elem131.read(iprot)
            self.thrift_attr_list.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_router_interface_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter132 in self.thrift_attr_list:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_router_interface_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_router_interface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_router_interface_args:
  """
  Attributes:
   - rif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rif_id', None, None, ), # 1
  )

  def __init__(self, rif_id=None,):
    self.rif_id = rif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_router_interface_args')
    if self.rif_id is not None:
      oprot.writeFieldBegin('rif_id', TType.I64, 1)
      oprot.writeI64(self.rif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_router_interface_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_router_interface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_router_interface_attribute_args:
  """
  Attributes:
   - rif_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rif_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, rif_id=None, thrift_attr=None,):
    self.rif_id = rif_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_args')
    if self.rif_id is not None:
      oprot.writeFieldBegin('rif_id', TType.I64, 1)
      oprot.writeI64(self.rif_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rif_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_router_interface_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_router_interface_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_router_interface_attribute_args:
  """
  Attributes:
   - rif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rif_id', None, None, ), # 1
  )

  def __init__(self, rif_id=None,):
    self.rif_id = rif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_args')
    if self.rif_id is not None:
      oprot.writeFieldBegin('rif_id', TType.I64, 1)
      oprot.writeI64(self.rif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_router_interface_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_router_interface_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = sai_thrift_attribute_t()
            _elem138.read(iprot)
            self.thrift_attr_list.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter139 in self.thrift_attr_list:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_args:
  """
  Attributes:
   - next_hop_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_id', None, None, ), # 1
  )

  def __init__(self, next_hop_id=None,):
    self.next_hop_id = next_hop_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_args')
    if self.next_hop_id is not None:
      oprot.writeFieldBegin('next_hop_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_attribute_args:
  """
  Attributes:
   - next_hop_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_id', None, None, ), # 1
  )

  def __init__(self, next_hop_id=None,):
    self.next_hop_id = next_hop_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_args')
    if self.next_hop_id is not None:
      oprot.writeFieldBegin('next_hop_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = sai_thrift_attribute_t()
            _elem145.read(iprot)
            self.thrift_attr_list.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter146 in self.thrift_attr_list:
        iter146.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_args:
  """
  Attributes:
   - nhop_group_oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ), # 1
  )

  def __init__(self, nhop_group_oid=None,):
    self.nhop_group_oid = nhop_group_oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.nhop_group_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_args')
    if self.nhop_group_oid is not None:
      oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
      oprot.writeI64(self.nhop_group_oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nhop_group_oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_next_hop_group_attribute_args:
  """
  Attributes:
   - nhop_group_oid
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, nhop_group_oid=None, thrift_attr=None,):
    self.nhop_group_oid = nhop_group_oid
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.nhop_group_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_args')
    if self.nhop_group_oid is not None:
      oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
      oprot.writeI64(self.nhop_group_oid)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nhop_group_oid)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_next_hop_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_next_hop_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_group_attribute_args:
  """
  Attributes:
   - nhop_group_oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'nhop_group_oid', None, None, ), # 1
  )

  def __init__(self, nhop_group_oid=None,):
    self.nhop_group_oid = nhop_group_oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.nhop_group_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_args')
    if self.nhop_group_oid is not None:
      oprot.writeFieldBegin('nhop_group_oid', TType.I64, 1)
      oprot.writeI64(self.nhop_group_oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nhop_group_oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = sai_thrift_attribute_t()
            _elem152.read(iprot)
            self.thrift_attr_list.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter153 in self.thrift_attr_list:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_member_args:
  """
  Attributes:
   - nhop_group_member_oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'nhop_group_member_oid', None, None, ), # 1
  )

  def __init__(self, nhop_group_member_oid=None,):
    self.nhop_group_member_oid = nhop_group_member_oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.nhop_group_member_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_args')
    if self.nhop_group_member_oid is not None:
      oprot.writeFieldBegin('nhop_group_member_oid', TType.I64, 1)
      oprot.writeI64(self.nhop_group_member_oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nhop_group_member_oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_group_member_attribute_args:
  """
  Attributes:
   - nhop_group_member_oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'nhop_group_member_oid', None, None, ), # 1
  )

  def __init__(self, nhop_group_member_oid=None,):
    self.nhop_group_member_oid = nhop_group_member_oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.nhop_group_member_oid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_args')
    if self.nhop_group_member_oid is not None:
      oprot.writeFieldBegin('nhop_group_member_oid', TType.I64, 1)
      oprot.writeI64(self.nhop_group_member_oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.nhop_group_member_oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_next_hop_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_next_hop_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = sai_thrift_attribute_t()
            _elem159.read(iprot)
            self.thrift_attr_list.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter160 in self.thrift_attr_list:
        iter160.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_args:
  """
  Attributes:
   - lag_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_id', None, None, ), # 1
  )

  def __init__(self, lag_id=None,):
    self.lag_id = lag_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_args')
    if self.lag_id is not None:
      oprot.writeFieldBegin('lag_id', TType.I64, 1)
      oprot.writeI64(self.lag_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_lag_attribute_args:
  """
  Attributes:
   - lag_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, lag_id=None, thrift_attr=None,):
    self.lag_id = lag_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_lag_attribute_args')
    if self.lag_id is not None:
      oprot.writeFieldBegin('lag_id', TType.I64, 1)
      oprot.writeI64(self.lag_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_lag_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_lag_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_lag_attribute_args:
  """
  Attributes:
   - lag_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_id', None, None, ), # 1
  )

  def __init__(self, lag_id=None,):
    self.lag_id = lag_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_lag_attribute_args')
    if self.lag_id is not None:
      oprot.writeFieldBegin('lag_id', TType.I64, 1)
      oprot.writeI64(self.lag_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_lag_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_lag_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = sai_thrift_attribute_t()
            _elem166.read(iprot)
            self.thrift_attr_list.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter167 in self.thrift_attr_list:
        iter167.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_member_args:
  """
  Attributes:
   - lag_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_member_id', None, None, ), # 1
  )

  def __init__(self, lag_member_id=None,):
    self.lag_member_id = lag_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_member_args')
    if self.lag_member_id is not None:
      oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
      oprot.writeI64(self.lag_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_lag_member_attribute_args:
  """
  Attributes:
   - lag_member_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_member_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, lag_member_id=None, thrift_attr=None,):
    self.lag_member_id = lag_member_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_args')
    if self.lag_member_id is not None:
      oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
      oprot.writeI64(self.lag_member_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_member_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_lag_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_lag_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_lag_member_attribute_args:
  """
  Attributes:
   - lag_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_member_id', None, None, ), # 1
  )

  def __init__(self, lag_member_id=None,):
    self.lag_member_id = lag_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_args')
    if self.lag_member_id is not None:
      oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
      oprot.writeI64(self.lag_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_lag_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_lag_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_stp_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = sai_thrift_attribute_t()
            _elem173.read(iprot)
            self.thrift_attr_list.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_stp_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter174 in self.thrift_attr_list:
        iter174.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_stp_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_stp_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_stp_entry_args:
  """
  Attributes:
   - stp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
  )

  def __init__(self, stp_id=None,):
    self.stp_id = stp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_stp_entry_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_stp_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_stp_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_stp_port_state_args:
  """
  Attributes:
   - stp_id
   - port_id
   - stp_port_state
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
    (2, TType.I64, 'port_id', None, None, ), # 2
    (3, TType.BYTE, 'stp_port_state', None, None, ), # 3
  )

  def __init__(self, stp_id=None, port_id=None, stp_port_state=None,):
    self.stp_id = stp_id
    self.port_id = port_id
    self.stp_port_state = stp_port_state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.stp_port_state = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_stp_port_state_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 2)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.stp_port_state is not None:
      oprot.writeFieldBegin('stp_port_state', TType.BYTE, 3)
      oprot.writeByte(self.stp_port_state)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.stp_port_state)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_stp_port_state_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_stp_port_state_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_stp_port_state_args:
  """
  Attributes:
   - stp_id
   - port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
    (2, TType.I64, 'port_id', None, None, ), # 2
  )

  def __init__(self, stp_id=None, port_id=None,):
    self.stp_id = stp_id
    self.port_id = port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_stp_port_state_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 2)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    value = (value * 31) ^ hash(self.port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_stp_port_state_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BYTE, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BYTE:
          self.success = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_stp_port_state_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BYTE, 0)
      oprot.writeByte(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_neighbor_entry_args:
  """
  Attributes:
   - thrift_neighbor_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_neighbor_entry=None, thrift_attr_list=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype178, _size175) = iprot.readListBegin()
          for _i179 in xrange(_size175):
            _elem180 = sai_thrift_attribute_t()
            _elem180.read(iprot)
            self.thrift_attr_list.append(_elem180)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_neighbor_entry_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter181 in self.thrift_attr_list:
        iter181.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_neighbor_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_neighbor_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_neighbor_entry_args:
  """
  Attributes:
   - thrift_neighbor_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_neighbor_entry=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_neighbor_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_all_neighbor_entry_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entry_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_all_neighbor_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_all_neighbor_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_neighbor_entry_attribute_args:
  """
  Attributes:
   - thrift_neighbor_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_neighbor_entry=None, thrift_attr=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_neighbor_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_neighbor_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_neighbor_entry_attribute_args:
  """
  Attributes:
   - thrift_neighbor_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_neighbor_entry=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_neighbor_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_neighbor_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_switch_attribute_args:
  """
  Attributes:
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 1
  )

  def __init__(self, thrift_attr_ids=None,):
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype185, _size182) = iprot.readListBegin()
          for _i186 in xrange(_size182):
            _elem187 = iprot.readI32();
            self.thrift_attr_ids.append(_elem187)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_switch_attribute_args')
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter188 in self.thrift_attr_ids:
        oprot.writeI32(iter188)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_switch_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_switch_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_list_by_front_port_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_list_by_front_port_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_list_by_front_port_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_list_by_front_port_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_port_id_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_port_id_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_port_id_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_port_id_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_trap_group_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_trap_group_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_trap_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_trap_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_router_id_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_router_id_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_router_id_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_router_id_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_1q_bridge_id_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_1q_bridge_id_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_1q_bridge_id_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_1q_bridge_id_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_vlan_id_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_vlan_id_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_default_vlan_id_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_default_vlan_id_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_id_by_front_port_args:
  """
  Attributes:
   - port_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'port_name', None, None, ), # 1
  )

  def __init__(self, port_name=None,):
    self.port_name = port_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.port_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_id_by_front_port_args')
    if self.port_name is not None:
      oprot.writeFieldBegin('port_name', TType.STRING, 1)
      oprot.writeString(self.port_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_port_id_by_front_port_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_port_id_by_front_port_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_switch_attribute_args:
  """
  Attributes:
   - attribute
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'attribute', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 1
  )

  def __init__(self, attribute=None,):
    self.attribute = attribute

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.attribute = sai_thrift_attribute_t()
          self.attribute.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_switch_attribute_args')
    if self.attribute is not None:
      oprot.writeFieldBegin('attribute', TType.STRUCT, 1)
      self.attribute.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.attribute)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_switch_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_switch_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_switch_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_switch_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_switch_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_switch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_switch_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_switch_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_switch_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_switch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_bridge_port_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype192, _size189) = iprot.readListBegin()
          for _i193 in xrange(_size189):
            _elem194 = sai_thrift_attribute_t()
            _elem194.read(iprot)
            self.thrift_attr_list.append(_elem194)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_bridge_port_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter195 in self.thrift_attr_list:
        iter195.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_bridge_port_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_bridge_port_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_bridge_port_args:
  """
  Attributes:
   - bridge_port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_port_id', None, None, ), # 1
  )

  def __init__(self, bridge_port_id=None,):
    self.bridge_port_id = bridge_port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_bridge_port_args')
    if self.bridge_port_id is not None:
      oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
      oprot.writeI64(self.bridge_port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_bridge_port_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_bridge_port_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_port_list_args:
  """
  Attributes:
   - bridge_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_id', None, None, ), # 1
  )

  def __init__(self, bridge_id=None,):
    self.bridge_id = bridge_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_port_list_args')
    if self.bridge_id is not None:
      oprot.writeFieldBegin('bridge_id', TType.I64, 1)
      oprot.writeI64(self.bridge_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_port_list_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_port_list_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_port_attribute_args:
  """
  Attributes:
   - bridge_port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_port_id', None, None, ), # 1
  )

  def __init__(self, bridge_port_id=None,):
    self.bridge_port_id = bridge_port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_args')
    if self.bridge_port_id is not None:
      oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
      oprot.writeI64(self.bridge_port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_port_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_port_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_bridge_port_attribute_args:
  """
  Attributes:
   - bridge_port_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_port_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, bridge_port_id=None, thrift_attr=None,):
    self.bridge_port_id = bridge_port_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_port_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_args')
    if self.bridge_port_id is not None:
      oprot.writeFieldBegin('bridge_port_id', TType.I64, 1)
      oprot.writeI64(self.bridge_port_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_port_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_bridge_port_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_bridge_port_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_bridge_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype199, _size196) = iprot.readListBegin()
          for _i200 in xrange(_size196):
            _elem201 = sai_thrift_attribute_t()
            _elem201.read(iprot)
            self.thrift_attr_list.append(_elem201)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_bridge_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter202 in self.thrift_attr_list:
        iter202.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_bridge_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_bridge_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_bridge_args:
  """
  Attributes:
   - bridge_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_id', None, None, ), # 1
  )

  def __init__(self, bridge_id=None,):
    self.bridge_id = bridge_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_bridge_args')
    if self.bridge_id is not None:
      oprot.writeFieldBegin('bridge_id', TType.I64, 1)
      oprot.writeI64(self.bridge_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_bridge_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_bridge_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_attribute_args:
  """
  Attributes:
   - bridge_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_id', None, None, ), # 1
  )

  def __init__(self, bridge_id=None,):
    self.bridge_id = bridge_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_attribute_args')
    if self.bridge_id is not None:
      oprot.writeFieldBegin('bridge_id', TType.I64, 1)
      oprot.writeI64(self.bridge_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_bridge_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_bridge_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_bridge_attribute_args:
  """
  Attributes:
   - bridge_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'bridge_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, bridge_id=None, thrift_attr=None,):
    self.bridge_id = bridge_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.bridge_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_bridge_attribute_args')
    if self.bridge_id is not None:
      oprot.writeFieldBegin('bridge_id', TType.I64, 1)
      oprot.writeI64(self.bridge_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.bridge_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_bridge_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_bridge_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype206, _size203) = iprot.readListBegin()
          for _i207 in xrange(_size203):
            _elem208 = sai_thrift_attribute_t()
            _elem208.read(iprot)
            self.thrift_attr_list.append(_elem208)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter209 in self.thrift_attr_list:
        iter209.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_args:
  """
  Attributes:
   - thrift_hif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ), # 1
  )

  def __init__(self, thrift_hif_id=None,):
    self.thrift_hif_id = thrift_hif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_args')
    if self.thrift_hif_id is not None:
      oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_attribute_args:
  """
  Attributes:
   - thrift_hif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ), # 1
  )

  def __init__(self, thrift_hif_id=None,):
    self.thrift_hif_id = thrift_hif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_attribute_args')
    if self.thrift_hif_id is not None:
      oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_attribute_args:
  """
  Attributes:
   - thrift_hif_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hif_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_hif_id=None, thrift_attr=None,):
    self.thrift_hif_id = thrift_hif_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hif_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_attribute_args')
    if self.thrift_hif_id is not None:
      oprot.writeFieldBegin('thrift_hif_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hif_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hif_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_table_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype213, _size210) = iprot.readListBegin()
          for _i214 in xrange(_size210):
            _elem215 = sai_thrift_attribute_t()
            _elem215.read(iprot)
            self.thrift_attr_list.append(_elem215)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter216 in self.thrift_attr_list:
        iter216.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_table_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_table_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_table_entry_args:
  """
  Attributes:
   - thrift_hostif_table_entry_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_table_entry_id=None,):
    self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_args')
    if self.thrift_hostif_table_entry_id is not None:
      oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_table_entry_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_table_entry_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_table_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_table_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_table_entry_attribute_args:
  """
  Attributes:
   - thrift_hostif_table_entry_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_table_entry_id=None,):
    self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_args')
    if self.thrift_hostif_table_entry_id is not None:
      oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_table_entry_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_table_entry_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_table_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_table_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_table_entry_attribute_args:
  """
  Attributes:
   - thrift_hostif_table_entry_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_table_entry_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_hostif_table_entry_id=None, thrift_attr=None,):
    self.thrift_hostif_table_entry_id = thrift_hostif_table_entry_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_args')
    if self.thrift_hostif_table_entry_id is not None:
      oprot.writeFieldBegin('thrift_hostif_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_table_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_table_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_table_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_table_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype220, _size217) = iprot.readListBegin()
          for _i221 in xrange(_size217):
            _elem222 = sai_thrift_attribute_t()
            _elem222.read(iprot)
            self.thrift_attr_list.append(_elem222)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter223 in self.thrift_attr_list:
        iter223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_group_args:
  """
  Attributes:
   - thrift_hostif_trap_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_trap_group_id=None,):
    self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_args')
    if self.thrift_hostif_trap_group_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_trap_group_attribute_args:
  """
  Attributes:
   - thrift_hostif_trap_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_trap_group_id=None,):
    self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_args')
    if self.thrift_hostif_trap_group_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_trap_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_trap_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_group_attribute_args:
  """
  Attributes:
   - thrift_hostif_trap_group_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_group_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_hostif_trap_group_id=None, thrift_attr=None,):
    self.thrift_hostif_trap_group_id = thrift_hostif_trap_group_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_args')
    if self.thrift_hostif_trap_group_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_group_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_group_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_group_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype227, _size224) = iprot.readListBegin()
          for _i228 in xrange(_size224):
            _elem229 = sai_thrift_attribute_t()
            _elem229.read(iprot)
            self.thrift_attr_list.append(_elem229)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter230 in self.thrift_attr_list:
        iter230.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_args:
  """
  Attributes:
   - thrift_hostif_trap_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_trap_id=None,):
    self.thrift_hostif_trap_id = thrift_hostif_trap_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_args')
    if self.thrift_hostif_trap_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_trap_attribute_args:
  """
  Attributes:
   - thrift_hostif_trap_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ), # 1
  )

  def __init__(self, thrift_hostif_trap_id=None,):
    self.thrift_hostif_trap_id = thrift_hostif_trap_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_args')
    if self.thrift_hostif_trap_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hostif_trap_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hostif_trap_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_attribute_args:
  """
  Attributes:
   - thrift_hostif_trap_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hostif_trap_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_hostif_trap_id=None, thrift_attr=None,):
    self.thrift_hostif_trap_id = thrift_hostif_trap_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hostif_trap_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_args')
    if self.thrift_hostif_trap_id is not None:
      oprot.writeFieldBegin('thrift_hostif_trap_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hostif_trap_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hostif_trap_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype234, _size231) = iprot.readListBegin()
          for _i235 in xrange(_size231):
            _elem236 = sai_thrift_attribute_t()
            _elem236.read(iprot)
            self.thrift_attr_list.append(_elem236)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter237 in self.thrift_attr_list:
        iter237.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_args:
  """
  Attributes:
   - acl_table_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_id', None, None, ), # 1
  )

  def __init__(self, acl_table_id=None,):
    self.acl_table_id = acl_table_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_args')
    if self.acl_table_id is not None:
      oprot.writeFieldBegin('acl_table_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_attribute_args:
  """
  Attributes:
   - acl_table_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, acl_table_id=None, thrift_attr_ids=None,):
    self.acl_table_id = acl_table_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype241, _size238) = iprot.readListBegin()
          for _i242 in xrange(_size238):
            _elem243 = iprot.readI32();
            self.thrift_attr_ids.append(_elem243)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_args')
    if self.acl_table_id is not None:
      oprot.writeFieldBegin('acl_table_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter244 in self.thrift_attr_ids:
        oprot.writeI32(iter244)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype248, _size245) = iprot.readListBegin()
          for _i249 in xrange(_size245):
            _elem250 = sai_thrift_attribute_t()
            _elem250.read(iprot)
            self.thrift_attr_list.append(_elem250)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter251 in self.thrift_attr_list:
        iter251.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_entry_args:
  """
  Attributes:
   - acl_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_entry', None, None, ), # 1
  )

  def __init__(self, acl_entry=None,):
    self.acl_entry = acl_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_entry = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_entry_args')
    if self.acl_entry is not None:
      oprot.writeFieldBegin('acl_entry', TType.I64, 1)
      oprot.writeI64(self.acl_entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_acl_entry_attribute_args:
  """
  Attributes:
   - acl_entry_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_entry_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, acl_entry_id=None, thrift_attr=None,):
    self.acl_entry_id = acl_entry_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_args')
    if self.acl_entry_id is not None:
      oprot.writeFieldBegin('acl_entry_id', TType.I64, 1)
      oprot.writeI64(self.acl_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_acl_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_acl_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_entry_attribute_args:
  """
  Attributes:
   - acl_entry_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_entry_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, acl_entry_id=None, thrift_attr_ids=None,):
    self.acl_entry_id = acl_entry_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype255, _size252) = iprot.readListBegin()
          for _i256 in xrange(_size252):
            _elem257 = iprot.readI32();
            self.thrift_attr_ids.append(_elem257)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_args')
    if self.acl_entry_id is not None:
      oprot.writeFieldBegin('acl_entry_id', TType.I64, 1)
      oprot.writeI64(self.acl_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter258 in self.thrift_attr_ids:
        oprot.writeI32(iter258)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype262, _size259) = iprot.readListBegin()
          for _i263 in xrange(_size259):
            _elem264 = sai_thrift_attribute_t()
            _elem264.read(iprot)
            self.thrift_attr_list.append(_elem264)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter265 in self.thrift_attr_list:
        iter265.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_group_args:
  """
  Attributes:
   - acl_table_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_group_id', None, None, ), # 1
  )

  def __init__(self, acl_table_group_id=None,):
    self.acl_table_group_id = acl_table_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_group_args')
    if self.acl_table_group_id is not None:
      oprot.writeFieldBegin('acl_table_group_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_group_attribute_args:
  """
  Attributes:
   - acl_table_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_group_id', None, None, ), # 1
  )

  def __init__(self, acl_table_group_id=None,):
    self.acl_table_group_id = acl_table_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_args')
    if self.acl_table_group_id is not None:
      oprot.writeFieldBegin('acl_table_group_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_group_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype269, _size266) = iprot.readListBegin()
          for _i270 in xrange(_size266):
            _elem271 = sai_thrift_attribute_t()
            _elem271.read(iprot)
            self.thrift_attr_list.append(_elem271)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter272 in self.thrift_attr_list:
        iter272.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_group_member_args:
  """
  Attributes:
   - acl_table_group_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_group_member_id', None, None, ), # 1
  )

  def __init__(self, acl_table_group_member_id=None,):
    self.acl_table_group_member_id = acl_table_group_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_group_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_args')
    if self.acl_table_group_member_id is not None:
      oprot.writeFieldBegin('acl_table_group_member_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_group_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_group_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_table_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_table_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_group_member_attribute_args:
  """
  Attributes:
   - acl_table_group_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_group_member_id', None, None, ), # 1
  )

  def __init__(self, acl_table_group_member_id=None,):
    self.acl_table_group_member_id = acl_table_group_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_group_member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_args')
    if self.acl_table_group_member_id is not None:
      oprot.writeFieldBegin('acl_table_group_member_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_group_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_group_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_table_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_table_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_counter_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype276, _size273) = iprot.readListBegin()
          for _i277 in xrange(_size273):
            _elem278 = sai_thrift_attribute_t()
            _elem278.read(iprot)
            self.thrift_attr_list.append(_elem278)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_counter_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter279 in self.thrift_attr_list:
        iter279.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_counter_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_counter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_counter_args:
  """
  Attributes:
   - acl_counter_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_counter_id', None, None, ), # 1
  )

  def __init__(self, acl_counter_id=None,):
    self.acl_counter_id = acl_counter_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_counter_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_counter_args')
    if self.acl_counter_id is not None:
      oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
      oprot.writeI64(self.acl_counter_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_counter_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_acl_counter_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_acl_counter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_counter_attribute_args:
  """
  Attributes:
   - acl_counter_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_counter_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, acl_counter_id=None, thrift_attr_ids=None,):
    self.acl_counter_id = acl_counter_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_counter_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype283, _size280) = iprot.readListBegin()
          for _i284 in xrange(_size280):
            _elem285 = iprot.readI32();
            self.thrift_attr_ids.append(_elem285)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_args')
    if self.acl_counter_id is not None:
      oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
      oprot.writeI64(self.acl_counter_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter286 in self.thrift_attr_ids:
        oprot.writeI32(iter286)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_counter_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_counter_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(sai_thrift_attribute_value_t, sai_thrift_attribute_value_t.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype290, _size287) = iprot.readListBegin()
          for _i291 in xrange(_size287):
            _elem292 = sai_thrift_attribute_value_t()
            _elem292.read(iprot)
            self.success.append(_elem292)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter293 in self.success:
        iter293.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hash_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype297, _size294) = iprot.readListBegin()
          for _i298 in xrange(_size294):
            _elem299 = sai_thrift_attribute_t()
            _elem299.read(iprot)
            self.thrift_attr_list.append(_elem299)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hash_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter300 in self.thrift_attr_list:
        iter300.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hash_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hash_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hash_args:
  """
  Attributes:
   - hash_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'hash_id', None, None, ), # 1
  )

  def __init__(self, hash_id=None,):
    self.hash_id = hash_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.hash_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hash_args')
    if self.hash_id is not None:
      oprot.writeFieldBegin('hash_id', TType.I64, 1)
      oprot.writeI64(self.hash_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hash_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hash_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hash_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hash_attribute_args:
  """
  Attributes:
   - thrift_hash_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hash_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_hash_id=None, thrift_attr=None,):
    self.thrift_hash_id = thrift_hash_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hash_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hash_attribute_args')
    if self.thrift_hash_id is not None:
      oprot.writeFieldBegin('thrift_hash_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hash_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hash_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hash_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hash_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hash_attribute_args:
  """
  Attributes:
   - thrift_hash_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_hash_id', None, None, ), # 1
  )

  def __init__(self, thrift_hash_id=None,):
    self.thrift_hash_id = thrift_hash_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_hash_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hash_attribute_args')
    if self.thrift_hash_id is not None:
      oprot.writeFieldBegin('thrift_hash_id', TType.I64, 1)
      oprot.writeI64(self.thrift_hash_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_hash_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_hash_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_hash_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype304, _size301) = iprot.readListBegin()
          for _i305 in xrange(_size301):
            _elem306 = sai_thrift_attribute_t()
            _elem306.read(iprot)
            self.thrift_attr_list.append(_elem306)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter307 in self.thrift_attr_list:
        iter307.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_group_args:
  """
  Attributes:
   - udf_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'udf_group_id', None, None, ), # 1
  )

  def __init__(self, udf_group_id=None,):
    self.udf_group_id = udf_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.udf_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_group_args')
    if self.udf_group_id is not None:
      oprot.writeFieldBegin('udf_group_id', TType.I64, 1)
      oprot.writeI64(self.udf_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.udf_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_group_attribute_args:
  """
  Attributes:
   - thrift_udf_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_udf_group_id', None, None, ), # 1
  )

  def __init__(self, thrift_udf_group_id=None,):
    self.thrift_udf_group_id = thrift_udf_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_udf_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_args')
    if self.thrift_udf_group_id is not None:
      oprot.writeFieldBegin('thrift_udf_group_id', TType.I64, 1)
      oprot.writeI64(self.thrift_udf_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_udf_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_match_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype311, _size308) = iprot.readListBegin()
          for _i312 in xrange(_size308):
            _elem313 = sai_thrift_attribute_t()
            _elem313.read(iprot)
            self.thrift_attr_list.append(_elem313)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_match_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter314 in self.thrift_attr_list:
        iter314.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_match_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_match_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_match_args:
  """
  Attributes:
   - udf_match_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'udf_match_id', None, None, ), # 1
  )

  def __init__(self, udf_match_id=None,):
    self.udf_match_id = udf_match_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.udf_match_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_match_args')
    if self.udf_match_id is not None:
      oprot.writeFieldBegin('udf_match_id', TType.I64, 1)
      oprot.writeI64(self.udf_match_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.udf_match_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_match_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_match_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_match_attribute_args:
  """
  Attributes:
   - thrift_udf_match_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_udf_match_id', None, None, ), # 1
  )

  def __init__(self, thrift_udf_match_id=None,):
    self.thrift_udf_match_id = thrift_udf_match_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_udf_match_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_args')
    if self.thrift_udf_match_id is not None:
      oprot.writeFieldBegin('thrift_udf_match_id', TType.I64, 1)
      oprot.writeI64(self.thrift_udf_match_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_udf_match_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_match_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_match_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype318, _size315) = iprot.readListBegin()
          for _i319 in xrange(_size315):
            _elem320 = sai_thrift_attribute_t()
            _elem320.read(iprot)
            self.thrift_attr_list.append(_elem320)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter321 in self.thrift_attr_list:
        iter321.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_udf_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_udf_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_args:
  """
  Attributes:
   - udf_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'udf_id', None, None, ), # 1
  )

  def __init__(self, udf_id=None,):
    self.udf_id = udf_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.udf_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_args')
    if self.udf_id is not None:
      oprot.writeFieldBegin('udf_id', TType.I64, 1)
      oprot.writeI64(self.udf_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.udf_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_udf_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_udf_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_udf_attribute_args:
  """
  Attributes:
   - thrift_udf_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_udf_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_udf_id=None, thrift_attr=None,):
    self.thrift_udf_id = thrift_udf_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_udf_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_udf_attribute_args')
    if self.thrift_udf_id is not None:
      oprot.writeFieldBegin('thrift_udf_id', TType.I64, 1)
      oprot.writeI64(self.thrift_udf_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_udf_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_udf_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_udf_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_attribute_args:
  """
  Attributes:
   - thrift_udf_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_udf_id', None, None, ), # 1
  )

  def __init__(self, thrift_udf_id=None,):
    self.thrift_udf_id = thrift_udf_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_udf_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_attribute_args')
    if self.thrift_udf_id is not None:
      oprot.writeFieldBegin('thrift_udf_id', TType.I64, 1)
      oprot.writeI64(self.thrift_udf_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_udf_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_udf_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_udf_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mirror_session_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype325, _size322) = iprot.readListBegin()
          for _i326 in xrange(_size322):
            _elem327 = sai_thrift_attribute_t()
            _elem327.read(iprot)
            self.thrift_attr_list.append(_elem327)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mirror_session_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter328 in self.thrift_attr_list:
        iter328.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mirror_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mirror_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mirror_session_args:
  """
  Attributes:
   - session_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'session_id', None, None, ), # 1
  )

  def __init__(self, session_id=None,):
    self.session_id = session_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.session_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mirror_session_args')
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.I64, 1)
      oprot.writeI64(self.session_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.session_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mirror_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mirror_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_mirror_attribute_args:
  """
  Attributes:
   - thrift_mirror_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_mirror_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_mirror_id=None, thrift_attr=None,):
    self.thrift_mirror_id = thrift_mirror_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_mirror_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_mirror_attribute_args')
    if self.thrift_mirror_id is not None:
      oprot.writeFieldBegin('thrift_mirror_id', TType.I64, 1)
      oprot.writeI64(self.thrift_mirror_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mirror_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_mirror_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_mirror_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_mirror_attribute_args:
  """
  Attributes:
   - thrift_mirror_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_mirror_id', None, None, ), # 1
  )

  def __init__(self, thrift_mirror_id=None,):
    self.thrift_mirror_id = thrift_mirror_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_mirror_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_mirror_attribute_args')
    if self.thrift_mirror_id is not None:
      oprot.writeFieldBegin('thrift_mirror_id', TType.I64, 1)
      oprot.writeI64(self.thrift_mirror_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mirror_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_mirror_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_mirror_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_inseg_entry_args:
  """
  Attributes:
   - thrift_inseg_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', (sai_thrift_inseg_entry_t, sai_thrift_inseg_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_inseg_entry=None, thrift_attr_list=None,):
    self.thrift_inseg_entry = thrift_inseg_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
          self.thrift_inseg_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype332, _size329) = iprot.readListBegin()
          for _i333 in xrange(_size329):
            _elem334 = sai_thrift_attribute_t()
            _elem334.read(iprot)
            self.thrift_attr_list.append(_elem334)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_inseg_entry_args')
    if self.thrift_inseg_entry is not None:
      oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
      self.thrift_inseg_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter335 in self.thrift_attr_list:
        iter335.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_inseg_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_inseg_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_inseg_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_inseg_entry_args:
  """
  Attributes:
   - thrift_inseg_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', (sai_thrift_inseg_entry_t, sai_thrift_inseg_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_inseg_entry=None,):
    self.thrift_inseg_entry = thrift_inseg_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
          self.thrift_inseg_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_inseg_entry_args')
    if self.thrift_inseg_entry is not None:
      oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
      self.thrift_inseg_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_inseg_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_inseg_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_inseg_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_inseg_entry_attribute_args:
  """
  Attributes:
   - thrift_inseg_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', (sai_thrift_inseg_entry_t, sai_thrift_inseg_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_inseg_entry=None, thrift_attr=None,):
    self.thrift_inseg_entry = thrift_inseg_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
          self.thrift_inseg_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_args')
    if self.thrift_inseg_entry is not None:
      oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
      self.thrift_inseg_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_inseg_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_inseg_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_inseg_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_inseg_entry_attribute_args:
  """
  Attributes:
   - thrift_inseg_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_inseg_entry', (sai_thrift_inseg_entry_t, sai_thrift_inseg_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_inseg_entry=None,):
    self.thrift_inseg_entry = thrift_inseg_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_inseg_entry = sai_thrift_inseg_entry_t()
          self.thrift_inseg_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_args')
    if self.thrift_inseg_entry is not None:
      oprot.writeFieldBegin('thrift_inseg_entry', TType.STRUCT, 1)
      self.thrift_inseg_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_inseg_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_inseg_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_inseg_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_dump_log_args:
  """
  Attributes:
   - dump_file_name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dump_file_name', None, None, ), # 1
  )

  def __init__(self, dump_file_name=None,):
    self.dump_file_name = dump_file_name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dump_file_name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_dump_log_args')
    if self.dump_file_name is not None:
      oprot.writeFieldBegin('dump_file_name', TType.STRING, 1)
      oprot.writeString(self.dump_file_name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dump_file_name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_dump_log_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_dump_log_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_policer_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype339, _size336) = iprot.readListBegin()
          for _i340 in xrange(_size336):
            _elem341 = sai_thrift_attribute_t()
            _elem341.read(iprot)
            self.thrift_attr_list.append(_elem341)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_policer_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter342 in self.thrift_attr_list:
        iter342.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_policer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_policer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_policer_args:
  """
  Attributes:
   - thrift_policer_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ), # 1
  )

  def __init__(self, thrift_policer_id=None,):
    self.thrift_policer_id = thrift_policer_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_policer_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_policer_args')
    if self.thrift_policer_id is not None:
      oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
      oprot.writeI64(self.thrift_policer_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_policer_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_policer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_policer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_attribute_args:
  """
  Attributes:
   - thrift_policer_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ), # 1
  )

  def __init__(self, thrift_policer_id=None,):
    self.thrift_policer_id = thrift_policer_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_policer_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_attribute_args')
    if self.thrift_policer_id is not None:
      oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
      oprot.writeI64(self.thrift_policer_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_policer_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_policer_attribute_args:
  """
  Attributes:
   - thrift_policer_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_policer_id=None, thrift_attr=None,):
    self.thrift_policer_id = thrift_policer_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_policer_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_policer_attribute_args')
    if self.thrift_policer_id is not None:
      oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
      oprot.writeI64(self.thrift_policer_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_policer_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_policer_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_policer_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_stats_args:
  """
  Attributes:
   - thrift_policer_id
   - thrift_counter_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, thrift_policer_id=None, thrift_counter_ids=None,):
    self.thrift_policer_id = thrift_policer_id
    self.thrift_counter_ids = thrift_counter_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_policer_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_counter_ids = []
          (_etype346, _size343) = iprot.readListBegin()
          for _i347 in xrange(_size343):
            _elem348 = iprot.readI32();
            self.thrift_counter_ids.append(_elem348)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_stats_args')
    if self.thrift_policer_id is not None:
      oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
      oprot.writeI64(self.thrift_policer_id)
      oprot.writeFieldEnd()
    if self.thrift_counter_ids is not None:
      oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
      for iter349 in self.thrift_counter_ids:
        oprot.writeI32(iter349)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_policer_id)
    value = (value * 31) ^ hash(self.thrift_counter_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype353, _size350) = iprot.readListBegin()
          for _i354 in xrange(_size350):
            _elem355 = iprot.readI64();
            self.success.append(_elem355)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter356 in self.success:
        oprot.writeI64(iter356)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_policer_stats_args:
  """
  Attributes:
   - thrift_policer_id
   - thrift_counter_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_policer_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_counter_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, thrift_policer_id=None, thrift_counter_ids=None,):
    self.thrift_policer_id = thrift_policer_id
    self.thrift_counter_ids = thrift_counter_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_policer_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_counter_ids = []
          (_etype360, _size357) = iprot.readListBegin()
          for _i361 in xrange(_size357):
            _elem362 = iprot.readI32();
            self.thrift_counter_ids.append(_elem362)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_policer_stats_args')
    if self.thrift_policer_id is not None:
      oprot.writeFieldBegin('thrift_policer_id', TType.I64, 1)
      oprot.writeI64(self.thrift_policer_id)
      oprot.writeFieldEnd()
    if self.thrift_counter_ids is not None:
      oprot.writeFieldBegin('thrift_counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_counter_ids))
      for iter363 in self.thrift_counter_ids:
        oprot.writeI32(iter363)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_policer_id)
    value = (value * 31) ^ hash(self.thrift_counter_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_policer_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_policer_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_scheduler_profile_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype367, _size364) = iprot.readListBegin()
          for _i368 in xrange(_size364):
            _elem369 = sai_thrift_attribute_t()
            _elem369.read(iprot)
            self.thrift_attr_list.append(_elem369)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_scheduler_profile_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter370 in self.thrift_attr_list:
        iter370.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_scheduler_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_scheduler_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_scheduler_profile_args:
  """
  Attributes:
   - scheduler_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'scheduler_id', None, None, ), # 1
  )

  def __init__(self, scheduler_id=None,):
    self.scheduler_id = scheduler_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.scheduler_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_scheduler_profile_args')
    if self.scheduler_id is not None:
      oprot.writeFieldBegin('scheduler_id', TType.I64, 1)
      oprot.writeI64(self.scheduler_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduler_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_scheduler_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_scheduler_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_scheduler_attribute_args:
  """
  Attributes:
   - thrift_scheduler_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_scheduler_id', None, None, ), # 1
  )

  def __init__(self, thrift_scheduler_id=None,):
    self.thrift_scheduler_id = thrift_scheduler_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_scheduler_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_args')
    if self.thrift_scheduler_id is not None:
      oprot.writeFieldBegin('thrift_scheduler_id', TType.I64, 1)
      oprot.writeI64(self.thrift_scheduler_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_scheduler_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_scheduler_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_scheduler_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_scheduler_attribute_args:
  """
  Attributes:
   - thrift_scheduler_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'thrift_scheduler_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_scheduler_id=None, thrift_attr=None,):
    self.thrift_scheduler_id = thrift_scheduler_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.thrift_scheduler_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_args')
    if self.thrift_scheduler_id is not None:
      oprot.writeFieldBegin('thrift_scheduler_id', TType.I64, 1)
      oprot.writeI64(self.thrift_scheduler_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_scheduler_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_scheduler_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_scheduler_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_scheduler_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype374, _size371) = iprot.readListBegin()
          for _i375 in xrange(_size371):
            _elem376 = sai_thrift_attribute_t()
            _elem376.read(iprot)
            self.thrift_attr_list.append(_elem376)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_scheduler_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter377 in self.thrift_attr_list:
        iter377.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_scheduler_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_scheduler_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_scheduler_group_args:
  """
  Attributes:
   - scheduler_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ), # 1
  )

  def __init__(self, scheduler_group_id=None,):
    self.scheduler_group_id = scheduler_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.scheduler_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_scheduler_group_args')
    if self.scheduler_group_id is not None:
      oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
      oprot.writeI64(self.scheduler_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduler_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_scheduler_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_scheduler_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_scheduler_group_attribute_args:
  """
  Attributes:
   - scheduler_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ), # 1
  )

  def __init__(self, scheduler_group_id=None,):
    self.scheduler_group_id = scheduler_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.scheduler_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_args')
    if self.scheduler_group_id is not None:
      oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
      oprot.writeI64(self.scheduler_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduler_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_scheduler_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_scheduler_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_scheduler_group_attribute_args:
  """
  Attributes:
   - scheduler_group_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'scheduler_group_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, scheduler_group_id=None, thrift_attr=None,):
    self.scheduler_group_id = scheduler_group_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.scheduler_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_args')
    if self.scheduler_group_id is not None:
      oprot.writeFieldBegin('scheduler_group_id', TType.I64, 1)
      oprot.writeI64(self.scheduler_group_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduler_group_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_scheduler_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_scheduler_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_queue_stats_args:
  """
  Attributes:
   - queue_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'queue_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, queue_id=None, counter_ids=None, number_of_counters=None,):
    self.queue_id = queue_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.queue_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype381, _size378) = iprot.readListBegin()
          for _i382 in xrange(_size378):
            _elem383 = iprot.readI32();
            self.counter_ids.append(_elem383)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_queue_stats_args')
    if self.queue_id is not None:
      oprot.writeFieldBegin('queue_id', TType.I64, 1)
      oprot.writeI64(self.queue_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter384 in self.counter_ids:
        oprot.writeI32(iter384)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queue_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_queue_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype388, _size385) = iprot.readListBegin()
          for _i389 in xrange(_size385):
            _elem390 = iprot.readI64();
            self.success.append(_elem390)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_queue_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter391 in self.success:
        oprot.writeI64(iter391)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_queue_stats_args:
  """
  Attributes:
   - queue_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'queue_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, queue_id=None, counter_ids=None, number_of_counters=None,):
    self.queue_id = queue_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.queue_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype395, _size392) = iprot.readListBegin()
          for _i396 in xrange(_size392):
            _elem397 = iprot.readI32();
            self.counter_ids.append(_elem397)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_queue_stats_args')
    if self.queue_id is not None:
      oprot.writeFieldBegin('queue_id', TType.I64, 1)
      oprot.writeI64(self.queue_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter398 in self.counter_ids:
        oprot.writeI32(iter398)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queue_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_queue_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_queue_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_queue_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype402, _size399) = iprot.readListBegin()
          for _i403 in xrange(_size399):
            _elem404 = sai_thrift_attribute_t()
            _elem404.read(iprot)
            self.thrift_attr_list.append(_elem404)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_queue_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter405 in self.thrift_attr_list:
        iter405.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_queue_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_queue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_queue_args:
  """
  Attributes:
   - queue_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'queue_id', None, None, ), # 1
  )

  def __init__(self, queue_id=None,):
    self.queue_id = queue_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.queue_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_queue_args')
    if self.queue_id is not None:
      oprot.writeFieldBegin('queue_id', TType.I64, 1)
      oprot.writeI64(self.queue_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queue_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_queue_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_queue_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_queue_attribute_args:
  """
  Attributes:
   - queue_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'queue_id', None, None, ), # 1
  )

  def __init__(self, queue_id=None,):
    self.queue_id = queue_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.queue_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_queue_attribute_args')
    if self.queue_id is not None:
      oprot.writeFieldBegin('queue_id', TType.I64, 1)
      oprot.writeI64(self.queue_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queue_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_queue_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_queue_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_queue_attribute_args:
  """
  Attributes:
   - queue_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'queue_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, queue_id=None, thrift_attr=None,):
    self.queue_id = queue_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.queue_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_queue_attribute_args')
    if self.queue_id is not None:
      oprot.writeFieldBegin('queue_id', TType.I64, 1)
      oprot.writeI64(self.queue_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.queue_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_queue_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_queue_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_buffer_profile_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype409, _size406) = iprot.readListBegin()
          for _i410 in xrange(_size406):
            _elem411 = sai_thrift_attribute_t()
            _elem411.read(iprot)
            self.thrift_attr_list.append(_elem411)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_buffer_profile_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter412 in self.thrift_attr_list:
        iter412.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_buffer_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_buffer_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_buffer_profile_args:
  """
  Attributes:
   - buffer_profile_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ), # 1
  )

  def __init__(self, buffer_profile_id=None,):
    self.buffer_profile_id = buffer_profile_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.buffer_profile_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_buffer_profile_args')
    if self.buffer_profile_id is not None:
      oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
      oprot.writeI64(self.buffer_profile_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.buffer_profile_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_buffer_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_buffer_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_buffer_profile_attribute_args:
  """
  Attributes:
   - buffer_profile_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ), # 1
  )

  def __init__(self, buffer_profile_id=None,):
    self.buffer_profile_id = buffer_profile_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.buffer_profile_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_args')
    if self.buffer_profile_id is not None:
      oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
      oprot.writeI64(self.buffer_profile_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.buffer_profile_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_buffer_profile_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_buffer_profile_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_buffer_profile_attribute_args:
  """
  Attributes:
   - buffer_profile_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'buffer_profile_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, buffer_profile_id=None, thrift_attr=None,):
    self.buffer_profile_id = buffer_profile_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.buffer_profile_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_args')
    if self.buffer_profile_id is not None:
      oprot.writeFieldBegin('buffer_profile_id', TType.I64, 1)
      oprot.writeI64(self.buffer_profile_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.buffer_profile_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_buffer_profile_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_buffer_profile_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_pool_profile_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype416, _size413) = iprot.readListBegin()
          for _i417 in xrange(_size413):
            _elem418 = sai_thrift_attribute_t()
            _elem418.read(iprot)
            self.thrift_attr_list.append(_elem418)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_pool_profile_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter419 in self.thrift_attr_list:
        iter419.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_pool_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_pool_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_priority_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype423, _size420) = iprot.readListBegin()
          for _i424 in xrange(_size420):
            _elem425 = sai_thrift_attribute_t()
            _elem425.read(iprot)
            self.thrift_attr_list.append(_elem425)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_priority_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter426 in self.thrift_attr_list:
        iter426.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_priority_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_priority_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_priority_group_args:
  """
  Attributes:
   - priority_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'priority_group_id', None, None, ), # 1
  )

  def __init__(self, priority_group_id=None,):
    self.priority_group_id = priority_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.priority_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_priority_group_args')
    if self.priority_group_id is not None:
      oprot.writeFieldBegin('priority_group_id', TType.I64, 1)
      oprot.writeI64(self.priority_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.priority_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_priority_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_priority_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_priority_group_attribute_args:
  """
  Attributes:
   - priority_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'priority_group_id', None, None, ), # 1
  )

  def __init__(self, priority_group_id=None,):
    self.priority_group_id = priority_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.priority_group_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_priority_group_attribute_args')
    if self.priority_group_id is not None:
      oprot.writeFieldBegin('priority_group_id', TType.I64, 1)
      oprot.writeI64(self.priority_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.priority_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_priority_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_priority_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_priority_group_attribute_args:
  """
  Attributes:
   - pg_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'pg_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, pg_id=None, thrift_attr=None,):
    self.pg_id = pg_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.pg_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_priority_group_attribute_args')
    if self.pg_id is not None:
      oprot.writeFieldBegin('pg_id', TType.I64, 1)
      oprot.writeI64(self.pg_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pg_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_priority_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_priority_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_pg_stats_args:
  """
  Attributes:
   - pg_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'pg_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, pg_id=None, counter_ids=None, number_of_counters=None,):
    self.pg_id = pg_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.pg_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype430, _size427) = iprot.readListBegin()
          for _i431 in xrange(_size427):
            _elem432 = iprot.readI32();
            self.counter_ids.append(_elem432)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_pg_stats_args')
    if self.pg_id is not None:
      oprot.writeFieldBegin('pg_id', TType.I64, 1)
      oprot.writeI64(self.pg_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter433 in self.counter_ids:
        oprot.writeI32(iter433)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.pg_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_pg_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype437, _size434) = iprot.readListBegin()
          for _i438 in xrange(_size434):
            _elem439 = iprot.readI64();
            self.success.append(_elem439)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_pg_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter440 in self.success:
        oprot.writeI64(iter440)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_wred_profile_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype444, _size441) = iprot.readListBegin()
          for _i445 in xrange(_size441):
            _elem446 = sai_thrift_attribute_t()
            _elem446.read(iprot)
            self.thrift_attr_list.append(_elem446)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_wred_profile_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter447 in self.thrift_attr_list:
        iter447.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_wred_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_wred_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_wred_profile_args:
  """
  Attributes:
   - wred_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'wred_id', None, None, ), # 1
  )

  def __init__(self, wred_id=None,):
    self.wred_id = wred_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.wred_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_wred_profile_args')
    if self.wred_id is not None:
      oprot.writeFieldBegin('wred_id', TType.I64, 1)
      oprot.writeI64(self.wred_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.wred_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_wred_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_wred_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_wred_attribute_profile_args:
  """
  Attributes:
   - wred_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'wred_id', None, None, ), # 1
  )

  def __init__(self, wred_id=None,):
    self.wred_id = wred_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.wred_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_wred_attribute_profile_args')
    if self.wred_id is not None:
      oprot.writeFieldBegin('wred_id', TType.I64, 1)
      oprot.writeI64(self.wred_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.wred_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_wred_attribute_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_wred_attribute_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_wred_attribute_profile_args:
  """
  Attributes:
   - wred_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'wred_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, wred_id=None, thrift_attr=None,):
    self.wred_id = wred_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.wred_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_wred_attribute_profile_args')
    if self.wred_id is not None:
      oprot.writeFieldBegin('wred_id', TType.I64, 1)
      oprot.writeI64(self.wred_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.wred_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_wred_attribute_profile_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_wred_attribute_profile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_qos_map_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype451, _size448) = iprot.readListBegin()
          for _i452 in xrange(_size448):
            _elem453 = sai_thrift_attribute_t()
            _elem453.read(iprot)
            self.thrift_attr_list.append(_elem453)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_qos_map_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter454 in self.thrift_attr_list:
        iter454.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_qos_map_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_qos_map_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_qos_map_args:
  """
  Attributes:
   - qos_map_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'qos_map_id', None, None, ), # 1
  )

  def __init__(self, qos_map_id=None,):
    self.qos_map_id = qos_map_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.qos_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_qos_map_args')
    if self.qos_map_id is not None:
      oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
      oprot.writeI64(self.qos_map_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.qos_map_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_qos_map_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_qos_map_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_qos_map_attribute_args:
  """
  Attributes:
   - qos_map_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'qos_map_id', None, None, ), # 1
  )

  def __init__(self, qos_map_id=None,):
    self.qos_map_id = qos_map_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.qos_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_args')
    if self.qos_map_id is not None:
      oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
      oprot.writeI64(self.qos_map_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.qos_map_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_qos_map_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_qos_map_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_qos_map_attribute_args:
  """
  Attributes:
   - qos_map_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'qos_map_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, qos_map_id=None, thrift_attr=None,):
    self.qos_map_id = qos_map_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.qos_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_args')
    if self.qos_map_id is not None:
      oprot.writeFieldBegin('qos_map_id', TType.I64, 1)
      oprot.writeI64(self.qos_map_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.qos_map_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_qos_map_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_qos_map_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype458, _size455) = iprot.readListBegin()
          for _i459 in xrange(_size455):
            _elem460 = sai_thrift_attribute_t()
            _elem460.read(iprot)
            self.thrift_attr_list.append(_elem460)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter461 in self.thrift_attr_list:
        iter461.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_group_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_group_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_group_attribute_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_group_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype465, _size462) = iprot.readListBegin()
          for _i466 in xrange(_size462):
            _elem467 = sai_thrift_attribute_t()
            _elem467.read(iprot)
            self.thrift_attr_list.append(_elem467)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter468 in self.thrift_attr_list:
        iter468.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_group_member_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_l2mc_group_member_attribute_args:
  """
  Attributes:
   - member_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, member_id=None, thrift_attr=None,):
    self.member_id = member_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_l2mc_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_l2mc_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_group_member_attribute_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_entry_args:
  """
  Attributes:
   - thrift_l2mc_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', (sai_thrift_l2mc_entry_t, sai_thrift_l2mc_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_l2mc_entry=None, thrift_attr_list=None,):
    self.thrift_l2mc_entry = thrift_l2mc_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
          self.thrift_l2mc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype472, _size469) = iprot.readListBegin()
          for _i473 in xrange(_size469):
            _elem474 = sai_thrift_attribute_t()
            _elem474.read(iprot)
            self.thrift_attr_list.append(_elem474)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_entry_args')
    if self.thrift_l2mc_entry is not None:
      oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
      self.thrift_l2mc_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter475 in self.thrift_attr_list:
        iter475.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_l2mc_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_l2mc_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_l2mc_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_entry_args:
  """
  Attributes:
   - thrift_l2mc_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', (sai_thrift_l2mc_entry_t, sai_thrift_l2mc_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_l2mc_entry=None,):
    self.thrift_l2mc_entry = thrift_l2mc_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
          self.thrift_l2mc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_args')
    if self.thrift_l2mc_entry is not None:
      oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
      self.thrift_l2mc_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_l2mc_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_l2mc_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_l2mc_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_l2mc_entry_attribute_args:
  """
  Attributes:
   - thrift_l2mc_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', (sai_thrift_l2mc_entry_t, sai_thrift_l2mc_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_l2mc_entry=None, thrift_attr=None,):
    self.thrift_l2mc_entry = thrift_l2mc_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
          self.thrift_l2mc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_args')
    if self.thrift_l2mc_entry is not None:
      oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
      self.thrift_l2mc_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_l2mc_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_l2mc_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_l2mc_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_entry_attribute_args:
  """
  Attributes:
   - thrift_l2mc_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_l2mc_entry', (sai_thrift_l2mc_entry_t, sai_thrift_l2mc_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_l2mc_entry=None,):
    self.thrift_l2mc_entry = thrift_l2mc_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_l2mc_entry = sai_thrift_l2mc_entry_t()
          self.thrift_l2mc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_args')
    if self.thrift_l2mc_entry is not None:
      oprot.writeFieldBegin('thrift_l2mc_entry', TType.STRUCT, 1)
      self.thrift_l2mc_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_l2mc_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_l2mc_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_l2mc_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mcast_fdb_entry_args:
  """
  Attributes:
   - thrift_mcast_fdb_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', (sai_thrift_mcast_fdb_entry_t, sai_thrift_mcast_fdb_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_mcast_fdb_entry=None, thrift_attr_list=None,):
    self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
          self.thrift_mcast_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype479, _size476) = iprot.readListBegin()
          for _i480 in xrange(_size476):
            _elem481 = sai_thrift_attribute_t()
            _elem481.read(iprot)
            self.thrift_attr_list.append(_elem481)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_args')
    if self.thrift_mcast_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
      self.thrift_mcast_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter482 in self.thrift_attr_list:
        iter482.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mcast_fdb_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mcast_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mcast_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mcast_fdb_entry_args:
  """
  Attributes:
   - thrift_mcast_fdb_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', (sai_thrift_mcast_fdb_entry_t, sai_thrift_mcast_fdb_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_mcast_fdb_entry=None,):
    self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
          self.thrift_mcast_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_args')
    if self.thrift_mcast_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
      self.thrift_mcast_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mcast_fdb_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mcast_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mcast_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_mcast_fdb_entry_attribute_args:
  """
  Attributes:
   - thrift_mcast_fdb_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', (sai_thrift_mcast_fdb_entry_t, sai_thrift_mcast_fdb_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_mcast_fdb_entry=None, thrift_attr=None,):
    self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
          self.thrift_mcast_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_args')
    if self.thrift_mcast_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
      self.thrift_mcast_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mcast_fdb_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_mcast_fdb_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_mcast_fdb_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_mcast_fdb_entry_attribute_args:
  """
  Attributes:
   - thrift_mcast_fdb_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_mcast_fdb_entry', (sai_thrift_mcast_fdb_entry_t, sai_thrift_mcast_fdb_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_mcast_fdb_entry=None,):
    self.thrift_mcast_fdb_entry = thrift_mcast_fdb_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_mcast_fdb_entry = sai_thrift_mcast_fdb_entry_t()
          self.thrift_mcast_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_args')
    if self.thrift_mcast_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_mcast_fdb_entry', TType.STRUCT, 1)
      self.thrift_mcast_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_mcast_fdb_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_mcast_fdb_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_mcast_fdb_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype486, _size483) = iprot.readListBegin()
          for _i487 in xrange(_size483):
            _elem488 = sai_thrift_attribute_t()
            _elem488.read(iprot)
            self.thrift_attr_list.append(_elem488)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter489 in self.thrift_attr_list:
        iter489.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_group_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_group_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_group_attribute_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_group_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype493, _size490) = iprot.readListBegin()
          for _i494 in xrange(_size490):
            _elem495 = sai_thrift_attribute_t()
            _elem495.read(iprot)
            self.thrift_attr_list.append(_elem495)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter496 in self.thrift_attr_list:
        iter496.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_group_member_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_ipmc_group_member_attribute_args:
  """
  Attributes:
   - member_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, member_id=None, thrift_attr=None,):
    self.member_id = member_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_ipmc_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_ipmc_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_group_member_attribute_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_rpf_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype500, _size497) = iprot.readListBegin()
          for _i501 in xrange(_size497):
            _elem502 = sai_thrift_attribute_t()
            _elem502.read(iprot)
            self.thrift_attr_list.append(_elem502)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_rpf_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter503 in self.thrift_attr_list:
        iter503.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_rpf_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_rpf_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_rpf_group_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_rpf_group_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_rpf_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_rpf_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_rpf_group_attribute_args:
  """
  Attributes:
   - grp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'grp_id', None, None, ), # 1
  )

  def __init__(self, grp_id=None,):
    self.grp_id = grp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.grp_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_args')
    if self.grp_id is not None:
      oprot.writeFieldBegin('grp_id', TType.I64, 1)
      oprot.writeI64(self.grp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.grp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_rpf_group_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_rpf_group_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_rpf_group_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype507, _size504) = iprot.readListBegin()
          for _i508 in xrange(_size504):
            _elem509 = sai_thrift_attribute_t()
            _elem509.read(iprot)
            self.thrift_attr_list.append(_elem509)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_rpf_group_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter510 in self.thrift_attr_list:
        iter510.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_rpf_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_rpf_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_rpf_group_member_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_rpf_group_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_rpf_group_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_rpf_group_member_attribute_args:
  """
  Attributes:
   - member_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, member_id=None, thrift_attr=None,):
    self.member_id = member_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_rpf_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_rpf_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_rpf_group_member_attribute_args:
  """
  Attributes:
   - member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'member_id', None, None, ), # 1
  )

  def __init__(self, member_id=None,):
    self.member_id = member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.member_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_args')
    if self.member_id is not None:
      oprot.writeFieldBegin('member_id', TType.I64, 1)
      oprot.writeI64(self.member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_rpf_group_member_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_rpf_group_member_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_entry_args:
  """
  Attributes:
   - thrift_ipmc_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', (sai_thrift_ipmc_entry_t, sai_thrift_ipmc_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_ipmc_entry=None, thrift_attr_list=None,):
    self.thrift_ipmc_entry = thrift_ipmc_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
          self.thrift_ipmc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype514, _size511) = iprot.readListBegin()
          for _i515 in xrange(_size511):
            _elem516 = sai_thrift_attribute_t()
            _elem516.read(iprot)
            self.thrift_attr_list.append(_elem516)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_entry_args')
    if self.thrift_ipmc_entry is not None:
      oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
      self.thrift_ipmc_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter517 in self.thrift_attr_list:
        iter517.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_ipmc_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_ipmc_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_ipmc_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_entry_args:
  """
  Attributes:
   - thrift_ipmc_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', (sai_thrift_ipmc_entry_t, sai_thrift_ipmc_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_ipmc_entry=None,):
    self.thrift_ipmc_entry = thrift_ipmc_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
          self.thrift_ipmc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_args')
    if self.thrift_ipmc_entry is not None:
      oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
      self.thrift_ipmc_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_ipmc_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ipmc_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ipmc_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_ipmc_entry_attribute_args:
  """
  Attributes:
   - thrift_ipmc_entry
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', (sai_thrift_ipmc_entry_t, sai_thrift_ipmc_entry_t.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, thrift_ipmc_entry=None, thrift_attr=None,):
    self.thrift_ipmc_entry = thrift_ipmc_entry
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
          self.thrift_ipmc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_args')
    if self.thrift_ipmc_entry is not None:
      oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
      self.thrift_ipmc_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_ipmc_entry)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_ipmc_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_ipmc_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_entry_attribute_args:
  """
  Attributes:
   - thrift_ipmc_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_ipmc_entry', (sai_thrift_ipmc_entry_t, sai_thrift_ipmc_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_ipmc_entry=None,):
    self.thrift_ipmc_entry = thrift_ipmc_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_ipmc_entry = sai_thrift_ipmc_entry_t()
          self.thrift_ipmc_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_args')
    if self.thrift_ipmc_entry is not None:
      oprot.writeFieldBegin('thrift_ipmc_entry', TType.STRUCT, 1)
      self.thrift_ipmc_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_ipmc_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_ipmc_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_ipmc_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_samplepacket_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype521, _size518) = iprot.readListBegin()
          for _i522 in xrange(_size518):
            _elem523 = sai_thrift_attribute_t()
            _elem523.read(iprot)
            self.thrift_attr_list.append(_elem523)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_samplepacket_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter524 in self.thrift_attr_list:
        iter524.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_samplepacket_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_samplepacket_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_samplepacket_args:
  """
  Attributes:
   - samplepacket_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'samplepacket_id', None, None, ), # 1
  )

  def __init__(self, samplepacket_id=None,):
    self.samplepacket_id = samplepacket_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.samplepacket_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_samplepacket_args')
    if self.samplepacket_id is not None:
      oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
      oprot.writeI64(self.samplepacket_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.samplepacket_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_samplepacket_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_samplepacket_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_samplepacket_attribute_args:
  """
  Attributes:
   - samplepacket_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'samplepacket_id', None, None, ), # 1
  )

  def __init__(self, samplepacket_id=None,):
    self.samplepacket_id = samplepacket_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.samplepacket_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_args')
    if self.samplepacket_id is not None:
      oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
      oprot.writeI64(self.samplepacket_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.samplepacket_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_samplepacket_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_samplepacket_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_samplepacket_attribute_args:
  """
  Attributes:
   - samplepacket_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'samplepacket_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, samplepacket_id=None, thrift_attr=None,):
    self.samplepacket_id = samplepacket_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.samplepacket_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_args')
    if self.samplepacket_id is not None:
      oprot.writeFieldBegin('samplepacket_id', TType.I64, 1)
      oprot.writeI64(self.samplepacket_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.samplepacket_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_samplepacket_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_samplepacket_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_map_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype528, _size525) = iprot.readListBegin()
          for _i529 in xrange(_size525):
            _elem530 = sai_thrift_attribute_t()
            _elem530.read(iprot)
            self.thrift_attr_list.append(_elem530)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter531 in self.thrift_attr_list:
        iter531.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_map_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_map_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_map_entry_args:
  """
  Attributes:
   - tunnel_map_entry_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ), # 1
  )

  def __init__(self, tunnel_map_entry_id=None,):
    self.tunnel_map_entry_id = tunnel_map_entry_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_args')
    if self.tunnel_map_entry_id is not None:
      oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_entry_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_entry_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_map_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_map_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_map_entry_attribute_args:
  """
  Attributes:
   - tunnel_map_entry_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ), # 1
  )

  def __init__(self, tunnel_map_entry_id=None,):
    self.tunnel_map_entry_id = tunnel_map_entry_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_args')
    if self.tunnel_map_entry_id is not None:
      oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_entry_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_entry_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_map_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_map_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_map_entry_attribute_args:
  """
  Attributes:
   - tunnel_map_entry_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_entry_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, tunnel_map_entry_id=None, thrift_attr=None,):
    self.tunnel_map_entry_id = tunnel_map_entry_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_args')
    if self.tunnel_map_entry_id is not None:
      oprot.writeFieldBegin('tunnel_map_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_map_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_map_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_map_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype535, _size532) = iprot.readListBegin()
          for _i536 in xrange(_size532):
            _elem537 = sai_thrift_attribute_t()
            _elem537.read(iprot)
            self.thrift_attr_list.append(_elem537)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_map_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter538 in self.thrift_attr_list:
        iter538.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_map_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_map_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_map_args:
  """
  Attributes:
   - tunnel_map_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ), # 1
  )

  def __init__(self, tunnel_map_id=None,):
    self.tunnel_map_id = tunnel_map_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_map_args')
    if self.tunnel_map_id is not None:
      oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_map_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_map_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_map_attribute_args:
  """
  Attributes:
   - tunnel_map_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ), # 1
  )

  def __init__(self, tunnel_map_id=None,):
    self.tunnel_map_id = tunnel_map_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_args')
    if self.tunnel_map_id is not None:
      oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_map_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_map_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_map_attribute_args:
  """
  Attributes:
   - tunnel_map_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_map_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, tunnel_map_id=None, thrift_attr=None,):
    self.tunnel_map_id = tunnel_map_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_map_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_args')
    if self.tunnel_map_id is not None:
      oprot.writeFieldBegin('tunnel_map_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_map_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_map_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_map_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_map_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype542, _size539) = iprot.readListBegin()
          for _i543 in xrange(_size539):
            _elem544 = sai_thrift_attribute_t()
            _elem544.read(iprot)
            self.thrift_attr_list.append(_elem544)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter545 in self.thrift_attr_list:
        iter545.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_args:
  """
  Attributes:
   - tunnel_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_id', None, None, ), # 1
  )

  def __init__(self, tunnel_id=None,):
    self.tunnel_id = tunnel_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_args')
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_attribute_args:
  """
  Attributes:
   - tunnel_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, tunnel_id=None, thrift_attr_ids=None,):
    self.tunnel_id = tunnel_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype549, _size546) = iprot.readListBegin()
          for _i550 in xrange(_size546):
            _elem551 = iprot.readI32();
            self.thrift_attr_ids.append(_elem551)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_args')
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter552 in self.thrift_attr_ids:
        oprot.writeI32(iter552)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_attribute_args:
  """
  Attributes:
   - tunnel_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, tunnel_id=None, thrift_attr=None,):
    self.tunnel_id = tunnel_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_args')
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_stats_args:
  """
  Attributes:
   - tunnel_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, tunnel_id=None, counter_ids=None, number_of_counters=None,):
    self.tunnel_id = tunnel_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype556, _size553) = iprot.readListBegin()
          for _i557 in xrange(_size553):
            _elem558 = iprot.readI32();
            self.counter_ids.append(_elem558)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_stats_args')
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter559 in self.counter_ids:
        oprot.writeI32(iter559)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype563, _size560) = iprot.readListBegin()
          for _i564 in xrange(_size560):
            _elem565 = iprot.readI64();
            self.success.append(_elem565)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter566 in self.success:
        oprot.writeI64(iter566)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_tunnel_stats_args:
  """
  Attributes:
   - tunnel_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, tunnel_id=None, counter_ids=None, number_of_counters=None,):
    self.tunnel_id = tunnel_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype570, _size567) = iprot.readListBegin()
          for _i571 in xrange(_size567):
            _elem572 = iprot.readI32();
            self.counter_ids.append(_elem572)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_args')
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter573 in self.counter_ids:
        oprot.writeI32(iter573)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_tunnel_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_tunnel_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_term_table_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype577, _size574) = iprot.readListBegin()
          for _i578 in xrange(_size574):
            _elem579 = sai_thrift_attribute_t()
            _elem579.read(iprot)
            self.thrift_attr_list.append(_elem579)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter580 in self.thrift_attr_list:
        iter580.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_tunnel_term_table_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_tunnel_term_table_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_term_table_entry_args:
  """
  Attributes:
   - tunnel_term_table_entry_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ), # 1
  )

  def __init__(self, tunnel_term_table_entry_id=None,):
    self.tunnel_term_table_entry_id = tunnel_term_table_entry_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_term_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_args')
    if self.tunnel_term_table_entry_id is not None:
      oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_term_table_entry_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_term_table_entry_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_tunnel_term_table_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_tunnel_term_table_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_term_table_entry_attribute_args:
  """
  Attributes:
   - tunnel_term_table_entry_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, tunnel_term_table_entry_id=None, thrift_attr_ids=None,):
    self.tunnel_term_table_entry_id = tunnel_term_table_entry_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_term_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype584, _size581) = iprot.readListBegin()
          for _i585 in xrange(_size581):
            _elem586 = iprot.readI32();
            self.thrift_attr_ids.append(_elem586)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_args')
    if self.tunnel_term_table_entry_id is not None:
      oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_term_table_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter587 in self.thrift_attr_ids:
        oprot.writeI32(iter587)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_term_table_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_tunnel_term_table_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_tunnel_term_table_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_term_table_entry_attribute_args:
  """
  Attributes:
   - tunnel_term_table_entry_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tunnel_term_table_entry_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, tunnel_term_table_entry_id=None, thrift_attr=None,):
    self.tunnel_term_table_entry_id = tunnel_term_table_entry_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tunnel_term_table_entry_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_args')
    if self.tunnel_term_table_entry_id is not None:
      oprot.writeFieldBegin('tunnel_term_table_entry_id', TType.I64, 1)
      oprot.writeI64(self.tunnel_term_table_entry_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.tunnel_term_table_entry_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_tunnel_term_table_entry_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_tunnel_term_table_entry_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_packet_attribute_args:
  """
  Attributes:
   - switch_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'switch_id', None, None, ), # 1
  )

  def __init__(self, switch_id=None,):
    self.switch_id = switch_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.switch_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_packet_attribute_args')
    if self.switch_id is not None:
      oprot.writeFieldBegin('switch_id', TType.I64, 1)
      oprot.writeI64(self.switch_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.switch_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_packet_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_packet_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_packet_count_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_packet_count_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_cpu_packet_count_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_cpu_packet_count_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_cpu_packet_info_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_cpu_packet_info_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_clear_cpu_packet_info_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_result_t, sai_thrift_result_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_result_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_clear_cpu_packet_info_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_log_set_args:
  """
  Attributes:
   - sai_api_id
   - log_level
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sai_api_id', None, None, ), # 1
    (2, TType.I32, 'log_level', None, None, ), # 2
  )

  def __init__(self, sai_api_id=None, log_level=None,):
    self.sai_api_id = sai_api_id
    self.log_level = log_level

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sai_api_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.log_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_log_set_args')
    if self.sai_api_id is not None:
      oprot.writeFieldBegin('sai_api_id', TType.I32, 1)
      oprot.writeI32(self.sai_api_id)
      oprot.writeFieldEnd()
    if self.log_level is not None:
      oprot.writeFieldBegin('log_level', TType.I32, 2)
      oprot.writeI32(self.log_level)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sai_api_id)
    value = (value * 31) ^ hash(self.log_level)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_log_set_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_log_set_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
