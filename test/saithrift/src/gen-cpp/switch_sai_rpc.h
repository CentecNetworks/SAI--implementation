/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef switch_sai_rpc_H
#define switch_sai_rpc_H

#include <thrift/TDispatchProcessor.h>
#include "switch_sai_types.h"

namespace switch_sai {

class switch_sai_rpcIf {
 public:
  virtual ~switch_sai_rpcIf() {}
  virtual sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id) = 0;
  virtual void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) = 0;
  virtual void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id) = 0;
  virtual void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id) = 0;
  virtual void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid) = 0;
  virtual sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid) = 0;
  virtual void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state) = 0;
  virtual sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() = 0;
  virtual sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) = 0;
  virtual void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return) = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_cpu_port_id() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_trap_group() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_router_id() = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() = 0;
  virtual void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return) = 0;
  virtual sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name) = 0;
  virtual sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_switch() = 0;
  virtual sai_thrift_status_t sai_thrift_remove_switch() = 0;
  virtual void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id) = 0;
  virtual void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id) = 0;
  virtual void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id) = 0;
  virtual void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id) = 0;
  virtual void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id) = 0;
  virtual void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id) = 0;
  virtual void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id) = 0;
  virtual void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id) = 0;
  virtual void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id) = 0;
  virtual void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id) = 0;
  virtual void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id) = 0;
  virtual void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id) = 0;
  virtual void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id) = 0;
  virtual void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id) = 0;
  virtual void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id) = 0;
  virtual void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id) = 0;
  virtual void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id) = 0;
  virtual void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id) = 0;
  virtual void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id) = 0;
  virtual void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id) = 0;
  virtual void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id) = 0;
  virtual void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id) = 0;
  virtual void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) = 0;
  virtual sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) = 0;
  virtual sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id) = 0;
  virtual void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id) = 0;
  virtual void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id) = 0;
  virtual void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id) = 0;
  virtual void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) = 0;
  virtual sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) = 0;
  virtual sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id) = 0;
  virtual void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids) = 0;
  virtual sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr) = 0;
  virtual void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id) = 0;
  virtual void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return) = 0;
  virtual void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return) = 0;
  virtual sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level) = 0;
};

class switch_sai_rpcIfFactory {
 public:
  typedef switch_sai_rpcIf Handler;

  virtual ~switch_sai_rpcIfFactory() {}

  virtual switch_sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(switch_sai_rpcIf* /* handler */) = 0;
};

class switch_sai_rpcIfSingletonFactory : virtual public switch_sai_rpcIfFactory {
 public:
  switch_sai_rpcIfSingletonFactory(const boost::shared_ptr<switch_sai_rpcIf>& iface) : iface_(iface) {}
  virtual ~switch_sai_rpcIfSingletonFactory() {}

  virtual switch_sai_rpcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(switch_sai_rpcIf* /* handler */) {}

 protected:
  boost::shared_ptr<switch_sai_rpcIf> iface_;
};

class switch_sai_rpcNull : virtual public switch_sai_rpcIf {
 public:
  virtual ~switch_sai_rpcNull() {}
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t /* port_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* port_id */) {
    return;
  }
  void sai_thrift_get_port_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* port_id */, const std::vector<sai_thrift_port_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t /* port_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_fdb_entry_t& /* thrift_fdb_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t /* vlan_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_stats(std::vector<int64_t> & /* _return */, const sai_thrift_vlan_id_t /* vlan_id */, const std::vector<sai_thrift_vlan_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t /* vlan_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t /* vlan_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vlan_id */) {
    return;
  }
  void sai_thrift_get_vlan_id(sai_thrift_result_t& /* _return */, const sai_thrift_object_id_t /* vlan_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t /* vr_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t /* vr_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* vr_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& /* thrift_route_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& /* thrift_route_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& /* thrift_route_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_route_entry_t& /* thrift_route_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t /* rif_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t /* rif_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* rif_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t /* next_hop_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* next_hop_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t /* nhop_group_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t /* nhop_group_oid */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* nhop_group_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t /* nhop_group_member_oid */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* nhop_group_member_oid */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t /* lag_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t /* lag_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t /* lag_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t /* lag_member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* lag_member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t /* stp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t /* stp_id */, const sai_thrift_object_id_t /* port_id */, const sai_thrift_port_stp_port_state_t /* stp_port_state */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t /* stp_id */, const sai_thrift_object_id_t /* port_id */) {
    sai_thrift_port_stp_port_state_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_neighbor_entry_t& /* thrift_neighbor_entry */) {
    return;
  }
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& /* _return */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& /* _return */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_get_cpu_port_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_trap_group() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_router_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& /* _return */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& /* port_name */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& /* attribute */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_switch() {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_switch() {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_create_bridge_port(sai_thrift_result_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t /* bridge_port_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& /* _return */, const sai_thrift_object_id_t /* bridge_id */) {
    return;
  }
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_port_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t /* bridge_port_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_create_bridge(sai_thrift_result_t& /* _return */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    return;
  }
  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t /* bridge_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* bridge_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t /* bridge_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t /* thrift_hif_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hif_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t /* thrift_hif_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t /* thrift_hostif_table_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t /* thrift_hostif_trap_group_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t /* thrift_hostif_trap_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hostif_trap_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t /* thrift_hostif_trap_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t /* acl_table_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t /* acl_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t /* acl_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_entry_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t /* acl_table_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t /* acl_table_group_member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* acl_table_group_member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t /* acl_counter_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & /* _return */, const sai_thrift_object_id_t /* acl_counter_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t /* hash_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t /* thrift_hash_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_hash_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t /* udf_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_group_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t /* udf_match_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_match_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t /* udf_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t /* thrift_udf_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_udf_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t /* session_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t /* thrift_mirror_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_mirror_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_inseg_entry_t& /* thrift_inseg_entry */) {
    return;
  }
  sai_thrift_status_t sai_thrift_dump_log(const std::string& /* dump_file_name */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t /* thrift_policer_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_policer_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t /* thrift_policer_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & /* _return */, const sai_thrift_object_id_t /* thrift_policer_id */, const std::vector<sai_thrift_policer_stat_t> & /* thrift_counter_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t /* thrift_policer_id */, const std::vector<sai_thrift_policer_stat_t> & /* thrift_counter_ids */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t /* scheduler_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* thrift_scheduler_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t /* thrift_scheduler_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t /* scheduler_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* scheduler_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t /* scheduler_group_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_queue_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* queue_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t /* queue_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t /* queue_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* queue_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t /* queue_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t /* buffer_profile_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* buffer_profile_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t /* buffer_profile_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t /* priority_group_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* priority_group_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t /* pg_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_pg_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* pg_id */, const std::vector<sai_thrift_pg_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t /* wred_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* wred_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t /* wred_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t /* qos_map_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* qos_map_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t /* qos_map_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_l2mc_entry_t& /* thrift_l2mc_entry */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_mcast_fdb_entry_t& /* thrift_mcast_fdb_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t /* grp_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* grp_id */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t /* member_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t /* member_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* member_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */, const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_ipmc_entry_t& /* thrift_ipmc_entry */) {
    return;
  }
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t /* samplepacket_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* samplepacket_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t /* samplepacket_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t /* tunnel_map_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_entry_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t /* tunnel_map_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t /* tunnel_map_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_map_id */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t /* tunnel_map_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t /* tunnel_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t /* tunnel_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & /* _return */, const sai_thrift_object_id_t /* tunnel_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    return;
  }
  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t /* tunnel_id */, const std::vector<sai_thrift_queue_stat_counter_t> & /* counter_ids */, const int32_t /* number_of_counters */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & /* thrift_attr_list */) {
    sai_thrift_object_id_t _return = 0;
    return _return;
  }
  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t /* tunnel_term_table_entry_id */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* tunnel_term_table_entry_id */, const std::vector<int32_t> & /* thrift_attr_ids */) {
    return;
  }
  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t /* tunnel_term_table_entry_id */, const sai_thrift_attribute_t& /* thrift_attr */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& /* _return */, const sai_thrift_object_id_t /* switch_id */) {
    return;
  }
  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& /* _return */) {
    return;
  }
  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& /* _return */) {
    return;
  }
  sai_thrift_status_t sai_thrift_log_set(const int32_t /* sai_api_id */, const int32_t /* log_level */) {
    sai_thrift_status_t _return = 0;
    return _return;
  }
};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset() : port_id(false), thrift_attr(false) {}
  bool port_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_port_attribute_args(const switch_sai_rpc_sai_thrift_set_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_port_attribute_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_args() throw();
  sai_thrift_object_id_t port_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_port_attribute_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_port_attribute_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_port_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_port_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_port_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_port_attribute_result(const switch_sai_rpc_sai_thrift_set_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_port_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_port_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_port_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_port_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_port_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset() : port_id(false) {}
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_port_attribute_args(const switch_sai_rpc_sai_thrift_get_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_port_attribute_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_args() throw();
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_get_port_attribute_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_attribute_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_port_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_port_attribute_result(const switch_sai_rpc_sai_thrift_get_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_port_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_args__isset() : port_id(false), counter_ids(false), number_of_counters(false) {}
  bool port_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_get_port_stats_args(const switch_sai_rpc_sai_thrift_get_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_args&);
  switch_sai_rpc_sai_thrift_get_port_stats_args() : port_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_args() throw();
  sai_thrift_object_id_t port_id;
  std::vector<sai_thrift_port_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_port_stats_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_port_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_port_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_pargs() throw();
  const sai_thrift_object_id_t* port_id;
  const std::vector<sai_thrift_port_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_port_stats_result(const switch_sai_rpc_sai_thrift_get_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_port_stats_result&);
  switch_sai_rpc_sai_thrift_get_port_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_result() throw();
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_port_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_port_stats_presult() throw();
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_port_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset() : port_id(false) {}
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_clear_port_all_stats_args(const switch_sai_rpc_sai_thrift_clear_port_all_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_port_all_stats_args&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_args() : port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_args() throw();
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_args__isset __isset;

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args & rhs) const
  {
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_all_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_port_all_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs() throw();
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_clear_port_all_stats_result(const switch_sai_rpc_sai_thrift_clear_port_all_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_port_all_stats_result&);
  switch_sai_rpc_sai_thrift_clear_port_all_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_port_all_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_port_all_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_port_all_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_clear_port_all_stats_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_port_all_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_port_all_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset() : thrift_fdb_entry(false), thrift_attr_list(false) {}
  bool thrift_fdb_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_args {
 public:

  static const char* ascii_fingerprint; // = "2AC189C0906BDB2C4DF80A3A41316347";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC1,0x89,0xC0,0x90,0x6B,0xDB,0x2C,0x4D,0xF8,0x0A,0x3A,0x41,0x31,0x63,0x47};

  switch_sai_rpc_sai_thrift_create_fdb_entry_args(const switch_sai_rpc_sai_thrift_create_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_args() throw();
  sai_thrift_fdb_entry_t thrift_fdb_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_fdb_entry_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_fdb_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_fdb_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "2AC189C0906BDB2C4DF80A3A41316347";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC1,0x89,0xC0,0x90,0x6B,0xDB,0x2C,0x4D,0xF8,0x0A,0x3A,0x41,0x31,0x63,0x47};


  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_pargs() throw();
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_fdb_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_fdb_entry_result(const switch_sai_rpc_sai_thrift_create_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_fdb_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_fdb_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_fdb_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_fdb_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset() : thrift_fdb_entry(false) {}
  bool thrift_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_args {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};

  switch_sai_rpc_sai_thrift_delete_fdb_entry_args(const switch_sai_rpc_sai_thrift_delete_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_delete_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_args() throw();
  sai_thrift_fdb_entry_t thrift_fdb_entry;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_delete_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_delete_fdb_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};


  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs() throw();
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_delete_fdb_entry_result(const switch_sai_rpc_sai_thrift_delete_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_delete_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_delete_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_delete_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_delete_fdb_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_delete_fdb_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_delete_fdb_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_delete_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_delete_fdb_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_flush_fdb_entries_args(const switch_sai_rpc_sai_thrift_flush_fdb_entries_args&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_args& operator=(const switch_sai_rpc_sai_thrift_flush_fdb_entries_args&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_flush_fdb_entries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_flush_fdb_entries_args& obj);
};


class switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_flush_fdb_entries_result(const switch_sai_rpc_sai_thrift_flush_fdb_entries_result&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_result& operator=(const switch_sai_rpc_sai_thrift_flush_fdb_entries_result&);
  switch_sai_rpc_sai_thrift_flush_fdb_entries_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_flush_fdb_entries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_flush_fdb_entries_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset {
  _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset;

class switch_sai_rpc_sai_thrift_flush_fdb_entries_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_flush_fdb_entries_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_flush_fdb_entries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_flush_fdb_entries_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset() : thrift_fdb_entry(false), thrift_attr(false) {}
  bool thrift_fdb_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "BBE542B2E3F769195A8D0614387A6C87";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xE5,0x42,0xB2,0xE3,0xF7,0x69,0x19,0x5A,0x8D,0x06,0x14,0x38,0x7A,0x6C,0x87};

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args() throw();
  sai_thrift_fdb_entry_t thrift_fdb_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "BBE542B2E3F769195A8D0614387A6C87";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xE5,0x42,0xB2,0xE3,0xF7,0x69,0x19,0x5A,0x8D,0x06,0x14,0x38,0x7A,0x6C,0x87};


  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs() throw();
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset() : thrift_fdb_entry(false) {}
  bool thrift_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args() throw();
  sai_thrift_fdb_entry_t thrift_fdb_entry;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_fdb_entry(const sai_thrift_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_fdb_entry == rhs.thrift_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};


  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs() throw();
  const sai_thrift_fdb_entry_t* thrift_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_args__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_vlan_args__isset;

class switch_sai_rpc_sai_thrift_create_vlan_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_vlan_args(const switch_sai_rpc_sai_thrift_create_vlan_args&);
  switch_sai_rpc_sai_thrift_create_vlan_args& operator=(const switch_sai_rpc_sai_thrift_create_vlan_args&);
  switch_sai_rpc_sai_thrift_create_vlan_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_vlan_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_args& obj);
};


class switch_sai_rpc_sai_thrift_create_vlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_result__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_result__isset;

class switch_sai_rpc_sai_thrift_create_vlan_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_vlan_result(const switch_sai_rpc_sai_thrift_create_vlan_result&);
  switch_sai_rpc_sai_thrift_create_vlan_result& operator=(const switch_sai_rpc_sai_thrift_create_vlan_result&);
  switch_sai_rpc_sai_thrift_create_vlan_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_vlan_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_presult__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_presult__isset;

class switch_sai_rpc_sai_thrift_create_vlan_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_args__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_args__isset() : vlan_oid(false) {}
  bool vlan_oid :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_args__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_vlan_args(const switch_sai_rpc_sai_thrift_remove_vlan_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_args& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_args() : vlan_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_args() throw();
  sai_thrift_object_id_t vlan_oid;

  _switch_sai_rpc_sai_thrift_remove_vlan_args__isset __isset;

  void __set_vlan_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_args & rhs) const
  {
    if (!(vlan_oid == rhs.vlan_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_vlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_pargs() throw();
  const sai_thrift_object_id_t* vlan_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_result__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_result__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_vlan_result(const switch_sai_rpc_sai_thrift_remove_vlan_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_result& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_vlan_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_vlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset() : vlan_id(false), counter_ids(false), number_of_counters(false) {}
  bool vlan_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_args {
 public:

  static const char* ascii_fingerprint; // = "657635BC4B2880028A1ADBF40F8915F3";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x76,0x35,0xBC,0x4B,0x28,0x80,0x02,0x8A,0x1A,0xDB,0xF4,0x0F,0x89,0x15,0xF3};

  switch_sai_rpc_sai_thrift_get_vlan_stats_args(const switch_sai_rpc_sai_thrift_get_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_args&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_args() : vlan_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_args() throw();
  sai_thrift_vlan_id_t vlan_id;
  std::vector<sai_thrift_vlan_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_args__isset __isset;

  void __set_vlan_id(const sai_thrift_vlan_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_vlan_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_vlan_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "657635BC4B2880028A1ADBF40F8915F3";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x76,0x35,0xBC,0x4B,0x28,0x80,0x02,0x8A,0x1A,0xDB,0xF4,0x0F,0x89,0x15,0xF3};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_pargs() throw();
  const sai_thrift_vlan_id_t* vlan_id;
  const std::vector<sai_thrift_vlan_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_vlan_stats_result(const switch_sai_rpc_sai_thrift_get_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_stats_result&);
  switch_sai_rpc_sai_thrift_get_vlan_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_result() throw();
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_stats_presult() throw();
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_vlan_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_vlan_member_args(const switch_sai_rpc_sai_thrift_create_vlan_member_args&);
  switch_sai_rpc_sai_thrift_create_vlan_member_args& operator=(const switch_sai_rpc_sai_thrift_create_vlan_member_args&);
  switch_sai_rpc_sai_thrift_create_vlan_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_vlan_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_vlan_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_vlan_member_result(const switch_sai_rpc_sai_thrift_create_vlan_member_result&);
  switch_sai_rpc_sai_thrift_create_vlan_member_result& operator=(const switch_sai_rpc_sai_thrift_create_vlan_member_result&);
  switch_sai_rpc_sai_thrift_create_vlan_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_vlan_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_vlan_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_vlan_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_vlan_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_vlan_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset() : vlan_member_id(false) {}
  bool vlan_member_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args() : vlan_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args() throw();
  sai_thrift_object_id_t vlan_member_id;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args__isset __isset;

  void __set_vlan_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args & rhs) const
  {
    if (!(vlan_member_id == rhs.vlan_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset() : vlan_member_id(false) {}
  bool vlan_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_vlan_member_args(const switch_sai_rpc_sai_thrift_remove_vlan_member_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_member_args&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_args() : vlan_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_args() throw();
  sai_thrift_object_id_t vlan_member_id;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_args__isset __isset;

  void __set_vlan_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_member_args & rhs) const
  {
    if (!(vlan_member_id == rhs.vlan_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_vlan_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_pargs() throw();
  const sai_thrift_object_id_t* vlan_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_vlan_member_result(const switch_sai_rpc_sai_thrift_remove_vlan_member_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_vlan_member_result&);
  switch_sai_rpc_sai_thrift_remove_vlan_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_vlan_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_vlan_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_vlan_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_vlan_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_vlan_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_vlan_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_vlan_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset() : vlan_id(false), thrift_attr(false) {}
  bool vlan_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_vlan_attribute_args(const switch_sai_rpc_sai_thrift_set_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_args() throw();
  sai_thrift_object_id_t vlan_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_vlan_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_vlan_attribute_result(const switch_sai_rpc_sai_thrift_set_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_set_vlan_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_vlan_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_vlan_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_vlan_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_vlan_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset() : vlan_id(false) {}
  bool vlan_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_vlan_attribute_args(const switch_sai_rpc_sai_thrift_get_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_attribute_args&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_args() throw();
  sai_thrift_object_id_t vlan_id;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs() throw();
  const sai_thrift_object_id_t* vlan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_vlan_attribute_result(const switch_sai_rpc_sai_thrift_get_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_attribute_result&);
  switch_sai_rpc_sai_thrift_get_vlan_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset() : vlan_id(false) {}
  bool vlan_id :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_vlan_id_args(const switch_sai_rpc_sai_thrift_get_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_vlan_id_args& operator=(const switch_sai_rpc_sai_thrift_get_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_vlan_id_args() : vlan_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_args() throw();
  sai_thrift_object_id_t vlan_id;

  _switch_sai_rpc_sai_thrift_get_vlan_id_args__isset __isset;

  void __set_vlan_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_id_args & rhs) const
  {
    if (!(vlan_id == rhs.vlan_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_id_args& obj);
};


class switch_sai_rpc_sai_thrift_get_vlan_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_pargs() throw();
  const sai_thrift_object_id_t* vlan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_id_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_get_vlan_id_result(const switch_sai_rpc_sai_thrift_get_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_vlan_id_result& operator=(const switch_sai_rpc_sai_thrift_get_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_vlan_id_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_vlan_id_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_vlan_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_vlan_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_vlan_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_id_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_vlan_id_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_get_vlan_id_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_vlan_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_vlan_id_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_virtual_router_args(const switch_sai_rpc_sai_thrift_create_virtual_router_args&);
  switch_sai_rpc_sai_thrift_create_virtual_router_args& operator=(const switch_sai_rpc_sai_thrift_create_virtual_router_args&);
  switch_sai_rpc_sai_thrift_create_virtual_router_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_virtual_router_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_virtual_router_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_virtual_router_args& obj);
};


class switch_sai_rpc_sai_thrift_create_virtual_router_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_virtual_router_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_virtual_router_result(const switch_sai_rpc_sai_thrift_create_virtual_router_result&);
  switch_sai_rpc_sai_thrift_create_virtual_router_result& operator=(const switch_sai_rpc_sai_thrift_create_virtual_router_result&);
  switch_sai_rpc_sai_thrift_create_virtual_router_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_virtual_router_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_virtual_router_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_virtual_router_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset {
  _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset;

class switch_sai_rpc_sai_thrift_create_virtual_router_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_virtual_router_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_virtual_router_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset() : vr_id(false) {}
  bool vr_id :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_virtual_router_args(const switch_sai_rpc_sai_thrift_remove_virtual_router_args&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_args& operator=(const switch_sai_rpc_sai_thrift_remove_virtual_router_args&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_args() throw();
  sai_thrift_object_id_t vr_id;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_virtual_router_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_virtual_router_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_virtual_router_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_virtual_router_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_virtual_router_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_pargs() throw();
  const sai_thrift_object_id_t* vr_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_virtual_router_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_virtual_router_result(const switch_sai_rpc_sai_thrift_remove_virtual_router_result&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_result& operator=(const switch_sai_rpc_sai_thrift_remove_virtual_router_result&);
  switch_sai_rpc_sai_thrift_remove_virtual_router_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_virtual_router_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_virtual_router_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_virtual_router_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_virtual_router_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset;

class switch_sai_rpc_sai_thrift_remove_virtual_router_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_virtual_router_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_virtual_router_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_virtual_router_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset() : vr_id(false), thrift_attr(false) {}
  bool vr_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args() throw();
  sai_thrift_object_id_t vr_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs() throw();
  const sai_thrift_object_id_t* vr_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset() : vr_id(false) {}
  bool vr_id :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args() : vr_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args() throw();
  sai_thrift_object_id_t vr_id;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args__isset __isset;

  void __set_vr_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args & rhs) const
  {
    if (!(vr_id == rhs.vr_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs() throw();
  const sai_thrift_object_id_t* vr_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result&);
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_route_args__isset {
  _switch_sai_rpc_sai_thrift_create_route_args__isset() : thrift_route_entry(false), thrift_attr_list(false) {}
  bool thrift_route_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_route_args__isset;

class switch_sai_rpc_sai_thrift_create_route_args {
 public:

  static const char* ascii_fingerprint; // = "E4568FEA9FCE477CA94FF658B8BCDECE";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x56,0x8F,0xEA,0x9F,0xCE,0x47,0x7C,0xA9,0x4F,0xF6,0x58,0xB8,0xBC,0xDE,0xCE};

  switch_sai_rpc_sai_thrift_create_route_args(const switch_sai_rpc_sai_thrift_create_route_args&);
  switch_sai_rpc_sai_thrift_create_route_args& operator=(const switch_sai_rpc_sai_thrift_create_route_args&);
  switch_sai_rpc_sai_thrift_create_route_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_route_args() throw();
  sai_thrift_route_entry_t thrift_route_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_route_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_route_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_route_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_route_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_route_args& obj);
};


class switch_sai_rpc_sai_thrift_create_route_pargs {
 public:

  static const char* ascii_fingerprint; // = "E4568FEA9FCE477CA94FF658B8BCDECE";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x56,0x8F,0xEA,0x9F,0xCE,0x47,0x7C,0xA9,0x4F,0xF6,0x58,0xB8,0xBC,0xDE,0xCE};


  virtual ~switch_sai_rpc_sai_thrift_create_route_pargs() throw();
  const sai_thrift_route_entry_t* thrift_route_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_route_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_route_result__isset {
  _switch_sai_rpc_sai_thrift_create_route_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_route_result__isset;

class switch_sai_rpc_sai_thrift_create_route_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_route_result(const switch_sai_rpc_sai_thrift_create_route_result&);
  switch_sai_rpc_sai_thrift_create_route_result& operator=(const switch_sai_rpc_sai_thrift_create_route_result&);
  switch_sai_rpc_sai_thrift_create_route_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_route_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_route_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_route_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_route_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_route_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_route_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_route_presult__isset {
  _switch_sai_rpc_sai_thrift_create_route_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_route_presult__isset;

class switch_sai_rpc_sai_thrift_create_route_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_route_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_route_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_route_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_args__isset {
  _switch_sai_rpc_sai_thrift_remove_route_args__isset() : thrift_route_entry(false) {}
  bool thrift_route_entry :1;
} _switch_sai_rpc_sai_thrift_remove_route_args__isset;

class switch_sai_rpc_sai_thrift_remove_route_args {
 public:

  static const char* ascii_fingerprint; // = "8B22F358313E222AFA7ACA59D20A608D";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x22,0xF3,0x58,0x31,0x3E,0x22,0x2A,0xFA,0x7A,0xCA,0x59,0xD2,0x0A,0x60,0x8D};

  switch_sai_rpc_sai_thrift_remove_route_args(const switch_sai_rpc_sai_thrift_remove_route_args&);
  switch_sai_rpc_sai_thrift_remove_route_args& operator=(const switch_sai_rpc_sai_thrift_remove_route_args&);
  switch_sai_rpc_sai_thrift_remove_route_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_route_args() throw();
  sai_thrift_route_entry_t thrift_route_entry;

  _switch_sai_rpc_sai_thrift_remove_route_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_route_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_route_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_route_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_route_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_route_pargs {
 public:

  static const char* ascii_fingerprint; // = "8B22F358313E222AFA7ACA59D20A608D";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x22,0xF3,0x58,0x31,0x3E,0x22,0x2A,0xFA,0x7A,0xCA,0x59,0xD2,0x0A,0x60,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_remove_route_pargs() throw();
  const sai_thrift_route_entry_t* thrift_route_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_route_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_result__isset {
  _switch_sai_rpc_sai_thrift_remove_route_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_route_result__isset;

class switch_sai_rpc_sai_thrift_remove_route_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_route_result(const switch_sai_rpc_sai_thrift_remove_route_result&);
  switch_sai_rpc_sai_thrift_remove_route_result& operator=(const switch_sai_rpc_sai_thrift_remove_route_result&);
  switch_sai_rpc_sai_thrift_remove_route_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_route_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_route_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_route_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_route_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_route_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_route_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_route_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_route_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_route_presult__isset;

class switch_sai_rpc_sai_thrift_remove_route_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_route_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_route_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_route_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset() : thrift_route_entry(false), thrift_attr(false) {}
  bool thrift_route_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "0D3B5DBA8F6DE4F14C05143DBCB82072";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x3B,0x5D,0xBA,0x8F,0x6D,0xE4,0xF1,0x4C,0x05,0x14,0x3D,0xBC,0xB8,0x20,0x72};

  switch_sai_rpc_sai_thrift_set_route_attribute_args(const switch_sai_rpc_sai_thrift_set_route_attribute_args&);
  switch_sai_rpc_sai_thrift_set_route_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_route_attribute_args&);
  switch_sai_rpc_sai_thrift_set_route_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_args() throw();
  sai_thrift_route_entry_t thrift_route_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_route_attribute_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_route_attribute_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_route_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_route_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_route_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_route_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "0D3B5DBA8F6DE4F14C05143DBCB82072";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x3B,0x5D,0xBA,0x8F,0x6D,0xE4,0xF1,0x4C,0x05,0x14,0x3D,0xBC,0xB8,0x20,0x72};


  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_pargs() throw();
  const sai_thrift_route_entry_t* thrift_route_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_route_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_route_attribute_result(const switch_sai_rpc_sai_thrift_set_route_attribute_result&);
  switch_sai_rpc_sai_thrift_set_route_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_route_attribute_result&);
  switch_sai_rpc_sai_thrift_set_route_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_route_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_route_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_route_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_route_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_route_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_route_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_route_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_route_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_route_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset() : thrift_route_entry(false) {}
  bool thrift_route_entry :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "8B22F358313E222AFA7ACA59D20A608D";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x22,0xF3,0x58,0x31,0x3E,0x22,0x2A,0xFA,0x7A,0xCA,0x59,0xD2,0x0A,0x60,0x8D};

  switch_sai_rpc_sai_thrift_get_route_attribute_args(const switch_sai_rpc_sai_thrift_get_route_attribute_args&);
  switch_sai_rpc_sai_thrift_get_route_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_route_attribute_args&);
  switch_sai_rpc_sai_thrift_get_route_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_args() throw();
  sai_thrift_route_entry_t thrift_route_entry;

  _switch_sai_rpc_sai_thrift_get_route_attribute_args__isset __isset;

  void __set_thrift_route_entry(const sai_thrift_route_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_route_attribute_args & rhs) const
  {
    if (!(thrift_route_entry == rhs.thrift_route_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_route_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_route_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_route_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_route_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "8B22F358313E222AFA7ACA59D20A608D";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0x22,0xF3,0x58,0x31,0x3E,0x22,0x2A,0xFA,0x7A,0xCA,0x59,0xD2,0x0A,0x60,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_pargs() throw();
  const sai_thrift_route_entry_t* thrift_route_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_route_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_route_attribute_result(const switch_sai_rpc_sai_thrift_get_route_attribute_result&);
  switch_sai_rpc_sai_thrift_get_route_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_route_attribute_result&);
  switch_sai_rpc_sai_thrift_get_route_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_route_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_route_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_route_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_route_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_route_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_route_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_route_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_route_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_route_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_args__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_args__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_router_interface_args(const switch_sai_rpc_sai_thrift_create_router_interface_args&);
  switch_sai_rpc_sai_thrift_create_router_interface_args& operator=(const switch_sai_rpc_sai_thrift_create_router_interface_args&);
  switch_sai_rpc_sai_thrift_create_router_interface_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_router_interface_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_router_interface_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_router_interface_args& obj);
};


class switch_sai_rpc_sai_thrift_create_router_interface_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_router_interface_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_result__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_result__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_router_interface_result(const switch_sai_rpc_sai_thrift_create_router_interface_result&);
  switch_sai_rpc_sai_thrift_create_router_interface_result& operator=(const switch_sai_rpc_sai_thrift_create_router_interface_result&);
  switch_sai_rpc_sai_thrift_create_router_interface_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_router_interface_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_router_interface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_router_interface_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset {
  _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset;

class switch_sai_rpc_sai_thrift_create_router_interface_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_router_interface_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_router_interface_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset() : rif_id(false) {}
  bool rif_id :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_router_interface_args(const switch_sai_rpc_sai_thrift_remove_router_interface_args&);
  switch_sai_rpc_sai_thrift_remove_router_interface_args& operator=(const switch_sai_rpc_sai_thrift_remove_router_interface_args&);
  switch_sai_rpc_sai_thrift_remove_router_interface_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_args() throw();
  sai_thrift_object_id_t rif_id;

  _switch_sai_rpc_sai_thrift_remove_router_interface_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_router_interface_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_router_interface_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_router_interface_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_router_interface_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_router_interface_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_pargs() throw();
  const sai_thrift_object_id_t* rif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_router_interface_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_router_interface_result(const switch_sai_rpc_sai_thrift_remove_router_interface_result&);
  switch_sai_rpc_sai_thrift_remove_router_interface_result& operator=(const switch_sai_rpc_sai_thrift_remove_router_interface_result&);
  switch_sai_rpc_sai_thrift_remove_router_interface_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_router_interface_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_router_interface_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_router_interface_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_router_interface_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_router_interface_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset;

class switch_sai_rpc_sai_thrift_remove_router_interface_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_router_interface_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_router_interface_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_router_interface_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset() : rif_id(false), thrift_attr(false) {}
  bool rif_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_args() throw();
  sai_thrift_object_id_t rif_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_router_interface_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs() throw();
  const sai_thrift_object_id_t* rif_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_router_interface_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset() : rif_id(false) {}
  bool rif_id :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args() : rif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_args() throw();
  sai_thrift_object_id_t rif_id;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_args__isset __isset;

  void __set_rif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args & rhs) const
  {
    if (!(rif_id == rhs.rif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_router_interface_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs() throw();
  const sai_thrift_object_id_t* rif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result&);
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_router_interface_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_next_hop_args(const switch_sai_rpc_sai_thrift_create_next_hop_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_args& obj);
};


class switch_sai_rpc_sai_thrift_create_next_hop_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_next_hop_result(const switch_sai_rpc_sai_thrift_create_next_hop_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset() : next_hop_id(false) {}
  bool next_hop_id :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_next_hop_args(const switch_sai_rpc_sai_thrift_remove_next_hop_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_args() : next_hop_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_args() throw();
  sai_thrift_object_id_t next_hop_id;

  _switch_sai_rpc_sai_thrift_remove_next_hop_args__isset __isset;

  void __set_next_hop_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_args & rhs) const
  {
    if (!(next_hop_id == rhs.next_hop_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_next_hop_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_pargs() throw();
  const sai_thrift_object_id_t* next_hop_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_next_hop_result(const switch_sai_rpc_sai_thrift_remove_next_hop_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset() : next_hop_id(false) {}
  bool next_hop_id :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args() : next_hop_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_args() throw();
  sai_thrift_object_id_t next_hop_id;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_args__isset __isset;

  void __set_next_hop_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args & rhs) const
  {
    if (!(next_hop_id == rhs.next_hop_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs() throw();
  const sai_thrift_object_id_t* next_hop_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_next_hop_group_args(const switch_sai_rpc_sai_thrift_create_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_next_hop_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_next_hop_group_result(const switch_sai_rpc_sai_thrift_create_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset() : nhop_group_oid(false) {}
  bool nhop_group_oid :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_next_hop_group_args(const switch_sai_rpc_sai_thrift_remove_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_args() throw();
  sai_thrift_object_id_t nhop_group_oid;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs() throw();
  const sai_thrift_object_id_t* nhop_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_next_hop_group_result(const switch_sai_rpc_sai_thrift_remove_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset() : nhop_group_oid(false), thrift_attr(false) {}
  bool nhop_group_oid :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args() throw();
  sai_thrift_object_id_t nhop_group_oid;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* nhop_group_oid;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset() : nhop_group_oid(false) {}
  bool nhop_group_oid :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args() : nhop_group_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args() throw();
  sai_thrift_object_id_t nhop_group_oid;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args__isset __isset;

  void __set_nhop_group_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args & rhs) const
  {
    if (!(nhop_group_oid == rhs.nhop_group_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* nhop_group_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset() : nhop_group_member_oid(false) {}
  bool nhop_group_member_oid :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args() : nhop_group_member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args() throw();
  sai_thrift_object_id_t nhop_group_member_oid;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args__isset __isset;

  void __set_nhop_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args & rhs) const
  {
    if (!(nhop_group_member_oid == rhs.nhop_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs() throw();
  const sai_thrift_object_id_t* nhop_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset() : nhop_group_member_oid(false) {}
  bool nhop_group_member_oid :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() : nhop_group_member_oid(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() throw();
  sai_thrift_object_id_t nhop_group_member_oid;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args__isset __isset;

  void __set_nhop_group_member_oid(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & rhs) const
  {
    if (!(nhop_group_member_oid == rhs.nhop_group_member_oid))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* nhop_group_member_oid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_args__isset {
  _switch_sai_rpc_sai_thrift_create_lag_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_lag_args__isset;

class switch_sai_rpc_sai_thrift_create_lag_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_lag_args(const switch_sai_rpc_sai_thrift_create_lag_args&);
  switch_sai_rpc_sai_thrift_create_lag_args& operator=(const switch_sai_rpc_sai_thrift_create_lag_args&);
  switch_sai_rpc_sai_thrift_create_lag_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_lag_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_args& obj);
};


class switch_sai_rpc_sai_thrift_create_lag_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_lag_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_result__isset {
  _switch_sai_rpc_sai_thrift_create_lag_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_result__isset;

class switch_sai_rpc_sai_thrift_create_lag_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_lag_result(const switch_sai_rpc_sai_thrift_create_lag_result&);
  switch_sai_rpc_sai_thrift_create_lag_result& operator=(const switch_sai_rpc_sai_thrift_create_lag_result&);
  switch_sai_rpc_sai_thrift_create_lag_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_lag_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_presult__isset {
  _switch_sai_rpc_sai_thrift_create_lag_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_presult__isset;

class switch_sai_rpc_sai_thrift_create_lag_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_lag_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_args__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_args__isset() : lag_id(false) {}
  bool lag_id :1;
} _switch_sai_rpc_sai_thrift_remove_lag_args__isset;

class switch_sai_rpc_sai_thrift_remove_lag_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_lag_args(const switch_sai_rpc_sai_thrift_remove_lag_args&);
  switch_sai_rpc_sai_thrift_remove_lag_args& operator=(const switch_sai_rpc_sai_thrift_remove_lag_args&);
  switch_sai_rpc_sai_thrift_remove_lag_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_args() throw();
  sai_thrift_object_id_t lag_id;

  _switch_sai_rpc_sai_thrift_remove_lag_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_lag_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_pargs() throw();
  const sai_thrift_object_id_t* lag_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_result__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_result__isset;

class switch_sai_rpc_sai_thrift_remove_lag_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_lag_result(const switch_sai_rpc_sai_thrift_remove_lag_result&);
  switch_sai_rpc_sai_thrift_remove_lag_result& operator=(const switch_sai_rpc_sai_thrift_remove_lag_result&);
  switch_sai_rpc_sai_thrift_remove_lag_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_lag_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_presult__isset;

class switch_sai_rpc_sai_thrift_remove_lag_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_lag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset() : lag_id(false), thrift_attr(false) {}
  bool lag_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_lag_attribute_args(const switch_sai_rpc_sai_thrift_set_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_args() throw();
  sai_thrift_object_id_t lag_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_attribute_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_lag_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_lag_attribute_result(const switch_sai_rpc_sai_thrift_set_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_lag_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_lag_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset() : lag_id(false) {}
  bool lag_id :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_lag_attribute_args(const switch_sai_rpc_sai_thrift_get_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_lag_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_args() : lag_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_args() throw();
  sai_thrift_object_id_t lag_id;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_args__isset __isset;

  void __set_lag_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_attribute_args & rhs) const
  {
    if (!(lag_id == rhs.lag_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_lag_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_lag_attribute_result(const switch_sai_rpc_sai_thrift_get_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_lag_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_lag_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_lag_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_lag_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_args__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_lag_member_args(const switch_sai_rpc_sai_thrift_create_lag_member_args&);
  switch_sai_rpc_sai_thrift_create_lag_member_args& operator=(const switch_sai_rpc_sai_thrift_create_lag_member_args&);
  switch_sai_rpc_sai_thrift_create_lag_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_lag_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_lag_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_result__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_lag_member_result(const switch_sai_rpc_sai_thrift_create_lag_member_result&);
  switch_sai_rpc_sai_thrift_create_lag_member_result& operator=(const switch_sai_rpc_sai_thrift_create_lag_member_result&);
  switch_sai_rpc_sai_thrift_create_lag_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_lag_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_lag_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_lag_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_lag_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_lag_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset() : lag_member_id(false) {}
  bool lag_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_lag_member_args(const switch_sai_rpc_sai_thrift_remove_lag_member_args&);
  switch_sai_rpc_sai_thrift_remove_lag_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_lag_member_args&);
  switch_sai_rpc_sai_thrift_remove_lag_member_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_args() throw();
  sai_thrift_object_id_t lag_member_id;

  _switch_sai_rpc_sai_thrift_remove_lag_member_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_member_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_lag_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_pargs() throw();
  const sai_thrift_object_id_t* lag_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_lag_member_result(const switch_sai_rpc_sai_thrift_remove_lag_member_result&);
  switch_sai_rpc_sai_thrift_remove_lag_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_lag_member_result&);
  switch_sai_rpc_sai_thrift_remove_lag_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_lag_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_lag_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_lag_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_lag_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_lag_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_lag_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_lag_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_lag_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset() : lag_member_id(false), thrift_attr(false) {}
  bool lag_member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_args() throw();
  sai_thrift_object_id_t lag_member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset() : lag_member_id(false) {}
  bool lag_member_id :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args() : lag_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_args() throw();
  sai_thrift_object_id_t lag_member_id;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_args__isset __isset;

  void __set_lag_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args & rhs) const
  {
    if (!(lag_member_id == rhs.lag_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* lag_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_stp_entry_args(const switch_sai_rpc_sai_thrift_create_stp_entry_args&);
  switch_sai_rpc_sai_thrift_create_stp_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_stp_entry_args&);
  switch_sai_rpc_sai_thrift_create_stp_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_stp_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_stp_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_stp_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_stp_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_stp_entry_result(const switch_sai_rpc_sai_thrift_create_stp_entry_result&);
  switch_sai_rpc_sai_thrift_create_stp_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_stp_entry_result&);
  switch_sai_rpc_sai_thrift_create_stp_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_stp_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_stp_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_stp_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_stp_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_stp_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_stp_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_stp_entry_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_stp_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_stp_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset() : stp_id(false) {}
  bool stp_id :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_stp_entry_args(const switch_sai_rpc_sai_thrift_remove_stp_entry_args&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_stp_entry_args&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_args() : stp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_args() throw();
  sai_thrift_object_id_t stp_id;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_entry_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_stp_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_stp_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_pargs() throw();
  const sai_thrift_object_id_t* stp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_stp_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_stp_entry_result(const switch_sai_rpc_sai_thrift_remove_stp_entry_result&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_stp_entry_result&);
  switch_sai_rpc_sai_thrift_remove_stp_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_stp_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_stp_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_stp_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_stp_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_stp_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_stp_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_stp_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_stp_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset() : stp_id(false), port_id(false), stp_port_state(false) {}
  bool stp_id :1;
  bool port_id :1;
  bool stp_port_state :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_args {
 public:

  static const char* ascii_fingerprint; // = "0E57B1F5D8E36AA5124CF14C7AEFCAA5";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x57,0xB1,0xF5,0xD8,0xE3,0x6A,0xA5,0x12,0x4C,0xF1,0x4C,0x7A,0xEF,0xCA,0xA5};

  switch_sai_rpc_sai_thrift_set_stp_port_state_args(const switch_sai_rpc_sai_thrift_set_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_args& operator=(const switch_sai_rpc_sai_thrift_set_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_args() : stp_id(0), port_id(0), stp_port_state(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_args() throw();
  sai_thrift_object_id_t stp_id;
  sai_thrift_object_id_t port_id;
  sai_thrift_port_stp_port_state_t stp_port_state;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  void __set_port_id(const sai_thrift_object_id_t val);

  void __set_stp_port_state(const sai_thrift_port_stp_port_state_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_stp_port_state_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    if (!(port_id == rhs.port_id))
      return false;
    if (!(stp_port_state == rhs.stp_port_state))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_stp_port_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_stp_port_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_stp_port_state_args& obj);
};


class switch_sai_rpc_sai_thrift_set_stp_port_state_pargs {
 public:

  static const char* ascii_fingerprint; // = "0E57B1F5D8E36AA5124CF14C7AEFCAA5";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0x57,0xB1,0xF5,0xD8,0xE3,0x6A,0xA5,0x12,0x4C,0xF1,0x4C,0x7A,0xEF,0xCA,0xA5};


  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_pargs() throw();
  const sai_thrift_object_id_t* stp_id;
  const sai_thrift_object_id_t* port_id;
  const sai_thrift_port_stp_port_state_t* stp_port_state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_stp_port_state_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_stp_port_state_result(const switch_sai_rpc_sai_thrift_set_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_result& operator=(const switch_sai_rpc_sai_thrift_set_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_set_stp_port_state_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_stp_port_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_stp_port_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_stp_port_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_stp_port_state_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset {
  _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset;

class switch_sai_rpc_sai_thrift_set_stp_port_state_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_stp_port_state_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_stp_port_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_stp_port_state_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset() : stp_id(false), port_id(false) {}
  bool stp_id :1;
  bool port_id :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  switch_sai_rpc_sai_thrift_get_stp_port_state_args(const switch_sai_rpc_sai_thrift_get_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_args& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_state_args&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_args() : stp_id(0), port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_args() throw();
  sai_thrift_object_id_t stp_id;
  sai_thrift_object_id_t port_id;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_args__isset __isset;

  void __set_stp_id(const sai_thrift_object_id_t val);

  void __set_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_state_args & rhs) const
  {
    if (!(stp_id == rhs.stp_id))
      return false;
    if (!(port_id == rhs.port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_state_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_state_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_stp_port_state_args& obj);
};


class switch_sai_rpc_sai_thrift_get_stp_port_state_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_pargs() throw();
  const sai_thrift_object_id_t* stp_id;
  const sai_thrift_object_id_t* port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_stp_port_state_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_result {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};

  switch_sai_rpc_sai_thrift_get_stp_port_state_result(const switch_sai_rpc_sai_thrift_get_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_result& operator=(const switch_sai_rpc_sai_thrift_get_stp_port_state_result&);
  switch_sai_rpc_sai_thrift_get_stp_port_state_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_result() throw();
  sai_thrift_port_stp_port_state_t success;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_result__isset __isset;

  void __set_success(const sai_thrift_port_stp_port_state_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_stp_port_state_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_stp_port_state_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_stp_port_state_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_stp_port_state_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset {
  _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset;

class switch_sai_rpc_sai_thrift_get_stp_port_state_presult {
 public:

  static const char* ascii_fingerprint; // = "508A6EF1C84BD28CDBD0D21C132C2613";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x8A,0x6E,0xF1,0xC8,0x4B,0xD2,0x8C,0xDB,0xD0,0xD2,0x1C,0x13,0x2C,0x26,0x13};


  virtual ~switch_sai_rpc_sai_thrift_get_stp_port_state_presult() throw();
  sai_thrift_port_stp_port_state_t* success;

  _switch_sai_rpc_sai_thrift_get_stp_port_state_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_stp_port_state_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset() : thrift_neighbor_entry(false), thrift_attr_list(false) {}
  bool thrift_neighbor_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_args {
 public:

  static const char* ascii_fingerprint; // = "B514A2BE712350ADCDBE66550F04743C";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x14,0xA2,0xBE,0x71,0x23,0x50,0xAD,0xCD,0xBE,0x66,0x55,0x0F,0x04,0x74,0x3C};

  switch_sai_rpc_sai_thrift_create_neighbor_entry_args(const switch_sai_rpc_sai_thrift_create_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_args() throw();
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_neighbor_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "B514A2BE712350ADCDBE66550F04743C";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0x14,0xA2,0xBE,0x71,0x23,0x50,0xAD,0xCD,0xBE,0x66,0x55,0x0F,0x04,0x74,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs() throw();
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_neighbor_entry_result(const switch_sai_rpc_sai_thrift_create_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_create_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_neighbor_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_neighbor_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_neighbor_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_neighbor_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset() : thrift_neighbor_entry(false) {}
  bool thrift_neighbor_entry :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_args {
 public:

  static const char* ascii_fingerprint; // = "FD9A3C69C7C07D2665ABEFCB10D77C47";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x9A,0x3C,0x69,0xC7,0xC0,0x7D,0x26,0x65,0xAB,0xEF,0xCB,0x10,0xD7,0x7C,0x47};

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() throw();
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_neighbor_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "FD9A3C69C7C07D2665ABEFCB10D77C47";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x9A,0x3C,0x69,0xC7,0xC0,0x7D,0x26,0x65,0xAB,0xEF,0xCB,0x10,0xD7,0x7C,0x47};


  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs() throw();
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_neighbor_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult& obj);
};


class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result&);
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset() : thrift_neighbor_entry(false), thrift_attr(false) {}
  bool thrift_neighbor_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "A2CCC035CB10675540254530D40DA75D";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xCC,0xC0,0x35,0xCB,0x10,0x67,0x55,0x40,0x25,0x45,0x30,0xD4,0x0D,0xA7,0x5D};

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() throw();
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "A2CCC035CB10675540254530D40DA75D";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0xCC,0xC0,0x35,0xCB,0x10,0x67,0x55,0x40,0x25,0x45,0x30,0xD4,0x0D,0xA7,0x5D};


  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs() throw();
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset() : thrift_neighbor_entry(false) {}
  bool thrift_neighbor_entry :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "FD9A3C69C7C07D2665ABEFCB10D77C47";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x9A,0x3C,0x69,0xC7,0xC0,0x7D,0x26,0x65,0xAB,0xEF,0xCB,0x10,0xD7,0x7C,0x47};

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() throw();
  sai_thrift_neighbor_entry_t thrift_neighbor_entry;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args__isset __isset;

  void __set_thrift_neighbor_entry(const sai_thrift_neighbor_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & rhs) const
  {
    if (!(thrift_neighbor_entry == rhs.thrift_neighbor_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "FD9A3C69C7C07D2665ABEFCB10D77C47";
  static const uint8_t binary_fingerprint[16]; // = {0xFD,0x9A,0x3C,0x69,0xC7,0xC0,0x7D,0x26,0x65,0xAB,0xEF,0xCB,0x10,0xD7,0x7C,0x47};


  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs() throw();
  const sai_thrift_neighbor_entry_t* thrift_neighbor_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset() : thrift_attr_ids(false) {}
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};

  switch_sai_rpc_sai_thrift_get_switch_attribute_args(const switch_sai_rpc_sai_thrift_get_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_args() throw();
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_args__isset __isset;

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_attribute_args & rhs) const
  {
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_switch_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_switch_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "A803C54EAD95E24D90C5E66FB98EA72B";
  static const uint8_t binary_fingerprint[16]; // = {0xA8,0x03,0xC5,0x4E,0xAD,0x95,0xE2,0x4D,0x90,0xC5,0xE6,0x6F,0xB9,0x8E,0xA7,0x2B};


  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_pargs() throw();
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_switch_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_switch_attribute_result(const switch_sai_rpc_sai_thrift_get_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_get_switch_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_switch_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_switch_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_switch_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_switch_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_switch_attribute_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args& operator=(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args& obj);
};


class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset;

class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result {
 public:

  static const char* ascii_fingerprint; // = "269E02ADF00E3133977B130AAB4390CA";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x9E,0x02,0xAD,0xF0,0x0E,0x31,0x33,0x97,0x7B,0x13,0x0A,0xAB,0x43,0x90,0xCA};

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result& operator=(const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() throw();
  sai_thrift_attribute_t success;

  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result__isset __isset;

  void __set_success(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult {
 public:

  static const char* ascii_fingerprint; // = "269E02ADF00E3133977B130AAB4390CA";
  static const uint8_t binary_fingerprint[16]; // = {0x26,0x9E,0x02,0xAD,0xF0,0x0E,0x31,0x33,0x97,0x7B,0x13,0x0A,0xAB,0x43,0x90,0xCA};


  virtual ~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult() throw();
  sai_thrift_attribute_t* success;

  _switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_cpu_port_id_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_cpu_port_id_args(const switch_sai_rpc_sai_thrift_get_cpu_port_id_args&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_port_id_args&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_port_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_port_id_args& obj);
};


class switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_port_id_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_get_cpu_port_id_result(const switch_sai_rpc_sai_thrift_get_cpu_port_id_result&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_port_id_result&);
  switch_sai_rpc_sai_thrift_get_cpu_port_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_port_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_port_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_port_id_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_port_id_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_port_id_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_port_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_port_id_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_default_trap_group_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_default_trap_group_args(const switch_sai_rpc_sai_thrift_get_default_trap_group_args&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_get_default_trap_group_args&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_trap_group_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_trap_group_args& obj);
};


class switch_sai_rpc_sai_thrift_get_default_trap_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_trap_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_get_default_trap_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_get_default_trap_group_result(const switch_sai_rpc_sai_thrift_get_default_trap_group_result&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_get_default_trap_group_result&);
  switch_sai_rpc_sai_thrift_get_default_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_trap_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_trap_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_get_default_trap_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_trap_group_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_default_router_id_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_default_router_id_args(const switch_sai_rpc_sai_thrift_get_default_router_id_args&);
  switch_sai_rpc_sai_thrift_get_default_router_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_router_id_args&);
  switch_sai_rpc_sai_thrift_get_default_router_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_router_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_router_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_router_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_router_id_args& obj);
};


class switch_sai_rpc_sai_thrift_get_default_router_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_router_id_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_router_id_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_get_default_router_id_result(const switch_sai_rpc_sai_thrift_get_default_router_id_result&);
  switch_sai_rpc_sai_thrift_get_default_router_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_router_id_result&);
  switch_sai_rpc_sai_thrift_get_default_router_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_router_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_router_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_router_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_router_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_router_id_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_router_id_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_get_default_router_id_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_router_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_router_id_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args& obj);
};


class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result&);
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_default_vlan_id_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_default_vlan_id_args(const switch_sai_rpc_sai_thrift_get_default_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_args& operator=(const switch_sai_rpc_sai_thrift_get_default_vlan_id_args&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_vlan_id_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_vlan_id_args& obj);
};


class switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset {
  _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset;

class switch_sai_rpc_sai_thrift_get_default_vlan_id_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_get_default_vlan_id_result(const switch_sai_rpc_sai_thrift_get_default_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_result& operator=(const switch_sai_rpc_sai_thrift_get_default_vlan_id_result&);
  switch_sai_rpc_sai_thrift_get_default_vlan_id_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_default_vlan_id_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_default_vlan_id_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_vlan_id_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset {
  _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset;

class switch_sai_rpc_sai_thrift_get_default_vlan_id_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_get_default_vlan_id_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_default_vlan_id_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_default_vlan_id_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset() : port_name(false) {}
  bool port_name :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args& operator=(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() : port_name() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() throw();
  std::string port_name;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args__isset __isset;

  void __set_port_name(const std::string& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args & rhs) const
  {
    if (!(port_name == rhs.port_name))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args& obj);
};


class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs() throw();
  const std::string* port_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result& operator=(const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result&);
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset {
  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset;

class switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset() : attribute(false) {}
  bool attribute :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "27DEB0F26F1D78DB4F35392A80430DFB";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0xDE,0xB0,0xF2,0x6F,0x1D,0x78,0xDB,0x4F,0x35,0x39,0x2A,0x80,0x43,0x0D,0xFB};

  switch_sai_rpc_sai_thrift_set_switch_attribute_args(const switch_sai_rpc_sai_thrift_set_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_switch_attribute_args&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_args() throw();
  sai_thrift_attribute_t attribute;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_args__isset __isset;

  void __set_attribute(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_switch_attribute_args & rhs) const
  {
    if (!(attribute == rhs.attribute))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_switch_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_switch_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_switch_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_switch_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "27DEB0F26F1D78DB4F35392A80430DFB";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0xDE,0xB0,0xF2,0x6F,0x1D,0x78,0xDB,0x4F,0x35,0x39,0x2A,0x80,0x43,0x0D,0xFB};


  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_pargs() throw();
  const sai_thrift_attribute_t* attribute;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_switch_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_switch_attribute_result(const switch_sai_rpc_sai_thrift_set_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_switch_attribute_result&);
  switch_sai_rpc_sai_thrift_set_switch_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_switch_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_switch_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_switch_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_switch_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_switch_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_switch_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_switch_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_switch_attribute_presult& obj);
};


class switch_sai_rpc_sai_thrift_create_switch_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_create_switch_args(const switch_sai_rpc_sai_thrift_create_switch_args&);
  switch_sai_rpc_sai_thrift_create_switch_args& operator=(const switch_sai_rpc_sai_thrift_create_switch_args&);
  switch_sai_rpc_sai_thrift_create_switch_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_switch_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_create_switch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_switch_args& obj);
};


class switch_sai_rpc_sai_thrift_create_switch_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_create_switch_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_switch_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_switch_result__isset {
  _switch_sai_rpc_sai_thrift_create_switch_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_switch_result__isset;

class switch_sai_rpc_sai_thrift_create_switch_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_switch_result(const switch_sai_rpc_sai_thrift_create_switch_result&);
  switch_sai_rpc_sai_thrift_create_switch_result& operator=(const switch_sai_rpc_sai_thrift_create_switch_result&);
  switch_sai_rpc_sai_thrift_create_switch_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_switch_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_switch_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_switch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_switch_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_switch_presult__isset {
  _switch_sai_rpc_sai_thrift_create_switch_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_switch_presult__isset;

class switch_sai_rpc_sai_thrift_create_switch_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_switch_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_switch_presult& obj);
};


class switch_sai_rpc_sai_thrift_remove_switch_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_remove_switch_args(const switch_sai_rpc_sai_thrift_remove_switch_args&);
  switch_sai_rpc_sai_thrift_remove_switch_args& operator=(const switch_sai_rpc_sai_thrift_remove_switch_args&);
  switch_sai_rpc_sai_thrift_remove_switch_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_switch_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_remove_switch_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_switch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_switch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_switch_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_switch_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_remove_switch_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_switch_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_switch_result__isset {
  _switch_sai_rpc_sai_thrift_remove_switch_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_switch_result__isset;

class switch_sai_rpc_sai_thrift_remove_switch_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_switch_result(const switch_sai_rpc_sai_thrift_remove_switch_result&);
  switch_sai_rpc_sai_thrift_remove_switch_result& operator=(const switch_sai_rpc_sai_thrift_remove_switch_result&);
  switch_sai_rpc_sai_thrift_remove_switch_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_switch_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_switch_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_switch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_switch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_switch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_switch_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_switch_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_switch_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_switch_presult__isset;

class switch_sai_rpc_sai_thrift_remove_switch_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_switch_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_switch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_switch_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_bridge_port_args(const switch_sai_rpc_sai_thrift_create_bridge_port_args&);
  switch_sai_rpc_sai_thrift_create_bridge_port_args& operator=(const switch_sai_rpc_sai_thrift_create_bridge_port_args&);
  switch_sai_rpc_sai_thrift_create_bridge_port_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_bridge_port_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_port_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_port_args& obj);
};


class switch_sai_rpc_sai_thrift_create_bridge_port_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_port_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_create_bridge_port_result(const switch_sai_rpc_sai_thrift_create_bridge_port_result&);
  switch_sai_rpc_sai_thrift_create_bridge_port_result& operator=(const switch_sai_rpc_sai_thrift_create_bridge_port_result&);
  switch_sai_rpc_sai_thrift_create_bridge_port_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_create_bridge_port_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_port_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset;

class switch_sai_rpc_sai_thrift_create_bridge_port_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_port_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_create_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_port_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset() : bridge_port_id(false) {}
  bool bridge_port_id :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_bridge_port_args(const switch_sai_rpc_sai_thrift_remove_bridge_port_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_args& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_port_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_args() throw();
  sai_thrift_object_id_t bridge_port_id;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_port_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_port_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_port_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_port_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_bridge_port_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_port_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_bridge_port_result(const switch_sai_rpc_sai_thrift_remove_bridge_port_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_result& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_port_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_port_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_port_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_port_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_port_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_port_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_port_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_port_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_bridge_port_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_port_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_bridge_port_list_args(const switch_sai_rpc_sai_thrift_get_bridge_port_list_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_list_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_args() throw();
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_list_args& obj);
};


class switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs() throw();
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_get_bridge_port_list_result(const switch_sai_rpc_sai_thrift_get_bridge_port_list_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_list_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_list_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_list_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_list_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_list_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_list_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset() : bridge_port_id(false) {}
  bool bridge_port_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args() throw();
  sai_thrift_object_id_t bridge_port_id;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset() : bridge_port_id(false), thrift_attr(false) {}
  bool bridge_port_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args() : bridge_port_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args() throw();
  sai_thrift_object_id_t bridge_port_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args__isset __isset;

  void __set_bridge_port_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args & rhs) const
  {
    if (!(bridge_port_id == rhs.bridge_port_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_port_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_args__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_bridge_args__isset;

class switch_sai_rpc_sai_thrift_create_bridge_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_bridge_args(const switch_sai_rpc_sai_thrift_create_bridge_args&);
  switch_sai_rpc_sai_thrift_create_bridge_args& operator=(const switch_sai_rpc_sai_thrift_create_bridge_args&);
  switch_sai_rpc_sai_thrift_create_bridge_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_bridge_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_args& obj);
};


class switch_sai_rpc_sai_thrift_create_bridge_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_result__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_result__isset;

class switch_sai_rpc_sai_thrift_create_bridge_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_create_bridge_result(const switch_sai_rpc_sai_thrift_create_bridge_result&);
  switch_sai_rpc_sai_thrift_create_bridge_result& operator=(const switch_sai_rpc_sai_thrift_create_bridge_result&);
  switch_sai_rpc_sai_thrift_create_bridge_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_bridge_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_create_bridge_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_bridge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_bridge_presult__isset {
  _switch_sai_rpc_sai_thrift_create_bridge_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_bridge_presult__isset;

class switch_sai_rpc_sai_thrift_create_bridge_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_create_bridge_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_create_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_bridge_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_args__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_args__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_bridge_args(const switch_sai_rpc_sai_thrift_remove_bridge_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_args& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_args&);
  switch_sai_rpc_sai_thrift_remove_bridge_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_args() throw();
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_remove_bridge_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_bridge_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_pargs() throw();
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_result__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_result__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_bridge_result(const switch_sai_rpc_sai_thrift_remove_bridge_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_result& operator=(const switch_sai_rpc_sai_thrift_remove_bridge_result&);
  switch_sai_rpc_sai_thrift_remove_bridge_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_bridge_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_bridge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_bridge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_bridge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset;

class switch_sai_rpc_sai_thrift_remove_bridge_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_bridge_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_bridge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_bridge_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset() : bridge_id(false) {}
  bool bridge_id :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_bridge_attribute_args(const switch_sai_rpc_sai_thrift_get_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_args() throw();
  sai_thrift_object_id_t bridge_id;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_bridge_attribute_result(const switch_sai_rpc_sai_thrift_get_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_get_bridge_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_bridge_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_bridge_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_bridge_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset() : bridge_id(false), thrift_attr(false) {}
  bool bridge_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_bridge_attribute_args(const switch_sai_rpc_sai_thrift_set_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_bridge_attribute_args&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_args() : bridge_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_args() throw();
  sai_thrift_object_id_t bridge_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_args__isset __isset;

  void __set_bridge_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args & rhs) const
  {
    if (!(bridge_id == rhs.bridge_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs() throw();
  const sai_thrift_object_id_t* bridge_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_bridge_attribute_result(const switch_sai_rpc_sai_thrift_set_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_bridge_attribute_result&);
  switch_sai_rpc_sai_thrift_set_bridge_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_bridge_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_bridge_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_bridge_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_bridge_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_bridge_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_hostif_args(const switch_sai_rpc_sai_thrift_create_hostif_args&);
  switch_sai_rpc_sai_thrift_create_hostif_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_args&);
  switch_sai_rpc_sai_thrift_create_hostif_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_args& obj);
};


class switch_sai_rpc_sai_thrift_create_hostif_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_hostif_result(const switch_sai_rpc_sai_thrift_create_hostif_result&);
  switch_sai_rpc_sai_thrift_create_hostif_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_result&);
  switch_sai_rpc_sai_thrift_create_hostif_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_args__isset() : thrift_hif_id(false) {}
  bool thrift_hif_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_hostif_args(const switch_sai_rpc_sai_thrift_remove_hostif_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_args() throw();
  sai_thrift_object_id_t thrift_hif_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_hostif_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_pargs() throw();
  const sai_thrift_object_id_t* thrift_hif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_hostif_result(const switch_sai_rpc_sai_thrift_remove_hostif_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset() : thrift_hif_id(false) {}
  bool thrift_hif_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_hostif_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_args() throw();
  sai_thrift_object_id_t thrift_hif_id;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hif_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_hostif_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset() : thrift_hif_id(false), thrift_attr(false) {}
  bool thrift_hif_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_hostif_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_args() : thrift_hif_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_args() throw();
  sai_thrift_object_id_t thrift_hif_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_args__isset __isset;

  void __set_thrift_hif_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args & rhs) const
  {
    if (!(thrift_hif_id == rhs.thrift_hif_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hif_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_hostif_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_table_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_table_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset() : thrift_hostif_table_entry_id(false) {}
  bool thrift_hostif_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args() throw();
  sai_thrift_object_id_t thrift_hostif_table_entry_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset() : thrift_hostif_table_entry_id(false) {}
  bool thrift_hostif_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_table_entry_id;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset() : thrift_hostif_table_entry_id(false), thrift_attr(false) {}
  bool thrift_hostif_table_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() : thrift_hostif_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_table_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args__isset __isset;

  void __set_thrift_hostif_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & rhs) const
  {
    if (!(thrift_hostif_table_entry_id == rhs.thrift_hostif_table_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_table_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset() : thrift_hostif_trap_group_id(false) {}
  bool thrift_hostif_trap_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_group_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset() : thrift_hostif_trap_group_id(false) {}
  bool thrift_hostif_trap_group_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_group_id;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset() : thrift_hostif_trap_group_id(false), thrift_attr(false) {}
  bool thrift_hostif_trap_group_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() : thrift_hostif_trap_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_group_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_group_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_group_id == rhs.thrift_hostif_trap_group_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_group_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_hostif_trap_args(const switch_sai_rpc_sai_thrift_create_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_args& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_args& obj);
};


class switch_sai_rpc_sai_thrift_create_hostif_trap_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_hostif_trap_result(const switch_sai_rpc_sai_thrift_create_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_result& operator=(const switch_sai_rpc_sai_thrift_create_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_create_hostif_trap_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hostif_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset;

class switch_sai_rpc_sai_thrift_create_hostif_trap_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_hostif_trap_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hostif_trap_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset() : thrift_hostif_trap_id(false) {}
  bool thrift_hostif_trap_id :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_hostif_trap_args(const switch_sai_rpc_sai_thrift_remove_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_args& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_args&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_id;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_hostif_trap_result(const switch_sai_rpc_sai_thrift_remove_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_result& operator=(const switch_sai_rpc_sai_thrift_remove_hostif_trap_result&);
  switch_sai_rpc_sai_thrift_remove_hostif_trap_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hostif_trap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hostif_trap_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_hostif_trap_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hostif_trap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hostif_trap_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset() : thrift_hostif_trap_id(false) {}
  bool thrift_hostif_trap_id :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_id;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset() : thrift_hostif_trap_id(false), thrift_attr(false) {}
  bool thrift_hostif_trap_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args() : thrift_hostif_trap_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args() throw();
  sai_thrift_object_id_t thrift_hostif_trap_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args__isset __isset;

  void __set_thrift_hostif_trap_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args & rhs) const
  {
    if (!(thrift_hostif_trap_id == rhs.thrift_hostif_trap_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hostif_trap_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_acl_table_args(const switch_sai_rpc_sai_thrift_create_acl_table_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_args& obj);
};


class switch_sai_rpc_sai_thrift_create_acl_table_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_acl_table_result(const switch_sai_rpc_sai_thrift_create_acl_table_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset() : acl_table_id(false) {}
  bool acl_table_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_acl_table_args(const switch_sai_rpc_sai_thrift_remove_acl_table_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_args() : acl_table_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_args() throw();
  sai_thrift_object_id_t acl_table_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_args__isset __isset;

  void __set_acl_table_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_args & rhs) const
  {
    if (!(acl_table_id == rhs.acl_table_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_acl_table_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_pargs() throw();
  const sai_thrift_object_id_t* acl_table_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_acl_table_result(const switch_sai_rpc_sai_thrift_remove_acl_table_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset() : acl_table_id(false), thrift_attr_ids(false) {}
  bool acl_table_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args() : acl_table_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_args() throw();
  sai_thrift_object_id_t acl_table_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_args__isset __isset;

  void __set_acl_table_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args & rhs) const
  {
    if (!(acl_table_id == rhs.acl_table_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_acl_entry_args(const switch_sai_rpc_sai_thrift_create_acl_entry_args&);
  switch_sai_rpc_sai_thrift_create_acl_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_entry_args&);
  switch_sai_rpc_sai_thrift_create_acl_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_acl_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_acl_entry_result(const switch_sai_rpc_sai_thrift_create_acl_entry_result&);
  switch_sai_rpc_sai_thrift_create_acl_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_entry_result&);
  switch_sai_rpc_sai_thrift_create_acl_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_entry_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset() : acl_entry(false) {}
  bool acl_entry :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_acl_entry_args(const switch_sai_rpc_sai_thrift_remove_acl_entry_args&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_entry_args&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_args() : acl_entry(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_args() throw();
  sai_thrift_object_id_t acl_entry;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_args__isset __isset;

  void __set_acl_entry(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_entry_args & rhs) const
  {
    if (!(acl_entry == rhs.acl_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_acl_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_pargs() throw();
  const sai_thrift_object_id_t* acl_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_acl_entry_result(const switch_sai_rpc_sai_thrift_remove_acl_entry_result&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_entry_result&);
  switch_sai_rpc_sai_thrift_remove_acl_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset() : acl_entry_id(false), thrift_attr(false) {}
  bool acl_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args() : acl_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args() throw();
  sai_thrift_object_id_t acl_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_id == rhs.acl_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset() : acl_entry_id(false), thrift_attr_ids(false) {}
  bool acl_entry_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args() : acl_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args() throw();
  sai_thrift_object_id_t acl_entry_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args__isset __isset;

  void __set_acl_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args & rhs) const
  {
    if (!(acl_entry_id == rhs.acl_entry_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_entry_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_acl_table_group_args(const switch_sai_rpc_sai_thrift_create_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_acl_table_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_acl_table_group_result(const switch_sai_rpc_sai_thrift_create_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset() : acl_table_group_id(false) {}
  bool acl_table_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_acl_table_group_args(const switch_sai_rpc_sai_thrift_remove_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_args() : acl_table_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_args() throw();
  sai_thrift_object_id_t acl_table_group_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_args__isset __isset;

  void __set_acl_table_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args & rhs) const
  {
    if (!(acl_table_group_id == rhs.acl_table_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_acl_table_group_result(const switch_sai_rpc_sai_thrift_remove_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset() : acl_table_group_id(false) {}
  bool acl_table_group_id :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args() : acl_table_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_id;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args__isset __isset;

  void __set_acl_table_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args & rhs) const
  {
    if (!(acl_table_group_id == rhs.acl_table_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset() : acl_table_group_member_id(false) {}
  bool acl_table_group_member_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args() : acl_table_group_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args() throw();
  sai_thrift_object_id_t acl_table_group_member_id;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args__isset __isset;

  void __set_acl_table_group_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args & rhs) const
  {
    if (!(acl_table_group_member_id == rhs.acl_table_group_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset() : acl_table_group_member_id(false) {}
  bool acl_table_group_member_id :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() : acl_table_group_member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() throw();
  sai_thrift_object_id_t acl_table_group_member_id;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args__isset __isset;

  void __set_acl_table_group_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & rhs) const
  {
    if (!(acl_table_group_member_id == rhs.acl_table_group_member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_table_group_member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_acl_counter_args(const switch_sai_rpc_sai_thrift_create_acl_counter_args&);
  switch_sai_rpc_sai_thrift_create_acl_counter_args& operator=(const switch_sai_rpc_sai_thrift_create_acl_counter_args&);
  switch_sai_rpc_sai_thrift_create_acl_counter_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_acl_counter_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_counter_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_counter_args& obj);
};


class switch_sai_rpc_sai_thrift_create_acl_counter_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_counter_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_acl_counter_result(const switch_sai_rpc_sai_thrift_create_acl_counter_result&);
  switch_sai_rpc_sai_thrift_create_acl_counter_result& operator=(const switch_sai_rpc_sai_thrift_create_acl_counter_result&);
  switch_sai_rpc_sai_thrift_create_acl_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_acl_counter_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_acl_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_counter_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset;

class switch_sai_rpc_sai_thrift_create_acl_counter_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_acl_counter_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_acl_counter_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset() : acl_counter_id(false) {}
  bool acl_counter_id :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_acl_counter_args(const switch_sai_rpc_sai_thrift_remove_acl_counter_args&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_args& operator=(const switch_sai_rpc_sai_thrift_remove_acl_counter_args&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_args() : acl_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_args() throw();
  sai_thrift_object_id_t acl_counter_id;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_args__isset __isset;

  void __set_acl_counter_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_counter_args & rhs) const
  {
    if (!(acl_counter_id == rhs.acl_counter_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_counter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_counter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_counter_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_acl_counter_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_pargs() throw();
  const sai_thrift_object_id_t* acl_counter_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_counter_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_acl_counter_result(const switch_sai_rpc_sai_thrift_remove_acl_counter_result&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_result& operator=(const switch_sai_rpc_sai_thrift_remove_acl_counter_result&);
  switch_sai_rpc_sai_thrift_remove_acl_counter_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_acl_counter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_acl_counter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_acl_counter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_counter_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset;

class switch_sai_rpc_sai_thrift_remove_acl_counter_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_acl_counter_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_acl_counter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_acl_counter_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset() : acl_counter_id(false), thrift_attr_ids(false) {}
  bool acl_counter_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() : acl_counter_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() throw();
  sai_thrift_object_id_t acl_counter_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args__isset __isset;

  void __set_acl_counter_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args & rhs) const
  {
    if (!(acl_counter_id == rhs.acl_counter_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs() throw();
  const sai_thrift_object_id_t* acl_counter_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "8E0664A447CE441ED8746083D1DBE548";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x06,0x64,0xA4,0x47,0xCE,0x44,0x1E,0xD8,0x74,0x60,0x83,0xD1,0xDB,0xE5,0x48};

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result&);
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() throw();
  std::vector<sai_thrift_attribute_value_t>  success;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_attribute_value_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "8E0664A447CE441ED8746083D1DBE548";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x06,0x64,0xA4,0x47,0xCE,0x44,0x1E,0xD8,0x74,0x60,0x83,0xD1,0xDB,0xE5,0x48};


  virtual ~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult() throw();
  std::vector<sai_thrift_attribute_value_t> * success;

  _switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_args__isset {
  _switch_sai_rpc_sai_thrift_create_hash_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_hash_args__isset;

class switch_sai_rpc_sai_thrift_create_hash_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_hash_args(const switch_sai_rpc_sai_thrift_create_hash_args&);
  switch_sai_rpc_sai_thrift_create_hash_args& operator=(const switch_sai_rpc_sai_thrift_create_hash_args&);
  switch_sai_rpc_sai_thrift_create_hash_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hash_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_hash_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hash_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hash_args& obj);
};


class switch_sai_rpc_sai_thrift_create_hash_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_hash_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hash_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_result__isset {
  _switch_sai_rpc_sai_thrift_create_hash_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hash_result__isset;

class switch_sai_rpc_sai_thrift_create_hash_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_hash_result(const switch_sai_rpc_sai_thrift_create_hash_result&);
  switch_sai_rpc_sai_thrift_create_hash_result& operator=(const switch_sai_rpc_sai_thrift_create_hash_result&);
  switch_sai_rpc_sai_thrift_create_hash_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_hash_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_hash_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_hash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hash_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_hash_presult__isset {
  _switch_sai_rpc_sai_thrift_create_hash_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_hash_presult__isset;

class switch_sai_rpc_sai_thrift_create_hash_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_hash_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_hash_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_args__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_args__isset() : hash_id(false) {}
  bool hash_id :1;
} _switch_sai_rpc_sai_thrift_remove_hash_args__isset;

class switch_sai_rpc_sai_thrift_remove_hash_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_hash_args(const switch_sai_rpc_sai_thrift_remove_hash_args&);
  switch_sai_rpc_sai_thrift_remove_hash_args& operator=(const switch_sai_rpc_sai_thrift_remove_hash_args&);
  switch_sai_rpc_sai_thrift_remove_hash_args() : hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hash_args() throw();
  sai_thrift_object_id_t hash_id;

  _switch_sai_rpc_sai_thrift_remove_hash_args__isset __isset;

  void __set_hash_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hash_args & rhs) const
  {
    if (!(hash_id == rhs.hash_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hash_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hash_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hash_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_hash_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_hash_pargs() throw();
  const sai_thrift_object_id_t* hash_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hash_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_result__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hash_result__isset;

class switch_sai_rpc_sai_thrift_remove_hash_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_hash_result(const switch_sai_rpc_sai_thrift_remove_hash_result&);
  switch_sai_rpc_sai_thrift_remove_hash_result& operator=(const switch_sai_rpc_sai_thrift_remove_hash_result&);
  switch_sai_rpc_sai_thrift_remove_hash_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_hash_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_hash_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_hash_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_hash_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_hash_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hash_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_hash_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_hash_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_hash_presult__isset;

class switch_sai_rpc_sai_thrift_remove_hash_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_hash_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_hash_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_hash_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset() : thrift_hash_id(false), thrift_attr(false) {}
  bool thrift_hash_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_hash_attribute_args(const switch_sai_rpc_sai_thrift_set_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_args() : thrift_hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_args() throw();
  sai_thrift_object_id_t thrift_hash_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_args__isset __isset;

  void __set_thrift_hash_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hash_attribute_args & rhs) const
  {
    if (!(thrift_hash_id == rhs.thrift_hash_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hash_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_hash_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hash_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hash_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_hash_attribute_result(const switch_sai_rpc_sai_thrift_set_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_set_hash_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_hash_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hash_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_hash_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_hash_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_hash_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset() : thrift_hash_id(false) {}
  bool thrift_hash_id :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_hash_attribute_args(const switch_sai_rpc_sai_thrift_get_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_hash_attribute_args&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_args() : thrift_hash_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_args() throw();
  sai_thrift_object_id_t thrift_hash_id;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_args__isset __isset;

  void __set_thrift_hash_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hash_attribute_args & rhs) const
  {
    if (!(thrift_hash_id == rhs.thrift_hash_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hash_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hash_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hash_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_hash_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_hash_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hash_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_hash_attribute_result(const switch_sai_rpc_sai_thrift_get_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_hash_attribute_result&);
  switch_sai_rpc_sai_thrift_get_hash_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_hash_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_hash_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_hash_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hash_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_hash_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_hash_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_hash_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_hash_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_udf_group_args(const switch_sai_rpc_sai_thrift_create_udf_group_args&);
  switch_sai_rpc_sai_thrift_create_udf_group_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_group_args&);
  switch_sai_rpc_sai_thrift_create_udf_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_udf_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_udf_group_result(const switch_sai_rpc_sai_thrift_create_udf_group_result&);
  switch_sai_rpc_sai_thrift_create_udf_group_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_group_result&);
  switch_sai_rpc_sai_thrift_create_udf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset() : udf_group_id(false) {}
  bool udf_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_udf_group_args(const switch_sai_rpc_sai_thrift_remove_udf_group_args&);
  switch_sai_rpc_sai_thrift_remove_udf_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_group_args&);
  switch_sai_rpc_sai_thrift_remove_udf_group_args() : udf_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_args() throw();
  sai_thrift_object_id_t udf_group_id;

  _switch_sai_rpc_sai_thrift_remove_udf_group_args__isset __isset;

  void __set_udf_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_group_args & rhs) const
  {
    if (!(udf_group_id == rhs.udf_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_udf_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_pargs() throw();
  const sai_thrift_object_id_t* udf_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_udf_group_result(const switch_sai_rpc_sai_thrift_remove_udf_group_result&);
  switch_sai_rpc_sai_thrift_remove_udf_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_group_result&);
  switch_sai_rpc_sai_thrift_remove_udf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset() : thrift_udf_group_id(false) {}
  bool thrift_udf_group_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args() : thrift_udf_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_args() throw();
  sai_thrift_object_id_t thrift_udf_group_id;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_args__isset __isset;

  void __set_thrift_udf_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args & rhs) const
  {
    if (!(thrift_udf_group_id == rhs.thrift_udf_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_udf_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_udf_match_args(const switch_sai_rpc_sai_thrift_create_udf_match_args&);
  switch_sai_rpc_sai_thrift_create_udf_match_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_match_args&);
  switch_sai_rpc_sai_thrift_create_udf_match_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_match_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_match_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_match_args& obj);
};


class switch_sai_rpc_sai_thrift_create_udf_match_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_match_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_udf_match_result(const switch_sai_rpc_sai_thrift_create_udf_match_result&);
  switch_sai_rpc_sai_thrift_create_udf_match_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_match_result&);
  switch_sai_rpc_sai_thrift_create_udf_match_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_match_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_match_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_match_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_match_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_match_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset() : udf_match_id(false) {}
  bool udf_match_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_udf_match_args(const switch_sai_rpc_sai_thrift_remove_udf_match_args&);
  switch_sai_rpc_sai_thrift_remove_udf_match_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_match_args&);
  switch_sai_rpc_sai_thrift_remove_udf_match_args() : udf_match_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_args() throw();
  sai_thrift_object_id_t udf_match_id;

  _switch_sai_rpc_sai_thrift_remove_udf_match_args__isset __isset;

  void __set_udf_match_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_match_args & rhs) const
  {
    if (!(udf_match_id == rhs.udf_match_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_match_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_udf_match_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_pargs() throw();
  const sai_thrift_object_id_t* udf_match_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_match_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_udf_match_result(const switch_sai_rpc_sai_thrift_remove_udf_match_result&);
  switch_sai_rpc_sai_thrift_remove_udf_match_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_match_result&);
  switch_sai_rpc_sai_thrift_remove_udf_match_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_match_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_match_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_match_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_match_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_match_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset() : thrift_udf_match_id(false) {}
  bool thrift_udf_match_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args() : thrift_udf_match_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_args() throw();
  sai_thrift_object_id_t thrift_udf_match_id;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_args__isset __isset;

  void __set_thrift_udf_match_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args & rhs) const
  {
    if (!(thrift_udf_match_id == rhs.thrift_udf_match_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_match_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_udf_match_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_match_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_args__isset {
  _switch_sai_rpc_sai_thrift_create_udf_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_udf_args__isset;

class switch_sai_rpc_sai_thrift_create_udf_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_udf_args(const switch_sai_rpc_sai_thrift_create_udf_args&);
  switch_sai_rpc_sai_thrift_create_udf_args& operator=(const switch_sai_rpc_sai_thrift_create_udf_args&);
  switch_sai_rpc_sai_thrift_create_udf_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_udf_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_args& obj);
};


class switch_sai_rpc_sai_thrift_create_udf_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_result__isset {
  _switch_sai_rpc_sai_thrift_create_udf_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_result__isset;

class switch_sai_rpc_sai_thrift_create_udf_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_udf_result(const switch_sai_rpc_sai_thrift_create_udf_result&);
  switch_sai_rpc_sai_thrift_create_udf_result& operator=(const switch_sai_rpc_sai_thrift_create_udf_result&);
  switch_sai_rpc_sai_thrift_create_udf_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_udf_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_udf_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_udf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_udf_presult__isset {
  _switch_sai_rpc_sai_thrift_create_udf_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_udf_presult__isset;

class switch_sai_rpc_sai_thrift_create_udf_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_udf_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_udf_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_args__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_args__isset() : udf_id(false) {}
  bool udf_id :1;
} _switch_sai_rpc_sai_thrift_remove_udf_args__isset;

class switch_sai_rpc_sai_thrift_remove_udf_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_udf_args(const switch_sai_rpc_sai_thrift_remove_udf_args&);
  switch_sai_rpc_sai_thrift_remove_udf_args& operator=(const switch_sai_rpc_sai_thrift_remove_udf_args&);
  switch_sai_rpc_sai_thrift_remove_udf_args() : udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_args() throw();
  sai_thrift_object_id_t udf_id;

  _switch_sai_rpc_sai_thrift_remove_udf_args__isset __isset;

  void __set_udf_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_args & rhs) const
  {
    if (!(udf_id == rhs.udf_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_udf_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_pargs() throw();
  const sai_thrift_object_id_t* udf_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_result__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_result__isset;

class switch_sai_rpc_sai_thrift_remove_udf_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_udf_result(const switch_sai_rpc_sai_thrift_remove_udf_result&);
  switch_sai_rpc_sai_thrift_remove_udf_result& operator=(const switch_sai_rpc_sai_thrift_remove_udf_result&);
  switch_sai_rpc_sai_thrift_remove_udf_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_udf_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_udf_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_udf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_udf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_udf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_udf_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_udf_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_udf_presult__isset;

class switch_sai_rpc_sai_thrift_remove_udf_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_udf_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_udf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_udf_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset() : thrift_udf_id(false), thrift_attr(false) {}
  bool thrift_udf_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_udf_attribute_args(const switch_sai_rpc_sai_thrift_set_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_args() : thrift_udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_args() throw();
  sai_thrift_object_id_t thrift_udf_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_args__isset __isset;

  void __set_thrift_udf_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_udf_attribute_args & rhs) const
  {
    if (!(thrift_udf_id == rhs.thrift_udf_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_udf_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_udf_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_udf_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_udf_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_udf_attribute_result(const switch_sai_rpc_sai_thrift_set_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_set_udf_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_udf_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_udf_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_udf_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_udf_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_udf_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset() : thrift_udf_id(false) {}
  bool thrift_udf_id :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_udf_attribute_args(const switch_sai_rpc_sai_thrift_get_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_udf_attribute_args&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_args() : thrift_udf_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_args() throw();
  sai_thrift_object_id_t thrift_udf_id;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_args__isset __isset;

  void __set_thrift_udf_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_attribute_args & rhs) const
  {
    if (!(thrift_udf_id == rhs.thrift_udf_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_udf_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_udf_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_udf_attribute_result(const switch_sai_rpc_sai_thrift_get_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_udf_attribute_result&);
  switch_sai_rpc_sai_thrift_get_udf_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_udf_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_udf_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_udf_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_udf_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_udf_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_udf_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_udf_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_mirror_session_args(const switch_sai_rpc_sai_thrift_create_mirror_session_args&);
  switch_sai_rpc_sai_thrift_create_mirror_session_args& operator=(const switch_sai_rpc_sai_thrift_create_mirror_session_args&);
  switch_sai_rpc_sai_thrift_create_mirror_session_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_mirror_session_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mirror_session_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mirror_session_args& obj);
};


class switch_sai_rpc_sai_thrift_create_mirror_session_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mirror_session_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_mirror_session_result(const switch_sai_rpc_sai_thrift_create_mirror_session_result&);
  switch_sai_rpc_sai_thrift_create_mirror_session_result& operator=(const switch_sai_rpc_sai_thrift_create_mirror_session_result&);
  switch_sai_rpc_sai_thrift_create_mirror_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_mirror_session_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mirror_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mirror_session_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset {
  _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset;

class switch_sai_rpc_sai_thrift_create_mirror_session_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_mirror_session_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mirror_session_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset() : session_id(false) {}
  bool session_id :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_mirror_session_args(const switch_sai_rpc_sai_thrift_remove_mirror_session_args&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_args& operator=(const switch_sai_rpc_sai_thrift_remove_mirror_session_args&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_args() : session_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_args() throw();
  sai_thrift_object_id_t session_id;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_args__isset __isset;

  void __set_session_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mirror_session_args & rhs) const
  {
    if (!(session_id == rhs.session_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mirror_session_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mirror_session_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mirror_session_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_mirror_session_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_pargs() throw();
  const sai_thrift_object_id_t* session_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mirror_session_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_mirror_session_result(const switch_sai_rpc_sai_thrift_remove_mirror_session_result&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_result& operator=(const switch_sai_rpc_sai_thrift_remove_mirror_session_result&);
  switch_sai_rpc_sai_thrift_remove_mirror_session_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mirror_session_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mirror_session_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mirror_session_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mirror_session_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset;

class switch_sai_rpc_sai_thrift_remove_mirror_session_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_mirror_session_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_mirror_session_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mirror_session_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset() : thrift_mirror_id(false), thrift_attr(false) {}
  bool thrift_mirror_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_mirror_attribute_args(const switch_sai_rpc_sai_thrift_set_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_args() : thrift_mirror_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_args() throw();
  sai_thrift_object_id_t thrift_mirror_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_args__isset __isset;

  void __set_thrift_mirror_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args & rhs) const
  {
    if (!(thrift_mirror_id == rhs.thrift_mirror_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mirror_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mirror_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_mirror_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_mirror_attribute_result(const switch_sai_rpc_sai_thrift_set_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mirror_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mirror_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mirror_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_mirror_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_mirror_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_mirror_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mirror_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset() : thrift_mirror_id(false) {}
  bool thrift_mirror_id :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_mirror_attribute_args(const switch_sai_rpc_sai_thrift_get_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_mirror_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_args() : thrift_mirror_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_args() throw();
  sai_thrift_object_id_t thrift_mirror_id;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_args__isset __isset;

  void __set_thrift_mirror_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args & rhs) const
  {
    if (!(thrift_mirror_id == rhs.thrift_mirror_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mirror_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mirror_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_mirror_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_mirror_attribute_result(const switch_sai_rpc_sai_thrift_get_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_mirror_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mirror_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mirror_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mirror_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_mirror_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_mirror_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_mirror_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mirror_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset() : thrift_inseg_entry(false), thrift_attr_list(false) {}
  bool thrift_inseg_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_args {
 public:

  static const char* ascii_fingerprint; // = "4EC4E234F231120A8AA94DAEF4174F83";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xC4,0xE2,0x34,0xF2,0x31,0x12,0x0A,0x8A,0xA9,0x4D,0xAE,0xF4,0x17,0x4F,0x83};

  switch_sai_rpc_sai_thrift_create_inseg_entry_args(const switch_sai_rpc_sai_thrift_create_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_args() throw();
  sai_thrift_inseg_entry_t thrift_inseg_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_inseg_entry_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_inseg_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_inseg_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "4EC4E234F231120A8AA94DAEF4174F83";
  static const uint8_t binary_fingerprint[16]; // = {0x4E,0xC4,0xE2,0x34,0xF2,0x31,0x12,0x0A,0x8A,0xA9,0x4D,0xAE,0xF4,0x17,0x4F,0x83};


  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_pargs() throw();
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_inseg_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_inseg_entry_result(const switch_sai_rpc_sai_thrift_create_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_create_inseg_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_inseg_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_inseg_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_inseg_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_inseg_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset() : thrift_inseg_entry(false) {}
  bool thrift_inseg_entry :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_args {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};

  switch_sai_rpc_sai_thrift_remove_inseg_entry_args(const switch_sai_rpc_sai_thrift_remove_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_inseg_entry_args&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_args() throw();
  sai_thrift_inseg_entry_t thrift_inseg_entry;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_inseg_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_inseg_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};


  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs() throw();
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_inseg_entry_result(const switch_sai_rpc_sai_thrift_remove_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_inseg_entry_result&);
  switch_sai_rpc_sai_thrift_remove_inseg_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_inseg_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_inseg_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_inseg_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_inseg_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_inseg_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_inseg_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset() : thrift_inseg_entry(false), thrift_attr(false) {}
  bool thrift_inseg_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "CF803000F192EB120B3BD065813C376C";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x80,0x30,0x00,0xF1,0x92,0xEB,0x12,0x0B,0x3B,0xD0,0x65,0x81,0x3C,0x37,0x6C};

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args() throw();
  sai_thrift_inseg_entry_t thrift_inseg_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "CF803000F192EB120B3BD065813C376C";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x80,0x30,0x00,0xF1,0x92,0xEB,0x12,0x0B,0x3B,0xD0,0x65,0x81,0x3C,0x37,0x6C};


  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs() throw();
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset() : thrift_inseg_entry(false) {}
  bool thrift_inseg_entry :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args() throw();
  sai_thrift_inseg_entry_t thrift_inseg_entry;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args__isset __isset;

  void __set_thrift_inseg_entry(const sai_thrift_inseg_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args & rhs) const
  {
    if (!(thrift_inseg_entry == rhs.thrift_inseg_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3124E95D8111DAEB63649B04CEB6D5F";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x12,0x4E,0x95,0xD8,0x11,0x1D,0xAE,0xB6,0x36,0x49,0xB0,0x4C,0xEB,0x6D,0x5F};


  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs() throw();
  const sai_thrift_inseg_entry_t* thrift_inseg_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_args__isset {
  _switch_sai_rpc_sai_thrift_dump_log_args__isset() : dump_file_name(false) {}
  bool dump_file_name :1;
} _switch_sai_rpc_sai_thrift_dump_log_args__isset;

class switch_sai_rpc_sai_thrift_dump_log_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  switch_sai_rpc_sai_thrift_dump_log_args(const switch_sai_rpc_sai_thrift_dump_log_args&);
  switch_sai_rpc_sai_thrift_dump_log_args& operator=(const switch_sai_rpc_sai_thrift_dump_log_args&);
  switch_sai_rpc_sai_thrift_dump_log_args() : dump_file_name() {
  }

  virtual ~switch_sai_rpc_sai_thrift_dump_log_args() throw();
  std::string dump_file_name;

  _switch_sai_rpc_sai_thrift_dump_log_args__isset __isset;

  void __set_dump_file_name(const std::string& val);

  bool operator == (const switch_sai_rpc_sai_thrift_dump_log_args & rhs) const
  {
    if (!(dump_file_name == rhs.dump_file_name))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_dump_log_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_dump_log_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_dump_log_args& obj);
};


class switch_sai_rpc_sai_thrift_dump_log_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~switch_sai_rpc_sai_thrift_dump_log_pargs() throw();
  const std::string* dump_file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_dump_log_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_result__isset {
  _switch_sai_rpc_sai_thrift_dump_log_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_dump_log_result__isset;

class switch_sai_rpc_sai_thrift_dump_log_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_dump_log_result(const switch_sai_rpc_sai_thrift_dump_log_result&);
  switch_sai_rpc_sai_thrift_dump_log_result& operator=(const switch_sai_rpc_sai_thrift_dump_log_result&);
  switch_sai_rpc_sai_thrift_dump_log_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_dump_log_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_dump_log_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_dump_log_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_dump_log_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_dump_log_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_dump_log_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_dump_log_presult__isset {
  _switch_sai_rpc_sai_thrift_dump_log_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_dump_log_presult__isset;

class switch_sai_rpc_sai_thrift_dump_log_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_dump_log_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_dump_log_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_dump_log_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_args__isset {
  _switch_sai_rpc_sai_thrift_create_policer_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_policer_args__isset;

class switch_sai_rpc_sai_thrift_create_policer_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_policer_args(const switch_sai_rpc_sai_thrift_create_policer_args&);
  switch_sai_rpc_sai_thrift_create_policer_args& operator=(const switch_sai_rpc_sai_thrift_create_policer_args&);
  switch_sai_rpc_sai_thrift_create_policer_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_policer_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_policer_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_policer_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_policer_args& obj);
};


class switch_sai_rpc_sai_thrift_create_policer_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_policer_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_policer_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_result__isset {
  _switch_sai_rpc_sai_thrift_create_policer_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_policer_result__isset;

class switch_sai_rpc_sai_thrift_create_policer_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_policer_result(const switch_sai_rpc_sai_thrift_create_policer_result&);
  switch_sai_rpc_sai_thrift_create_policer_result& operator=(const switch_sai_rpc_sai_thrift_create_policer_result&);
  switch_sai_rpc_sai_thrift_create_policer_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_policer_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_policer_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_policer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_policer_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_policer_presult__isset {
  _switch_sai_rpc_sai_thrift_create_policer_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_policer_presult__isset;

class switch_sai_rpc_sai_thrift_create_policer_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_policer_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_policer_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_args__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_args__isset() : thrift_policer_id(false) {}
  bool thrift_policer_id :1;
} _switch_sai_rpc_sai_thrift_remove_policer_args__isset;

class switch_sai_rpc_sai_thrift_remove_policer_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_policer_args(const switch_sai_rpc_sai_thrift_remove_policer_args&);
  switch_sai_rpc_sai_thrift_remove_policer_args& operator=(const switch_sai_rpc_sai_thrift_remove_policer_args&);
  switch_sai_rpc_sai_thrift_remove_policer_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_policer_args() throw();
  sai_thrift_object_id_t thrift_policer_id;

  _switch_sai_rpc_sai_thrift_remove_policer_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_policer_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_policer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_policer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_policer_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_policer_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_policer_pargs() throw();
  const sai_thrift_object_id_t* thrift_policer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_policer_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_result__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_policer_result__isset;

class switch_sai_rpc_sai_thrift_remove_policer_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_policer_result(const switch_sai_rpc_sai_thrift_remove_policer_result&);
  switch_sai_rpc_sai_thrift_remove_policer_result& operator=(const switch_sai_rpc_sai_thrift_remove_policer_result&);
  switch_sai_rpc_sai_thrift_remove_policer_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_policer_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_policer_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_policer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_policer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_policer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_policer_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_policer_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_policer_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_policer_presult__isset;

class switch_sai_rpc_sai_thrift_remove_policer_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_policer_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_policer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_policer_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset() : thrift_policer_id(false) {}
  bool thrift_policer_id :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_policer_attribute_args(const switch_sai_rpc_sai_thrift_get_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_args() throw();
  sai_thrift_object_id_t thrift_policer_id;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_attribute_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_policer_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_policer_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_policer_attribute_result(const switch_sai_rpc_sai_thrift_get_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_get_policer_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_policer_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_policer_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset() : thrift_policer_id(false), thrift_attr(false) {}
  bool thrift_policer_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_policer_attribute_args(const switch_sai_rpc_sai_thrift_set_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_policer_attribute_args&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_args() throw();
  sai_thrift_object_id_t thrift_policer_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_policer_attribute_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_policer_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_policer_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_policer_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_policer_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_policer_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_policer_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_policer_attribute_result(const switch_sai_rpc_sai_thrift_set_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_policer_attribute_result&);
  switch_sai_rpc_sai_thrift_set_policer_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_policer_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_policer_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_policer_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_policer_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_policer_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_policer_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_policer_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_policer_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset() : thrift_policer_id(false), thrift_counter_ids(false) {}
  bool thrift_policer_id :1;
  bool thrift_counter_ids :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_policer_stats_args(const switch_sai_rpc_sai_thrift_get_policer_stats_args&);
  switch_sai_rpc_sai_thrift_get_policer_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_policer_stats_args&);
  switch_sai_rpc_sai_thrift_get_policer_stats_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_args() throw();
  sai_thrift_object_id_t thrift_policer_id;
  std::vector<sai_thrift_policer_stat_t>  thrift_counter_ids;

  _switch_sai_rpc_sai_thrift_get_policer_stats_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_policer_stat_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_stats_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_policer_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_pargs() throw();
  const sai_thrift_object_id_t* thrift_policer_id;
  const std::vector<sai_thrift_policer_stat_t> * thrift_counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_policer_stats_result(const switch_sai_rpc_sai_thrift_get_policer_stats_result&);
  switch_sai_rpc_sai_thrift_get_policer_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_policer_stats_result&);
  switch_sai_rpc_sai_thrift_get_policer_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_result() throw();
  std::vector<sai_thrift_uint64_t>  success;

  _switch_sai_rpc_sai_thrift_get_policer_stats_result__isset __isset;

  void __set_success(const std::vector<sai_thrift_uint64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_policer_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_policer_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_policer_stats_presult() throw();
  std::vector<sai_thrift_uint64_t> * success;

  _switch_sai_rpc_sai_thrift_get_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_policer_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset() : thrift_policer_id(false), thrift_counter_ids(false) {}
  bool thrift_policer_id :1;
  bool thrift_counter_ids :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_clear_policer_stats_args(const switch_sai_rpc_sai_thrift_clear_policer_stats_args&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_policer_stats_args&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_args() : thrift_policer_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_args() throw();
  sai_thrift_object_id_t thrift_policer_id;
  std::vector<sai_thrift_policer_stat_t>  thrift_counter_ids;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_args__isset __isset;

  void __set_thrift_policer_id(const sai_thrift_object_id_t val);

  void __set_thrift_counter_ids(const std::vector<sai_thrift_policer_stat_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_policer_stats_args & rhs) const
  {
    if (!(thrift_policer_id == rhs.thrift_policer_id))
      return false;
    if (!(thrift_counter_ids == rhs.thrift_counter_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_policer_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_policer_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_policer_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_clear_policer_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_pargs() throw();
  const sai_thrift_object_id_t* thrift_policer_id;
  const std::vector<sai_thrift_policer_stat_t> * thrift_counter_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_policer_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_clear_policer_stats_result(const switch_sai_rpc_sai_thrift_clear_policer_stats_result&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_policer_stats_result&);
  switch_sai_rpc_sai_thrift_clear_policer_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_policer_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_policer_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_policer_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_policer_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_policer_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_clear_policer_stats_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_policer_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_policer_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_scheduler_profile_args(const switch_sai_rpc_sai_thrift_create_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_scheduler_profile_result(const switch_sai_rpc_sai_thrift_create_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_profile_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_scheduler_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset() : scheduler_id(false) {}
  bool scheduler_id :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() : scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() throw();
  sai_thrift_object_id_t scheduler_id;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_args__isset __isset;

  void __set_scheduler_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args & rhs) const
  {
    if (!(scheduler_id == rhs.scheduler_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs() throw();
  const sai_thrift_object_id_t* scheduler_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset() : thrift_scheduler_id(false) {}
  bool thrift_scheduler_id :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args() : thrift_scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_args() throw();
  sai_thrift_object_id_t thrift_scheduler_id;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_args__isset __isset;

  void __set_thrift_scheduler_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args & rhs) const
  {
    if (!(thrift_scheduler_id == rhs.thrift_scheduler_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_scheduler_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset() : thrift_scheduler_id(false), thrift_attr(false) {}
  bool thrift_scheduler_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args() : thrift_scheduler_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_args() throw();
  sai_thrift_object_id_t thrift_scheduler_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_args__isset __isset;

  void __set_thrift_scheduler_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args & rhs) const
  {
    if (!(thrift_scheduler_id == rhs.thrift_scheduler_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs() throw();
  const sai_thrift_object_id_t* thrift_scheduler_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_scheduler_group_args(const switch_sai_rpc_sai_thrift_create_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_args& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_scheduler_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_scheduler_group_result(const switch_sai_rpc_sai_thrift_create_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_result& operator=(const switch_sai_rpc_sai_thrift_create_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_create_scheduler_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_scheduler_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_scheduler_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_scheduler_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_scheduler_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset() : scheduler_group_id(false) {}
  bool scheduler_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_scheduler_group_args(const switch_sai_rpc_sai_thrift_remove_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_group_args&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_args() throw();
  sai_thrift_object_id_t scheduler_group_id;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_scheduler_group_result(const switch_sai_rpc_sai_thrift_remove_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_scheduler_group_result&);
  switch_sai_rpc_sai_thrift_remove_scheduler_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_scheduler_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_scheduler_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_scheduler_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_scheduler_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_scheduler_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset() : scheduler_group_id(false) {}
  bool scheduler_group_id :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args() throw();
  sai_thrift_object_id_t scheduler_group_id;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset() : scheduler_group_id(false), thrift_attr(false) {}
  bool scheduler_group_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args() : scheduler_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args() throw();
  sai_thrift_object_id_t scheduler_group_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args__isset __isset;

  void __set_scheduler_group_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args & rhs) const
  {
    if (!(scheduler_group_id == rhs.scheduler_group_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* scheduler_group_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset() : queue_id(false), counter_ids(false), number_of_counters(false) {}
  bool queue_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_get_queue_stats_args(const switch_sai_rpc_sai_thrift_get_queue_stats_args&);
  switch_sai_rpc_sai_thrift_get_queue_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_queue_stats_args&);
  switch_sai_rpc_sai_thrift_get_queue_stats_args() : queue_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_args() throw();
  sai_thrift_object_id_t queue_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_queue_stats_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_stats_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_queue_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_pargs() throw();
  const sai_thrift_object_id_t* queue_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_queue_stats_result(const switch_sai_rpc_sai_thrift_get_queue_stats_result&);
  switch_sai_rpc_sai_thrift_get_queue_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_queue_stats_result&);
  switch_sai_rpc_sai_thrift_get_queue_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_result() throw();
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_queue_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_queue_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_queue_stats_presult() throw();
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset() : queue_id(false), counter_ids(false), number_of_counters(false) {}
  bool queue_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_clear_queue_stats_args(const switch_sai_rpc_sai_thrift_clear_queue_stats_args&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_queue_stats_args&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_args() : queue_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_args() throw();
  sai_thrift_object_id_t queue_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_queue_stats_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_queue_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_queue_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_queue_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_clear_queue_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_pargs() throw();
  const sai_thrift_object_id_t* queue_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_queue_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_clear_queue_stats_result(const switch_sai_rpc_sai_thrift_clear_queue_stats_result&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_queue_stats_result&);
  switch_sai_rpc_sai_thrift_clear_queue_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_queue_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_queue_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_queue_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_queue_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_queue_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_clear_queue_stats_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_queue_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_queue_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_args__isset {
  _switch_sai_rpc_sai_thrift_create_queue_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_queue_args__isset;

class switch_sai_rpc_sai_thrift_create_queue_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_queue_args(const switch_sai_rpc_sai_thrift_create_queue_args&);
  switch_sai_rpc_sai_thrift_create_queue_args& operator=(const switch_sai_rpc_sai_thrift_create_queue_args&);
  switch_sai_rpc_sai_thrift_create_queue_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_queue_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_queue_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_queue_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_queue_args& obj);
};


class switch_sai_rpc_sai_thrift_create_queue_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_queue_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_queue_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_result__isset {
  _switch_sai_rpc_sai_thrift_create_queue_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_queue_result__isset;

class switch_sai_rpc_sai_thrift_create_queue_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_queue_result(const switch_sai_rpc_sai_thrift_create_queue_result&);
  switch_sai_rpc_sai_thrift_create_queue_result& operator=(const switch_sai_rpc_sai_thrift_create_queue_result&);
  switch_sai_rpc_sai_thrift_create_queue_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_queue_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_queue_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_queue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_queue_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_queue_presult__isset {
  _switch_sai_rpc_sai_thrift_create_queue_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_queue_presult__isset;

class switch_sai_rpc_sai_thrift_create_queue_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_queue_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_queue_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_args__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_args__isset() : queue_id(false) {}
  bool queue_id :1;
} _switch_sai_rpc_sai_thrift_remove_queue_args__isset;

class switch_sai_rpc_sai_thrift_remove_queue_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_queue_args(const switch_sai_rpc_sai_thrift_remove_queue_args&);
  switch_sai_rpc_sai_thrift_remove_queue_args& operator=(const switch_sai_rpc_sai_thrift_remove_queue_args&);
  switch_sai_rpc_sai_thrift_remove_queue_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_queue_args() throw();
  sai_thrift_object_id_t queue_id;

  _switch_sai_rpc_sai_thrift_remove_queue_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_queue_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_queue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_queue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_queue_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_queue_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_queue_pargs() throw();
  const sai_thrift_object_id_t* queue_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_queue_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_result__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_queue_result__isset;

class switch_sai_rpc_sai_thrift_remove_queue_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_queue_result(const switch_sai_rpc_sai_thrift_remove_queue_result&);
  switch_sai_rpc_sai_thrift_remove_queue_result& operator=(const switch_sai_rpc_sai_thrift_remove_queue_result&);
  switch_sai_rpc_sai_thrift_remove_queue_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_queue_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_queue_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_queue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_queue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_queue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_queue_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_queue_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_queue_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_queue_presult__isset;

class switch_sai_rpc_sai_thrift_remove_queue_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_queue_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_queue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_queue_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset() : queue_id(false) {}
  bool queue_id :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_queue_attribute_args(const switch_sai_rpc_sai_thrift_get_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_args() throw();
  sai_thrift_object_id_t queue_id;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_attribute_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_queue_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_pargs() throw();
  const sai_thrift_object_id_t* queue_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_queue_attribute_result(const switch_sai_rpc_sai_thrift_get_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_get_queue_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_queue_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_queue_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_queue_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_queue_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset() : queue_id(false), thrift_attr(false) {}
  bool queue_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_queue_attribute_args(const switch_sai_rpc_sai_thrift_set_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_queue_attribute_args&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_args() : queue_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_args() throw();
  sai_thrift_object_id_t queue_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_args__isset __isset;

  void __set_queue_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_queue_attribute_args & rhs) const
  {
    if (!(queue_id == rhs.queue_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_queue_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_queue_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_queue_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_queue_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_pargs() throw();
  const sai_thrift_object_id_t* queue_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_queue_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_queue_attribute_result(const switch_sai_rpc_sai_thrift_set_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_queue_attribute_result&);
  switch_sai_rpc_sai_thrift_set_queue_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_queue_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_queue_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_queue_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_queue_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_queue_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_queue_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_queue_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_queue_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_buffer_profile_args(const switch_sai_rpc_sai_thrift_create_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_buffer_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_buffer_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_create_buffer_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_buffer_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_buffer_profile_result(const switch_sai_rpc_sai_thrift_create_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_create_buffer_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_buffer_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_buffer_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_buffer_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_buffer_profile_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_buffer_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset() : buffer_profile_id(false) {}
  bool buffer_profile_id :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_buffer_profile_args(const switch_sai_rpc_sai_thrift_remove_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_buffer_profile_args&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_args() throw();
  sai_thrift_object_id_t buffer_profile_id;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_buffer_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_buffer_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_buffer_profile_result(const switch_sai_rpc_sai_thrift_remove_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_buffer_profile_result&);
  switch_sai_rpc_sai_thrift_remove_buffer_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_buffer_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_buffer_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_buffer_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_buffer_profile_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_buffer_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_buffer_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset() : buffer_profile_id(false) {}
  bool buffer_profile_id :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args() throw();
  sai_thrift_object_id_t buffer_profile_id;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset() : buffer_profile_id(false), thrift_attr(false) {}
  bool buffer_profile_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args() : buffer_profile_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args() throw();
  sai_thrift_object_id_t buffer_profile_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args__isset __isset;

  void __set_buffer_profile_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args & rhs) const
  {
    if (!(buffer_profile_id == rhs.buffer_profile_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs() throw();
  const sai_thrift_object_id_t* buffer_profile_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result&);
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_pool_profile_args(const switch_sai_rpc_sai_thrift_create_pool_profile_args&);
  switch_sai_rpc_sai_thrift_create_pool_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_pool_profile_args&);
  switch_sai_rpc_sai_thrift_create_pool_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_pool_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_pool_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_pool_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_pool_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_pool_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_create_pool_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_pool_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_pool_profile_result(const switch_sai_rpc_sai_thrift_create_pool_profile_result&);
  switch_sai_rpc_sai_thrift_create_pool_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_pool_profile_result&);
  switch_sai_rpc_sai_thrift_create_pool_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_pool_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_pool_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_pool_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_pool_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_pool_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_pool_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_pool_profile_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_pool_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_pool_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_args__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_priority_group_args(const switch_sai_rpc_sai_thrift_create_priority_group_args&);
  switch_sai_rpc_sai_thrift_create_priority_group_args& operator=(const switch_sai_rpc_sai_thrift_create_priority_group_args&);
  switch_sai_rpc_sai_thrift_create_priority_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_priority_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_priority_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_priority_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_priority_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_priority_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_result__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_priority_group_result(const switch_sai_rpc_sai_thrift_create_priority_group_result&);
  switch_sai_rpc_sai_thrift_create_priority_group_result& operator=(const switch_sai_rpc_sai_thrift_create_priority_group_result&);
  switch_sai_rpc_sai_thrift_create_priority_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_priority_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_priority_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_priority_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_priority_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_priority_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_priority_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset() : priority_group_id(false) {}
  bool priority_group_id :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_priority_group_args(const switch_sai_rpc_sai_thrift_remove_priority_group_args&);
  switch_sai_rpc_sai_thrift_remove_priority_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_priority_group_args&);
  switch_sai_rpc_sai_thrift_remove_priority_group_args() : priority_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_args() throw();
  sai_thrift_object_id_t priority_group_id;

  _switch_sai_rpc_sai_thrift_remove_priority_group_args__isset __isset;

  void __set_priority_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_priority_group_args & rhs) const
  {
    if (!(priority_group_id == rhs.priority_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_priority_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_priority_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_priority_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_priority_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_pargs() throw();
  const sai_thrift_object_id_t* priority_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_priority_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_priority_group_result(const switch_sai_rpc_sai_thrift_remove_priority_group_result&);
  switch_sai_rpc_sai_thrift_remove_priority_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_priority_group_result&);
  switch_sai_rpc_sai_thrift_remove_priority_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_priority_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_priority_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_priority_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_priority_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_priority_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_priority_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_priority_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_priority_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_priority_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset() : priority_group_id(false) {}
  bool priority_group_id :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args() : priority_group_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_args() throw();
  sai_thrift_object_id_t priority_group_id;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_args__isset __isset;

  void __set_priority_group_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args & rhs) const
  {
    if (!(priority_group_id == rhs.priority_group_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_priority_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* priority_group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_priority_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset() : pg_id(false), thrift_attr(false) {}
  bool pg_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() : pg_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() throw();
  sai_thrift_object_id_t pg_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_args__isset __isset;

  void __set_pg_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args & rhs) const
  {
    if (!(pg_id == rhs.pg_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_priority_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* pg_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result&);
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_priority_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset() : pg_id(false), counter_ids(false), number_of_counters(false) {}
  bool pg_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_get_pg_stats_args(const switch_sai_rpc_sai_thrift_get_pg_stats_args&);
  switch_sai_rpc_sai_thrift_get_pg_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_pg_stats_args&);
  switch_sai_rpc_sai_thrift_get_pg_stats_args() : pg_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_args() throw();
  sai_thrift_object_id_t pg_id;
  std::vector<sai_thrift_pg_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_pg_stats_args__isset __isset;

  void __set_pg_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_pg_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_pg_stats_args & rhs) const
  {
    if (!(pg_id == rhs.pg_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_pg_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_pg_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_pg_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_pg_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_pargs() throw();
  const sai_thrift_object_id_t* pg_id;
  const std::vector<sai_thrift_pg_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_pg_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_pg_stats_result(const switch_sai_rpc_sai_thrift_get_pg_stats_result&);
  switch_sai_rpc_sai_thrift_get_pg_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_pg_stats_result&);
  switch_sai_rpc_sai_thrift_get_pg_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_result() throw();
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_pg_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_pg_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_pg_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_pg_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_pg_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_pg_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_pg_stats_presult() throw();
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_pg_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_pg_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_wred_profile_args(const switch_sai_rpc_sai_thrift_create_wred_profile_args&);
  switch_sai_rpc_sai_thrift_create_wred_profile_args& operator=(const switch_sai_rpc_sai_thrift_create_wred_profile_args&);
  switch_sai_rpc_sai_thrift_create_wred_profile_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_wred_profile_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_wred_profile_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_wred_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_wred_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_wred_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_create_wred_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_wred_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_wred_profile_result(const switch_sai_rpc_sai_thrift_create_wred_profile_result&);
  switch_sai_rpc_sai_thrift_create_wred_profile_result& operator=(const switch_sai_rpc_sai_thrift_create_wred_profile_result&);
  switch_sai_rpc_sai_thrift_create_wred_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_wred_profile_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_wred_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_wred_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_wred_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_wred_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset;

class switch_sai_rpc_sai_thrift_create_wred_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_wred_profile_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_wred_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_wred_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset() : wred_id(false) {}
  bool wred_id :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_wred_profile_args(const switch_sai_rpc_sai_thrift_remove_wred_profile_args&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_args& operator=(const switch_sai_rpc_sai_thrift_remove_wred_profile_args&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_args() throw();
  sai_thrift_object_id_t wred_id;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_wred_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_wred_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_wred_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_wred_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_wred_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_pargs() throw();
  const sai_thrift_object_id_t* wred_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_wred_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_wred_profile_result(const switch_sai_rpc_sai_thrift_remove_wred_profile_result&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_result& operator=(const switch_sai_rpc_sai_thrift_remove_wred_profile_result&);
  switch_sai_rpc_sai_thrift_remove_wred_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_wred_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_wred_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_wred_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_wred_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset;

class switch_sai_rpc_sai_thrift_remove_wred_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_wred_profile_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_wred_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_wred_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset() : wred_id(false) {}
  bool wred_id :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args& operator=(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args() throw();
  sai_thrift_object_id_t wred_id;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs() throw();
  const sai_thrift_object_id_t* wred_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result& operator=(const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset;

class switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset() : wred_id(false), thrift_attr(false) {}
  bool wred_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args& operator=(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args() : wred_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args() throw();
  sai_thrift_object_id_t wred_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args__isset __isset;

  void __set_wred_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args & rhs) const
  {
    if (!(wred_id == rhs.wred_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args& obj);
};


class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs() throw();
  const sai_thrift_object_id_t* wred_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result& operator=(const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result&);
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset {
  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset;

class switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_args__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_args__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_qos_map_args(const switch_sai_rpc_sai_thrift_create_qos_map_args&);
  switch_sai_rpc_sai_thrift_create_qos_map_args& operator=(const switch_sai_rpc_sai_thrift_create_qos_map_args&);
  switch_sai_rpc_sai_thrift_create_qos_map_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_qos_map_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_qos_map_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_qos_map_args& obj);
};


class switch_sai_rpc_sai_thrift_create_qos_map_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_qos_map_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_result__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_result__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_qos_map_result(const switch_sai_rpc_sai_thrift_create_qos_map_result&);
  switch_sai_rpc_sai_thrift_create_qos_map_result& operator=(const switch_sai_rpc_sai_thrift_create_qos_map_result&);
  switch_sai_rpc_sai_thrift_create_qos_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_qos_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_qos_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_qos_map_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset {
  _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset;

class switch_sai_rpc_sai_thrift_create_qos_map_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_qos_map_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_qos_map_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset() : qos_map_id(false) {}
  bool qos_map_id :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_qos_map_args(const switch_sai_rpc_sai_thrift_remove_qos_map_args&);
  switch_sai_rpc_sai_thrift_remove_qos_map_args& operator=(const switch_sai_rpc_sai_thrift_remove_qos_map_args&);
  switch_sai_rpc_sai_thrift_remove_qos_map_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_args() throw();
  sai_thrift_object_id_t qos_map_id;

  _switch_sai_rpc_sai_thrift_remove_qos_map_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_qos_map_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_qos_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_qos_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_qos_map_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_qos_map_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_pargs() throw();
  const sai_thrift_object_id_t* qos_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_qos_map_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_qos_map_result(const switch_sai_rpc_sai_thrift_remove_qos_map_result&);
  switch_sai_rpc_sai_thrift_remove_qos_map_result& operator=(const switch_sai_rpc_sai_thrift_remove_qos_map_result&);
  switch_sai_rpc_sai_thrift_remove_qos_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_qos_map_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_qos_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_qos_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_qos_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_qos_map_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset;

class switch_sai_rpc_sai_thrift_remove_qos_map_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_qos_map_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_qos_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_qos_map_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset() : qos_map_id(false) {}
  bool qos_map_id :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_args() throw();
  sai_thrift_object_id_t qos_map_id;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_qos_map_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* qos_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_qos_map_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset() : qos_map_id(false), thrift_attr(false) {}
  bool qos_map_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args() : qos_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_args() throw();
  sai_thrift_object_id_t qos_map_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_args__isset __isset;

  void __set_qos_map_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args & rhs) const
  {
    if (!(qos_map_id == rhs.qos_map_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_qos_map_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* qos_map_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_qos_map_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_l2mc_group_args(const switch_sai_rpc_sai_thrift_create_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_l2mc_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_l2mc_group_result(const switch_sai_rpc_sai_thrift_create_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_l2mc_group_args(const switch_sai_rpc_sai_thrift_remove_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_l2mc_group_result(const switch_sai_rpc_sai_thrift_remove_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset() : thrift_l2mc_entry(false), thrift_attr_list(false) {}
  bool thrift_l2mc_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_args {
 public:

  static const char* ascii_fingerprint; // = "BFA66FDBE1D9C35BBF780AA4698BFDE0";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xA6,0x6F,0xDB,0xE1,0xD9,0xC3,0x5B,0xBF,0x78,0x0A,0xA4,0x69,0x8B,0xFD,0xE0};

  switch_sai_rpc_sai_thrift_create_l2mc_entry_args(const switch_sai_rpc_sai_thrift_create_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_args() throw();
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "BFA66FDBE1D9C35BBF780AA4698BFDE0";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xA6,0x6F,0xDB,0xE1,0xD9,0xC3,0x5B,0xBF,0x78,0x0A,0xA4,0x69,0x8B,0xFD,0xE0};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs() throw();
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_l2mc_entry_result(const switch_sai_rpc_sai_thrift_create_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_create_l2mc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_l2mc_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_l2mc_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_l2mc_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset() : thrift_l2mc_entry(false) {}
  bool thrift_l2mc_entry :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_args {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_args() throw();
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs() throw();
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset() : thrift_l2mc_entry(false), thrift_attr(false) {}
  bool thrift_l2mc_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "93CF979777B8D90A89608140E617E6F1";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCF,0x97,0x97,0x77,0xB8,0xD9,0x0A,0x89,0x60,0x81,0x40,0xE6,0x17,0xE6,0xF1};

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() throw();
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "93CF979777B8D90A89608140E617E6F1";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCF,0x97,0x97,0x77,0xB8,0xD9,0x0A,0x89,0x60,0x81,0x40,0xE6,0x17,0xE6,0xF1};


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs() throw();
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset() : thrift_l2mc_entry(false) {}
  bool thrift_l2mc_entry :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() throw();
  sai_thrift_l2mc_entry_t thrift_l2mc_entry;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args__isset __isset;

  void __set_thrift_l2mc_entry(const sai_thrift_l2mc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & rhs) const
  {
    if (!(thrift_l2mc_entry == rhs.thrift_l2mc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs() throw();
  const sai_thrift_l2mc_entry_t* thrift_l2mc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset() : thrift_mcast_fdb_entry(false), thrift_attr_list(false) {}
  bool thrift_mcast_fdb_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args {
 public:

  static const char* ascii_fingerprint; // = "2AC189C0906BDB2C4DF80A3A41316347";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC1,0x89,0xC0,0x90,0x6B,0xDB,0x2C,0x4D,0xF8,0x0A,0x3A,0x41,0x31,0x63,0x47};

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args() throw();
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "2AC189C0906BDB2C4DF80A3A41316347";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0xC1,0x89,0xC0,0x90,0x6B,0xDB,0x2C,0x4D,0xF8,0x0A,0x3A,0x41,0x31,0x63,0x47};


  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset() : thrift_mcast_fdb_entry(false) {}
  bool thrift_mcast_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() throw();
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};


  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result&);
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset() : thrift_mcast_fdb_entry(false), thrift_attr(false) {}
  bool thrift_mcast_fdb_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "BBE542B2E3F769195A8D0614387A6C87";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xE5,0x42,0xB2,0xE3,0xF7,0x69,0x19,0x5A,0x8D,0x06,0x14,0x38,0x7A,0x6C,0x87};

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() throw();
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "BBE542B2E3F769195A8D0614387A6C87";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0xE5,0x42,0xB2,0xE3,0xF7,0x69,0x19,0x5A,0x8D,0x06,0x14,0x38,0x7A,0x6C,0x87};


  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset() : thrift_mcast_fdb_entry(false) {}
  bool thrift_mcast_fdb_entry :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() throw();
  sai_thrift_mcast_fdb_entry_t thrift_mcast_fdb_entry;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args__isset __isset;

  void __set_thrift_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & rhs) const
  {
    if (!(thrift_mcast_fdb_entry == rhs.thrift_mcast_fdb_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C5D4FE9FBCAE37F18486AD94937ED27";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x5D,0x4F,0xE9,0xFB,0xCA,0xE3,0x7F,0x18,0x48,0x6A,0xD9,0x49,0x37,0xED,0x27};


  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs() throw();
  const sai_thrift_mcast_fdb_entry_t* thrift_mcast_fdb_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_ipmc_group_args(const switch_sai_rpc_sai_thrift_create_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_ipmc_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_ipmc_group_result(const switch_sai_rpc_sai_thrift_create_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_ipmc_group_args(const switch_sai_rpc_sai_thrift_remove_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_ipmc_group_result(const switch_sai_rpc_sai_thrift_remove_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_rpf_group_args(const switch_sai_rpc_sai_thrift_create_rpf_group_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_args& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_rpf_group_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_args& obj);
};


class switch_sai_rpc_sai_thrift_create_rpf_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_rpf_group_result(const switch_sai_rpc_sai_thrift_create_rpf_group_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_result& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_rpf_group_args(const switch_sai_rpc_sai_thrift_remove_rpf_group_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_args& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_rpf_group_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_rpf_group_result(const switch_sai_rpc_sai_thrift_remove_rpf_group_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_result& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset() : grp_id(false) {}
  bool grp_id :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args() : grp_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args() throw();
  sai_thrift_object_id_t grp_id;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args__isset __isset;

  void __set_grp_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args & rhs) const
  {
    if (!(grp_id == rhs.grp_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs() throw();
  const sai_thrift_object_id_t* grp_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_rpf_group_member_args(const switch_sai_rpc_sai_thrift_create_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_args& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_rpf_group_member_result(const switch_sai_rpc_sai_thrift_create_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_result& operator=(const switch_sai_rpc_sai_thrift_create_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_create_rpf_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_create_rpf_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_rpf_group_member_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_rpf_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_member_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result& operator=(const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result&);
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_member_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset;

class switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset() : member_id(false), thrift_attr(false) {}
  bool member_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset() : member_id(false) {}
  bool member_id :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() : member_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() throw();
  sai_thrift_object_id_t member_id;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args__isset __isset;

  void __set_member_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & rhs) const
  {
    if (!(member_id == rhs.member_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs() throw();
  const sai_thrift_object_id_t* member_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result&);
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset() : thrift_ipmc_entry(false), thrift_attr_list(false) {}
  bool thrift_ipmc_entry :1;
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_args {
 public:

  static const char* ascii_fingerprint; // = "BFA66FDBE1D9C35BBF780AA4698BFDE0";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xA6,0x6F,0xDB,0xE1,0xD9,0xC3,0x5B,0xBF,0x78,0x0A,0xA4,0x69,0x8B,0xFD,0xE0};

  switch_sai_rpc_sai_thrift_create_ipmc_entry_args(const switch_sai_rpc_sai_thrift_create_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_args() throw();
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "BFA66FDBE1D9C35BBF780AA4698BFDE0";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xA6,0x6F,0xDB,0xE1,0xD9,0xC3,0x5B,0xBF,0x78,0x0A,0xA4,0x69,0x8B,0xFD,0xE0};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs() throw();
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_create_ipmc_entry_result(const switch_sai_rpc_sai_thrift_create_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_create_ipmc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_ipmc_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_create_ipmc_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_create_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_ipmc_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset() : thrift_ipmc_entry(false) {}
  bool thrift_ipmc_entry :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_args {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_args() throw();
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs() throw();
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result&);
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset() : thrift_ipmc_entry(false), thrift_attr(false) {}
  bool thrift_ipmc_entry :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "93CF979777B8D90A89608140E617E6F1";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCF,0x97,0x97,0x77,0xB8,0xD9,0x0A,0x89,0x60,0x81,0x40,0xE6,0x17,0xE6,0xF1};

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() throw();
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "93CF979777B8D90A89608140E617E6F1";
  static const uint8_t binary_fingerprint[16]; // = {0x93,0xCF,0x97,0x97,0x77,0xB8,0xD9,0x0A,0x89,0x60,0x81,0x40,0xE6,0x17,0xE6,0xF1};


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs() throw();
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset() : thrift_ipmc_entry(false) {}
  bool thrift_ipmc_entry :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() throw();
  sai_thrift_ipmc_entry_t thrift_ipmc_entry;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args__isset __isset;

  void __set_thrift_ipmc_entry(const sai_thrift_ipmc_entry_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & rhs) const
  {
    if (!(thrift_ipmc_entry == rhs.thrift_ipmc_entry))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "E345340EB141C7ABDEF92A514F930423";
  static const uint8_t binary_fingerprint[16]; // = {0xE3,0x45,0x34,0x0E,0xB1,0x41,0xC7,0xAB,0xDE,0xF9,0x2A,0x51,0x4F,0x93,0x04,0x23};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs() throw();
  const sai_thrift_ipmc_entry_t* thrift_ipmc_entry;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_samplepacket_args(const switch_sai_rpc_sai_thrift_create_samplepacket_args&);
  switch_sai_rpc_sai_thrift_create_samplepacket_args& operator=(const switch_sai_rpc_sai_thrift_create_samplepacket_args&);
  switch_sai_rpc_sai_thrift_create_samplepacket_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_samplepacket_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_samplepacket_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_samplepacket_args& obj);
};


class switch_sai_rpc_sai_thrift_create_samplepacket_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_samplepacket_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_samplepacket_result(const switch_sai_rpc_sai_thrift_create_samplepacket_result&);
  switch_sai_rpc_sai_thrift_create_samplepacket_result& operator=(const switch_sai_rpc_sai_thrift_create_samplepacket_result&);
  switch_sai_rpc_sai_thrift_create_samplepacket_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_samplepacket_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_samplepacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_samplepacket_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset {
  _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset;

class switch_sai_rpc_sai_thrift_create_samplepacket_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_samplepacket_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_samplepacket_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset() : samplepacket_id(false) {}
  bool samplepacket_id :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_samplepacket_args(const switch_sai_rpc_sai_thrift_remove_samplepacket_args&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_args& operator=(const switch_sai_rpc_sai_thrift_remove_samplepacket_args&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_args() throw();
  sai_thrift_object_id_t samplepacket_id;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_samplepacket_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_samplepacket_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_samplepacket_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_samplepacket_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_samplepacket_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_samplepacket_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_samplepacket_result(const switch_sai_rpc_sai_thrift_remove_samplepacket_result&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_result& operator=(const switch_sai_rpc_sai_thrift_remove_samplepacket_result&);
  switch_sai_rpc_sai_thrift_remove_samplepacket_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_samplepacket_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_samplepacket_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_samplepacket_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_samplepacket_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset;

class switch_sai_rpc_sai_thrift_remove_samplepacket_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_samplepacket_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_samplepacket_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_samplepacket_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset() : samplepacket_id(false) {}
  bool samplepacket_id :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args() throw();
  sai_thrift_object_id_t samplepacket_id;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset() : samplepacket_id(false), thrift_attr(false) {}
  bool samplepacket_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args() : samplepacket_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args() throw();
  sai_thrift_object_id_t samplepacket_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args__isset __isset;

  void __set_samplepacket_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args & rhs) const
  {
    if (!(samplepacket_id == rhs.samplepacket_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs() throw();
  const sai_thrift_object_id_t* samplepacket_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result&);
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset() : tunnel_map_entry_id(false) {}
  bool tunnel_map_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_id(false) {}
  bool tunnel_map_entry_id :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_id;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset() : tunnel_map_entry_id(false), thrift_attr(false) {}
  bool tunnel_map_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() : tunnel_map_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args__isset __isset;

  void __set_tunnel_map_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & rhs) const
  {
    if (!(tunnel_map_entry_id == rhs.tunnel_map_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_tunnel_map_args(const switch_sai_rpc_sai_thrift_create_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_args& obj);
};


class switch_sai_rpc_sai_thrift_create_tunnel_map_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_tunnel_map_result(const switch_sai_rpc_sai_thrift_create_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_map_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_map_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_map_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset() : tunnel_map_id(false) {}
  bool tunnel_map_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_tunnel_map_args(const switch_sai_rpc_sai_thrift_remove_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_args() throw();
  sai_thrift_object_id_t tunnel_map_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_tunnel_map_result(const switch_sai_rpc_sai_thrift_remove_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_map_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_map_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_map_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_map_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_map_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_map_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_map_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset() : tunnel_map_id(false) {}
  bool tunnel_map_id :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_id;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset() : tunnel_map_id(false), thrift_attr(false) {}
  bool tunnel_map_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args() : tunnel_map_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args() throw();
  sai_thrift_object_id_t tunnel_map_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args__isset __isset;

  void __set_tunnel_map_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args & rhs) const
  {
    if (!(tunnel_map_id == rhs.tunnel_map_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_map_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_tunnel_args(const switch_sai_rpc_sai_thrift_create_tunnel_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_args& obj);
};


class switch_sai_rpc_sai_thrift_create_tunnel_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_tunnel_result(const switch_sai_rpc_sai_thrift_create_tunnel_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset() : tunnel_id(false) {}
  bool tunnel_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_tunnel_args(const switch_sai_rpc_sai_thrift_remove_tunnel_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_args() throw();
  sai_thrift_object_id_t tunnel_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_tunnel_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_pargs() throw();
  const sai_thrift_object_id_t* tunnel_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_tunnel_result(const switch_sai_rpc_sai_thrift_remove_tunnel_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset() : tunnel_id(false), thrift_attr_ids(false) {}
  bool tunnel_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_args() throw();
  sai_thrift_object_id_t tunnel_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset() : tunnel_id(false), thrift_attr(false) {}
  bool tunnel_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args() : tunnel_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_args() throw();
  sai_thrift_object_id_t tunnel_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset() : tunnel_id(false), counter_ids(false), number_of_counters(false) {}
  bool tunnel_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_get_tunnel_stats_args(const switch_sai_rpc_sai_thrift_get_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_args() : tunnel_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_args() throw();
  sai_thrift_object_id_t tunnel_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs() throw();
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  switch_sai_rpc_sai_thrift_get_tunnel_stats_result(const switch_sai_rpc_sai_thrift_get_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_stats_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_result() throw();
  std::vector<int64_t>  success;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_stats_presult() throw();
  std::vector<int64_t> * success;

  _switch_sai_rpc_sai_thrift_get_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset() : tunnel_id(false), counter_ids(false), number_of_counters(false) {}
  bool tunnel_id :1;
  bool counter_ids :1;
  bool number_of_counters :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_args {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args& operator=(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args() : tunnel_id(0), number_of_counters(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_args() throw();
  sai_thrift_object_id_t tunnel_id;
  std::vector<sai_thrift_queue_stat_counter_t>  counter_ids;
  int32_t number_of_counters;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_args__isset __isset;

  void __set_tunnel_id(const sai_thrift_object_id_t val);

  void __set_counter_ids(const std::vector<sai_thrift_queue_stat_counter_t> & val);

  void __set_number_of_counters(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args & rhs) const
  {
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(counter_ids == rhs.counter_ids))
      return false;
    if (!(number_of_counters == rhs.number_of_counters))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_tunnel_stats_args& obj);
};


class switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs {
 public:

  static const char* ascii_fingerprint; // = "D3663AEAB30463B0D52FB1195A82569B";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x66,0x3A,0xEA,0xB3,0x04,0x63,0xB0,0xD5,0x2F,0xB1,0x19,0x5A,0x82,0x56,0x9B};


  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs() throw();
  const sai_thrift_object_id_t* tunnel_id;
  const std::vector<sai_thrift_queue_stat_counter_t> * counter_ids;
  const int32_t* number_of_counters;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result& operator=(const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result&);
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_tunnel_stats_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset;

class switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset() : thrift_attr_list(false) {}
  bool thrift_attr_list :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() throw();
  std::vector<sai_thrift_attribute_t>  thrift_attr_list;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args__isset __isset;

  void __set_thrift_attr_list(const std::vector<sai_thrift_attribute_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & rhs) const
  {
    if (!(thrift_attr_list == rhs.thrift_attr_list))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "9150148ECCCE2F301453EF452212E08D";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x50,0x14,0x8E,0xCC,0xCE,0x2F,0x30,0x14,0x53,0xEF,0x45,0x22,0x12,0xE0,0x8D};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs() throw();
  const std::vector<sai_thrift_attribute_t> * thrift_attr_list;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() throw();
  sai_thrift_object_id_t success;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult() throw();
  sai_thrift_object_id_t* success;

  _switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset() : tunnel_term_table_entry_id(false) {}
  bool tunnel_term_table_entry_id :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_id;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args& obj);
};


class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result& operator=(const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result&);
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset {
  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset;

class switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_id(false), thrift_attr_ids(false) {}
  bool tunnel_term_table_entry_id :1;
  bool thrift_attr_ids :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_id;
  std::vector<int32_t>  thrift_attr_ids;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr_ids(const std::vector<int32_t> & val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    if (!(thrift_attr_ids == rhs.thrift_attr_ids))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "5DDE96F44B125BEA7379750973DE133C";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xDE,0x96,0xF4,0x4B,0x12,0x5B,0xEA,0x73,0x79,0x75,0x09,0x73,0xDE,0x13,0x3C};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;
  const std::vector<int32_t> * thrift_attr_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset() : tunnel_term_table_entry_id(false), thrift_attr(false) {}
  bool tunnel_term_table_entry_id :1;
  bool thrift_attr :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() : tunnel_term_table_entry_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() throw();
  sai_thrift_object_id_t tunnel_term_table_entry_id;
  sai_thrift_attribute_t thrift_attr;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args__isset __isset;

  void __set_tunnel_term_table_entry_id(const sai_thrift_object_id_t val);

  void __set_thrift_attr(const sai_thrift_attribute_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & rhs) const
  {
    if (!(tunnel_term_table_entry_id == rhs.tunnel_term_table_entry_id))
      return false;
    if (!(thrift_attr == rhs.thrift_attr))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "B3CE36ADD06DEE01FB3C05B110E842B6";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0xCE,0x36,0xAD,0xD0,0x6D,0xEE,0x01,0xFB,0x3C,0x05,0xB1,0x10,0xE8,0x42,0xB6};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs() throw();
  const sai_thrift_object_id_t* tunnel_term_table_entry_id;
  const sai_thrift_attribute_t* thrift_attr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result& operator=(const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result&);
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset() : switch_id(false) {}
  bool switch_id :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args() : switch_id(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args() throw();
  sai_thrift_object_id_t switch_id;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args__isset __isset;

  void __set_switch_id(const sai_thrift_object_id_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args & rhs) const
  {
    if (!(switch_id == rhs.switch_id))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args& obj);
};


class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs() throw();
  const sai_thrift_object_id_t* switch_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result() throw();
  sai_thrift_attribute_list_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result__isset __isset;

  void __set_success(const sai_thrift_attribute_list_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult {
 public:

  static const char* ascii_fingerprint; // = "B1E7DF5443A61DE9219A905547325845";
  static const uint8_t binary_fingerprint[16]; // = {0xB1,0xE7,0xDF,0x54,0x43,0xA6,0x1D,0xE9,0x21,0x9A,0x90,0x55,0x47,0x32,0x58,0x45};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult() throw();
  sai_thrift_attribute_list_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult& obj);
};


class switch_sai_rpc_sai_thrift_get_cpu_packet_count_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_count_args& obj);
};


class switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_count_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result& operator=(const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result&);
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_count_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset {
  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset;

class switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult& obj);
};


class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args& operator=(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args() {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args() throw();

  bool operator == (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args& obj);
};


class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset {
  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset;

class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result& operator=(const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result&);
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result() {
  }

  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result() throw();
  sai_thrift_result_t success;

  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result__isset __isset;

  void __set_success(const sai_thrift_result_t& val);

  bool operator == (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset {
  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset;

class switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult {
 public:

  static const char* ascii_fingerprint; // = "30516B0DA700613BC91E9CF396540014";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x51,0x6B,0x0D,0xA7,0x00,0x61,0x3B,0xC9,0x1E,0x9C,0xF3,0x96,0x54,0x00,0x14};


  virtual ~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult() throw();
  sai_thrift_result_t* success;

  _switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_log_set_args__isset {
  _switch_sai_rpc_sai_thrift_log_set_args__isset() : sai_api_id(false), log_level(false) {}
  bool sai_api_id :1;
  bool log_level :1;
} _switch_sai_rpc_sai_thrift_log_set_args__isset;

class switch_sai_rpc_sai_thrift_log_set_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  switch_sai_rpc_sai_thrift_log_set_args(const switch_sai_rpc_sai_thrift_log_set_args&);
  switch_sai_rpc_sai_thrift_log_set_args& operator=(const switch_sai_rpc_sai_thrift_log_set_args&);
  switch_sai_rpc_sai_thrift_log_set_args() : sai_api_id(0), log_level(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_log_set_args() throw();
  int32_t sai_api_id;
  int32_t log_level;

  _switch_sai_rpc_sai_thrift_log_set_args__isset __isset;

  void __set_sai_api_id(const int32_t val);

  void __set_log_level(const int32_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_log_set_args & rhs) const
  {
    if (!(sai_api_id == rhs.sai_api_id))
      return false;
    if (!(log_level == rhs.log_level))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_log_set_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_log_set_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_log_set_args& obj);
};


class switch_sai_rpc_sai_thrift_log_set_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~switch_sai_rpc_sai_thrift_log_set_pargs() throw();
  const int32_t* sai_api_id;
  const int32_t* log_level;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_log_set_pargs& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_log_set_result__isset {
  _switch_sai_rpc_sai_thrift_log_set_result__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_log_set_result__isset;

class switch_sai_rpc_sai_thrift_log_set_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  switch_sai_rpc_sai_thrift_log_set_result(const switch_sai_rpc_sai_thrift_log_set_result&);
  switch_sai_rpc_sai_thrift_log_set_result& operator=(const switch_sai_rpc_sai_thrift_log_set_result&);
  switch_sai_rpc_sai_thrift_log_set_result() : success(0) {
  }

  virtual ~switch_sai_rpc_sai_thrift_log_set_result() throw();
  sai_thrift_status_t success;

  _switch_sai_rpc_sai_thrift_log_set_result__isset __isset;

  void __set_success(const sai_thrift_status_t val);

  bool operator == (const switch_sai_rpc_sai_thrift_log_set_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const switch_sai_rpc_sai_thrift_log_set_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const switch_sai_rpc_sai_thrift_log_set_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_log_set_result& obj);
};

typedef struct _switch_sai_rpc_sai_thrift_log_set_presult__isset {
  _switch_sai_rpc_sai_thrift_log_set_presult__isset() : success(false) {}
  bool success :1;
} _switch_sai_rpc_sai_thrift_log_set_presult__isset;

class switch_sai_rpc_sai_thrift_log_set_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~switch_sai_rpc_sai_thrift_log_set_presult() throw();
  sai_thrift_status_t* success;

  _switch_sai_rpc_sai_thrift_log_set_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const switch_sai_rpc_sai_thrift_log_set_presult& obj);
};

class switch_sai_rpcClient : virtual public switch_sai_rpcIf {
 public:
  switch_sai_rpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  switch_sai_rpcClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_port_attribute();
  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id);
  void send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_id);
  void recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_port_stats(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  void send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id);
  sai_thrift_status_t recv_sai_thrift_clear_port_all_stats();
  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_fdb_entry();
  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void send_sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_delete_fdb_entry();
  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_flush_fdb_entries();
  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_fdb_entry_attribute();
  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry);
  void recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan();
  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  void send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid);
  sai_thrift_status_t recv_sai_thrift_remove_vlan();
  void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_vlan_stats(const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_vlan_stats(std::vector<int64_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_vlan_member();
  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id);
  void send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id);
  void recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  void send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_vlan_member();
  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_vlan_attribute();
  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id);
  void send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id);
  void send_sai_thrift_get_vlan_id(const sai_thrift_object_id_t vlan_id);
  void recv_sai_thrift_get_vlan_id(sai_thrift_result_t& _return);
  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_virtual_router();
  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  void send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id);
  sai_thrift_status_t recv_sai_thrift_remove_virtual_router();
  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_virtual_router_attribute();
  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id);
  void send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t vr_id);
  void recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_route();
  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  void send_sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry);
  sai_thrift_status_t recv_sai_thrift_remove_route();
  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_route_attribute();
  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry);
  void send_sai_thrift_get_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry);
  void recv_sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_router_interface();
  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  void send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id);
  sai_thrift_status_t recv_sai_thrift_remove_router_interface();
  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_router_interface_attribute();
  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id);
  void send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t rif_id);
  void recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop();
  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  void send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop();
  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id);
  void send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_id);
  void recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group();
  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  void send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group();
  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_next_hop_group_attribute();
  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid);
  void send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid);
  void recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_next_hop_group_member();
  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  void send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid);
  sai_thrift_status_t recv_sai_thrift_remove_next_hop_group_member();
  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid);
  void send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t nhop_group_member_oid);
  void recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag();
  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  void send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag();
  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_attribute();
  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id);
  void send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_id);
  void recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_lag_member();
  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  void send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_lag_member();
  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_lag_member_attribute();
  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id);
  void send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_id);
  void recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_stp_entry();
  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  void send_sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id);
  sai_thrift_status_t recv_sai_thrift_remove_stp_entry();
  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  void send_sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state);
  sai_thrift_status_t recv_sai_thrift_set_stp_port_state();
  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  void send_sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id);
  sai_thrift_port_stp_port_state_t recv_sai_thrift_get_stp_port_state();
  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_neighbor_entry();
  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  sai_thrift_status_t recv_sai_thrift_remove_neighbor_entry();
  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry();
  void send_sai_thrift_remove_all_neighbor_entry();
  sai_thrift_status_t recv_sai_thrift_remove_all_neighbor_entry();
  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_neighbor_entry_attribute();
  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry);
  void recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_switch_attribute(const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return);
  void send_sai_thrift_get_port_list_by_front_port();
  void recv_sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return);
  sai_thrift_object_id_t sai_thrift_get_cpu_port_id();
  void send_sai_thrift_get_cpu_port_id();
  sai_thrift_object_id_t recv_sai_thrift_get_cpu_port_id();
  sai_thrift_object_id_t sai_thrift_get_default_trap_group();
  void send_sai_thrift_get_default_trap_group();
  sai_thrift_object_id_t recv_sai_thrift_get_default_trap_group();
  sai_thrift_object_id_t sai_thrift_get_default_router_id();
  void send_sai_thrift_get_default_router_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_router_id();
  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id();
  void send_sai_thrift_get_default_1q_bridge_id();
  sai_thrift_object_id_t recv_sai_thrift_get_default_1q_bridge_id();
  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return);
  void send_sai_thrift_get_default_vlan_id();
  void recv_sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return);
  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  void send_sai_thrift_get_port_id_by_front_port(const std::string& port_name);
  sai_thrift_object_id_t recv_sai_thrift_get_port_id_by_front_port();
  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  void send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute);
  sai_thrift_status_t recv_sai_thrift_set_switch_attribute();
  sai_thrift_object_id_t sai_thrift_create_switch();
  void send_sai_thrift_create_switch();
  sai_thrift_object_id_t recv_sai_thrift_create_switch();
  sai_thrift_status_t sai_thrift_remove_switch();
  void send_sai_thrift_remove_switch();
  sai_thrift_status_t recv_sai_thrift_remove_switch();
  void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge_port(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  void send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge_port();
  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_get_bridge_port_list(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return);
  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id);
  void send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id);
  void recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_port_attribute();
  void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void recv_sai_thrift_create_bridge(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id);
  sai_thrift_status_t recv_sai_thrift_remove_bridge();
  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id);
  void send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_id);
  void recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_bridge_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif();
  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  void send_sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif();
  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id);
  void send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id);
  void recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_table_entry();
  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_table_entry();
  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id);
  void recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_table_entry_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap_group();
  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap_group();
  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id);
  void recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_group_attribute();
  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hostif_trap();
  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  void send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id);
  sai_thrift_status_t recv_sai_thrift_remove_hostif_trap();
  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id);
  void send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id);
  void recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hostif_trap_attribute();
  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table();
  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  void send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table();
  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_entry();
  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  void send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry);
  sai_thrift_status_t recv_sai_thrift_remove_acl_entry();
  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_acl_entry_attribute();
  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group();
  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  void send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group();
  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id);
  void send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_id);
  void recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_table_group_member();
  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  void send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_table_group_member();
  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id);
  void send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_id);
  void recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_acl_counter();
  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  void send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id);
  sai_thrift_status_t recv_sai_thrift_remove_acl_counter();
  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_hash();
  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  void send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id);
  sai_thrift_status_t recv_sai_thrift_remove_hash();
  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_hash_attribute();
  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id);
  void send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t thrift_hash_id);
  void recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_group();
  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  void send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_group();
  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id);
  void send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t thrift_udf_group_id);
  void recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf_match();
  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  void send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf_match();
  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id);
  void send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t thrift_udf_match_id);
  void recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_udf();
  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  void send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id);
  sai_thrift_status_t recv_sai_thrift_remove_udf();
  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_udf_attribute();
  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id);
  void send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t thrift_udf_id);
  void recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_mirror_session();
  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  void send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id);
  sai_thrift_status_t recv_sai_thrift_remove_mirror_session();
  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mirror_attribute();
  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id);
  void send_sai_thrift_get_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id);
  void recv_sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_inseg_entry();
  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  sai_thrift_status_t recv_sai_thrift_remove_inseg_entry();
  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_inseg_entry_attribute();
  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry);
  void recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name);
  void send_sai_thrift_dump_log(const std::string& dump_file_name);
  sai_thrift_status_t recv_sai_thrift_dump_log();
  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_policer();
  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  void send_sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id);
  sai_thrift_status_t recv_sai_thrift_remove_policer();
  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id);
  void send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t thrift_policer_id);
  void recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_policer_attribute();
  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  void send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids);
  sai_thrift_status_t recv_sai_thrift_clear_policer_stats();
  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_profile();
  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  void send_sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_profile();
  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id);
  void send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id);
  void recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_attribute();
  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_scheduler_group();
  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  void send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_scheduler_group();
  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id);
  void send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id);
  void recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_scheduler_group_attribute();
  void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_queue_stats(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_queue_stats();
  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_queue();
  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  void send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id);
  sai_thrift_status_t recv_sai_thrift_remove_queue();
  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id);
  void send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_id);
  void recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_queue_attribute();
  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_buffer_profile();
  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  void send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id);
  sai_thrift_status_t recv_sai_thrift_remove_buffer_profile();
  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id);
  void send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id);
  void recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_buffer_profile_attribute();
  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_pool_profile();
  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_priority_group();
  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  void send_sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id);
  sai_thrift_status_t recv_sai_thrift_remove_priority_group();
  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id);
  void send_sai_thrift_get_priority_group_attribute(const sai_thrift_object_id_t priority_group_id);
  void recv_sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_priority_group_attribute();
  void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_pg_stats(const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_pg_stats(std::vector<int64_t> & _return);
  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_wred_profile();
  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  void send_sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id);
  sai_thrift_status_t recv_sai_thrift_remove_wred_profile();
  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id);
  void send_sai_thrift_get_wred_attribute_profile(const sai_thrift_object_id_t wred_id);
  void recv_sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_wred_attribute_profile();
  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_qos_map();
  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  void send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_qos_map();
  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id);
  void send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_id);
  void recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_qos_map_attribute();
  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group();
  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group();
  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_l2mc_group_member();
  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_group_member();
  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_group_member_attribute();
  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_l2mc_entry();
  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_l2mc_entry();
  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_l2mc_entry_attribute();
  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry);
  void recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_mcast_fdb_entry();
  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  sai_thrift_status_t recv_sai_thrift_remove_mcast_fdb_entry();
  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_mcast_fdb_entry_attribute();
  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry);
  void recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group();
  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group();
  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_ipmc_group_member();
  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_group_member();
  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_group_member_attribute();
  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group();
  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group();
  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id);
  void send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t grp_id);
  void recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_rpf_group_member();
  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  void send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id);
  sai_thrift_status_t recv_sai_thrift_remove_rpf_group_member();
  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_rpf_group_member_attribute();
  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id);
  void send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t member_id);
  void recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_status_t recv_sai_thrift_create_ipmc_entry();
  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  sai_thrift_status_t recv_sai_thrift_remove_ipmc_entry();
  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_ipmc_entry_attribute();
  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry);
  void recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_samplepacket();
  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  void send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id);
  sai_thrift_status_t recv_sai_thrift_remove_samplepacket();
  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id);
  void send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id);
  void recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_samplepacket_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map_entry();
  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  void send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map_entry();
  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id);
  void send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id);
  void recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_entry_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_map();
  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  void send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_map();
  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id);
  void send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id);
  void recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_map_attribute();
  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel();
  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  void send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel();
  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_attribute();
  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void recv_sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return);
  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  void send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters);
  sai_thrift_status_t recv_sai_thrift_clear_tunnel_stats();
  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  void send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list);
  sai_thrift_object_id_t recv_sai_thrift_create_tunnel_term_table_entry();
  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  void send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id);
  sai_thrift_status_t recv_sai_thrift_remove_tunnel_term_table_entry();
  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids);
  void recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return);
  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  void send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr);
  sai_thrift_status_t recv_sai_thrift_set_tunnel_term_table_entry_attribute();
  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id);
  void send_sai_thrift_get_cpu_packet_attribute(const sai_thrift_object_id_t switch_id);
  void recv_sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return);
  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return);
  void send_sai_thrift_get_cpu_packet_count();
  void recv_sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return);
  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return);
  void send_sai_thrift_clear_cpu_packet_info();
  void recv_sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return);
  sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  void send_sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level);
  sai_thrift_status_t recv_sai_thrift_log_set();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class switch_sai_rpcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<switch_sai_rpcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (switch_sai_rpcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sai_thrift_set_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_port_all_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_delete_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_flush_fdb_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_next_hop_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_all_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_list_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_port_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_router_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_1q_bridge_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_default_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_port_id_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_table_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_match_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_dump_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_pool_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_pg_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_create_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_remove_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_set_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_packet_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_get_cpu_packet_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_clear_cpu_packet_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sai_thrift_log_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  switch_sai_rpcProcessor(boost::shared_ptr<switch_sai_rpcIf> iface) :
    iface_(iface) {
    processMap_["sai_thrift_set_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_port_attribute;
    processMap_["sai_thrift_get_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_attribute;
    processMap_["sai_thrift_get_port_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_stats;
    processMap_["sai_thrift_clear_port_all_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_port_all_stats;
    processMap_["sai_thrift_create_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_fdb_entry;
    processMap_["sai_thrift_delete_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_delete_fdb_entry;
    processMap_["sai_thrift_flush_fdb_entries"] = &switch_sai_rpcProcessor::process_sai_thrift_flush_fdb_entries;
    processMap_["sai_thrift_set_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_fdb_entry_attribute;
    processMap_["sai_thrift_get_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_fdb_entry_attribute;
    processMap_["sai_thrift_create_vlan"] = &switch_sai_rpcProcessor::process_sai_thrift_create_vlan;
    processMap_["sai_thrift_remove_vlan"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_vlan;
    processMap_["sai_thrift_get_vlan_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_stats;
    processMap_["sai_thrift_create_vlan_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_vlan_member;
    processMap_["sai_thrift_get_vlan_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_member_attribute;
    processMap_["sai_thrift_remove_vlan_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_vlan_member;
    processMap_["sai_thrift_set_vlan_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_vlan_attribute;
    processMap_["sai_thrift_get_vlan_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_attribute;
    processMap_["sai_thrift_get_vlan_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_vlan_id;
    processMap_["sai_thrift_create_virtual_router"] = &switch_sai_rpcProcessor::process_sai_thrift_create_virtual_router;
    processMap_["sai_thrift_remove_virtual_router"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_virtual_router;
    processMap_["sai_thrift_set_virtual_router_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_virtual_router_attribute;
    processMap_["sai_thrift_get_virtual_router_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_virtual_router_attribute;
    processMap_["sai_thrift_create_route"] = &switch_sai_rpcProcessor::process_sai_thrift_create_route;
    processMap_["sai_thrift_remove_route"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_route;
    processMap_["sai_thrift_set_route_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_route_attribute;
    processMap_["sai_thrift_get_route_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_route_attribute;
    processMap_["sai_thrift_create_router_interface"] = &switch_sai_rpcProcessor::process_sai_thrift_create_router_interface;
    processMap_["sai_thrift_remove_router_interface"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_router_interface;
    processMap_["sai_thrift_set_router_interface_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_router_interface_attribute;
    processMap_["sai_thrift_get_router_interface_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_router_interface_attribute;
    processMap_["sai_thrift_create_next_hop"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop;
    processMap_["sai_thrift_remove_next_hop"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop;
    processMap_["sai_thrift_get_next_hop_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_attribute;
    processMap_["sai_thrift_create_next_hop_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group;
    processMap_["sai_thrift_remove_next_hop_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group;
    processMap_["sai_thrift_set_next_hop_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_next_hop_group_attribute;
    processMap_["sai_thrift_get_next_hop_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_attribute;
    processMap_["sai_thrift_create_next_hop_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group_member;
    processMap_["sai_thrift_remove_next_hop_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group_member;
    processMap_["sai_thrift_get_next_hop_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_member_attribute;
    processMap_["sai_thrift_create_lag"] = &switch_sai_rpcProcessor::process_sai_thrift_create_lag;
    processMap_["sai_thrift_remove_lag"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_lag;
    processMap_["sai_thrift_set_lag_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_lag_attribute;
    processMap_["sai_thrift_get_lag_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_lag_attribute;
    processMap_["sai_thrift_create_lag_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_lag_member;
    processMap_["sai_thrift_remove_lag_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_lag_member;
    processMap_["sai_thrift_set_lag_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_lag_member_attribute;
    processMap_["sai_thrift_get_lag_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_lag_member_attribute;
    processMap_["sai_thrift_create_stp_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_stp_entry;
    processMap_["sai_thrift_remove_stp_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_stp_entry;
    processMap_["sai_thrift_set_stp_port_state"] = &switch_sai_rpcProcessor::process_sai_thrift_set_stp_port_state;
    processMap_["sai_thrift_get_stp_port_state"] = &switch_sai_rpcProcessor::process_sai_thrift_get_stp_port_state;
    processMap_["sai_thrift_create_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_neighbor_entry;
    processMap_["sai_thrift_remove_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_neighbor_entry;
    processMap_["sai_thrift_remove_all_neighbor_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_all_neighbor_entry;
    processMap_["sai_thrift_set_neighbor_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_neighbor_entry_attribute;
    processMap_["sai_thrift_get_neighbor_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_neighbor_entry_attribute;
    processMap_["sai_thrift_get_switch_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_switch_attribute;
    processMap_["sai_thrift_get_port_list_by_front_port"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_list_by_front_port;
    processMap_["sai_thrift_get_cpu_port_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_port_id;
    processMap_["sai_thrift_get_default_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_trap_group;
    processMap_["sai_thrift_get_default_router_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_router_id;
    processMap_["sai_thrift_get_default_1q_bridge_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_1q_bridge_id;
    processMap_["sai_thrift_get_default_vlan_id"] = &switch_sai_rpcProcessor::process_sai_thrift_get_default_vlan_id;
    processMap_["sai_thrift_get_port_id_by_front_port"] = &switch_sai_rpcProcessor::process_sai_thrift_get_port_id_by_front_port;
    processMap_["sai_thrift_set_switch_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_switch_attribute;
    processMap_["sai_thrift_create_switch"] = &switch_sai_rpcProcessor::process_sai_thrift_create_switch;
    processMap_["sai_thrift_remove_switch"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_switch;
    processMap_["sai_thrift_create_bridge_port"] = &switch_sai_rpcProcessor::process_sai_thrift_create_bridge_port;
    processMap_["sai_thrift_remove_bridge_port"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_bridge_port;
    processMap_["sai_thrift_get_bridge_port_list"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_list;
    processMap_["sai_thrift_get_bridge_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_attribute;
    processMap_["sai_thrift_set_bridge_port_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_bridge_port_attribute;
    processMap_["sai_thrift_create_bridge"] = &switch_sai_rpcProcessor::process_sai_thrift_create_bridge;
    processMap_["sai_thrift_remove_bridge"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_bridge;
    processMap_["sai_thrift_get_bridge_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_bridge_attribute;
    processMap_["sai_thrift_set_bridge_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_bridge_attribute;
    processMap_["sai_thrift_create_hostif"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif;
    processMap_["sai_thrift_remove_hostif"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif;
    processMap_["sai_thrift_get_hostif_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_attribute;
    processMap_["sai_thrift_set_hostif_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_attribute;
    processMap_["sai_thrift_create_hostif_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_table_entry;
    processMap_["sai_thrift_remove_hostif_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_table_entry;
    processMap_["sai_thrift_get_hostif_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_table_entry_attribute;
    processMap_["sai_thrift_set_hostif_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_table_entry_attribute;
    processMap_["sai_thrift_create_hostif_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap_group;
    processMap_["sai_thrift_remove_hostif_trap_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap_group;
    processMap_["sai_thrift_get_hostif_trap_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_group_attribute;
    processMap_["sai_thrift_set_hostif_trap_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_group_attribute;
    processMap_["sai_thrift_create_hostif_trap"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap;
    processMap_["sai_thrift_remove_hostif_trap"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap;
    processMap_["sai_thrift_get_hostif_trap_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_attribute;
    processMap_["sai_thrift_set_hostif_trap_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_attribute;
    processMap_["sai_thrift_create_acl_table"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table;
    processMap_["sai_thrift_remove_acl_table"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table;
    processMap_["sai_thrift_get_acl_table_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_attribute;
    processMap_["sai_thrift_create_acl_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_entry;
    processMap_["sai_thrift_remove_acl_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_entry;
    processMap_["sai_thrift_set_acl_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_acl_entry_attribute;
    processMap_["sai_thrift_get_acl_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_entry_attribute;
    processMap_["sai_thrift_create_acl_table_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group;
    processMap_["sai_thrift_remove_acl_table_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group;
    processMap_["sai_thrift_get_acl_table_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_attribute;
    processMap_["sai_thrift_create_acl_table_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group_member;
    processMap_["sai_thrift_remove_acl_table_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group_member;
    processMap_["sai_thrift_get_acl_table_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_member_attribute;
    processMap_["sai_thrift_create_acl_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_create_acl_counter;
    processMap_["sai_thrift_remove_acl_counter"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_acl_counter;
    processMap_["sai_thrift_get_acl_counter_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_acl_counter_attribute;
    processMap_["sai_thrift_create_hash"] = &switch_sai_rpcProcessor::process_sai_thrift_create_hash;
    processMap_["sai_thrift_remove_hash"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_hash;
    processMap_["sai_thrift_set_hash_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_hash_attribute;
    processMap_["sai_thrift_get_hash_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_hash_attribute;
    processMap_["sai_thrift_create_udf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf_group;
    processMap_["sai_thrift_remove_udf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf_group;
    processMap_["sai_thrift_get_udf_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_group_attribute;
    processMap_["sai_thrift_create_udf_match"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf_match;
    processMap_["sai_thrift_remove_udf_match"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf_match;
    processMap_["sai_thrift_get_udf_match_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_match_attribute;
    processMap_["sai_thrift_create_udf"] = &switch_sai_rpcProcessor::process_sai_thrift_create_udf;
    processMap_["sai_thrift_remove_udf"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_udf;
    processMap_["sai_thrift_set_udf_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_udf_attribute;
    processMap_["sai_thrift_get_udf_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_udf_attribute;
    processMap_["sai_thrift_create_mirror_session"] = &switch_sai_rpcProcessor::process_sai_thrift_create_mirror_session;
    processMap_["sai_thrift_remove_mirror_session"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_mirror_session;
    processMap_["sai_thrift_set_mirror_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_mirror_attribute;
    processMap_["sai_thrift_get_mirror_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_mirror_attribute;
    processMap_["sai_thrift_create_inseg_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_inseg_entry;
    processMap_["sai_thrift_remove_inseg_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_inseg_entry;
    processMap_["sai_thrift_set_inseg_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_inseg_entry_attribute;
    processMap_["sai_thrift_get_inseg_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_inseg_entry_attribute;
    processMap_["sai_thrift_dump_log"] = &switch_sai_rpcProcessor::process_sai_thrift_dump_log;
    processMap_["sai_thrift_create_policer"] = &switch_sai_rpcProcessor::process_sai_thrift_create_policer;
    processMap_["sai_thrift_remove_policer"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_policer;
    processMap_["sai_thrift_get_policer_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_policer_attribute;
    processMap_["sai_thrift_set_policer_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_policer_attribute;
    processMap_["sai_thrift_get_policer_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_policer_stats;
    processMap_["sai_thrift_clear_policer_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_policer_stats;
    processMap_["sai_thrift_create_scheduler_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_profile;
    processMap_["sai_thrift_remove_scheduler_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_profile;
    processMap_["sai_thrift_get_scheduler_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_attribute;
    processMap_["sai_thrift_set_scheduler_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_attribute;
    processMap_["sai_thrift_create_scheduler_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_group;
    processMap_["sai_thrift_remove_scheduler_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_group;
    processMap_["sai_thrift_get_scheduler_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_group_attribute;
    processMap_["sai_thrift_set_scheduler_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_group_attribute;
    processMap_["sai_thrift_get_queue_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_queue_stats;
    processMap_["sai_thrift_clear_queue_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_queue_stats;
    processMap_["sai_thrift_create_queue"] = &switch_sai_rpcProcessor::process_sai_thrift_create_queue;
    processMap_["sai_thrift_remove_queue"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_queue;
    processMap_["sai_thrift_get_queue_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_queue_attribute;
    processMap_["sai_thrift_set_queue_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_queue_attribute;
    processMap_["sai_thrift_create_buffer_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_buffer_profile;
    processMap_["sai_thrift_remove_buffer_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_buffer_profile;
    processMap_["sai_thrift_get_buffer_profile_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_buffer_profile_attribute;
    processMap_["sai_thrift_set_buffer_profile_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_buffer_profile_attribute;
    processMap_["sai_thrift_create_pool_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_pool_profile;
    processMap_["sai_thrift_create_priority_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_priority_group;
    processMap_["sai_thrift_remove_priority_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_priority_group;
    processMap_["sai_thrift_get_priority_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_priority_group_attribute;
    processMap_["sai_thrift_set_priority_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_priority_group_attribute;
    processMap_["sai_thrift_get_pg_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_pg_stats;
    processMap_["sai_thrift_create_wred_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_create_wred_profile;
    processMap_["sai_thrift_remove_wred_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_wred_profile;
    processMap_["sai_thrift_get_wred_attribute_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_get_wred_attribute_profile;
    processMap_["sai_thrift_set_wred_attribute_profile"] = &switch_sai_rpcProcessor::process_sai_thrift_set_wred_attribute_profile;
    processMap_["sai_thrift_create_qos_map"] = &switch_sai_rpcProcessor::process_sai_thrift_create_qos_map;
    processMap_["sai_thrift_remove_qos_map"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_qos_map;
    processMap_["sai_thrift_get_qos_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_qos_map_attribute;
    processMap_["sai_thrift_set_qos_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_qos_map_attribute;
    processMap_["sai_thrift_create_l2mc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group;
    processMap_["sai_thrift_remove_l2mc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group;
    processMap_["sai_thrift_get_l2mc_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_attribute;
    processMap_["sai_thrift_create_l2mc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group_member;
    processMap_["sai_thrift_remove_l2mc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group_member;
    processMap_["sai_thrift_set_l2mc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_group_member_attribute;
    processMap_["sai_thrift_get_l2mc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_member_attribute;
    processMap_["sai_thrift_create_l2mc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_entry;
    processMap_["sai_thrift_remove_l2mc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_entry;
    processMap_["sai_thrift_set_l2mc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_entry_attribute;
    processMap_["sai_thrift_get_l2mc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_entry_attribute;
    processMap_["sai_thrift_create_mcast_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_mcast_fdb_entry;
    processMap_["sai_thrift_remove_mcast_fdb_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_mcast_fdb_entry;
    processMap_["sai_thrift_set_mcast_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_get_mcast_fdb_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_mcast_fdb_entry_attribute;
    processMap_["sai_thrift_create_ipmc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group;
    processMap_["sai_thrift_remove_ipmc_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group;
    processMap_["sai_thrift_get_ipmc_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_attribute;
    processMap_["sai_thrift_create_ipmc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group_member;
    processMap_["sai_thrift_remove_ipmc_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group_member;
    processMap_["sai_thrift_set_ipmc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_group_member_attribute;
    processMap_["sai_thrift_get_ipmc_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_member_attribute;
    processMap_["sai_thrift_create_rpf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group;
    processMap_["sai_thrift_remove_rpf_group"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group;
    processMap_["sai_thrift_get_rpf_group_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_attribute;
    processMap_["sai_thrift_create_rpf_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group_member;
    processMap_["sai_thrift_remove_rpf_group_member"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group_member;
    processMap_["sai_thrift_set_rpf_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_rpf_group_member_attribute;
    processMap_["sai_thrift_get_rpf_group_member_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_member_attribute;
    processMap_["sai_thrift_create_ipmc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_entry;
    processMap_["sai_thrift_remove_ipmc_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_entry;
    processMap_["sai_thrift_set_ipmc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_entry_attribute;
    processMap_["sai_thrift_get_ipmc_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_entry_attribute;
    processMap_["sai_thrift_create_samplepacket"] = &switch_sai_rpcProcessor::process_sai_thrift_create_samplepacket;
    processMap_["sai_thrift_remove_samplepacket"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_samplepacket;
    processMap_["sai_thrift_get_samplepacket_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_samplepacket_attribute;
    processMap_["sai_thrift_set_samplepacket_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_samplepacket_attribute;
    processMap_["sai_thrift_create_tunnel_map_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map_entry;
    processMap_["sai_thrift_remove_tunnel_map_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map_entry;
    processMap_["sai_thrift_get_tunnel_map_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_entry_attribute;
    processMap_["sai_thrift_set_tunnel_map_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_entry_attribute;
    processMap_["sai_thrift_create_tunnel_map"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map;
    processMap_["sai_thrift_remove_tunnel_map"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map;
    processMap_["sai_thrift_get_tunnel_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_attribute;
    processMap_["sai_thrift_set_tunnel_map_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_attribute;
    processMap_["sai_thrift_create_tunnel"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel;
    processMap_["sai_thrift_remove_tunnel"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel;
    processMap_["sai_thrift_get_tunnel_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_attribute;
    processMap_["sai_thrift_set_tunnel_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_attribute;
    processMap_["sai_thrift_get_tunnel_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_stats;
    processMap_["sai_thrift_clear_tunnel_stats"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_tunnel_stats;
    processMap_["sai_thrift_create_tunnel_term_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_term_table_entry;
    processMap_["sai_thrift_remove_tunnel_term_table_entry"] = &switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_term_table_entry;
    processMap_["sai_thrift_get_tunnel_term_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_set_tunnel_term_table_entry_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_term_table_entry_attribute;
    processMap_["sai_thrift_get_cpu_packet_attribute"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_attribute;
    processMap_["sai_thrift_get_cpu_packet_count"] = &switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_count;
    processMap_["sai_thrift_clear_cpu_packet_info"] = &switch_sai_rpcProcessor::process_sai_thrift_clear_cpu_packet_info;
    processMap_["sai_thrift_log_set"] = &switch_sai_rpcProcessor::process_sai_thrift_log_set;
  }

  virtual ~switch_sai_rpcProcessor() {}
};

class switch_sai_rpcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  switch_sai_rpcProcessorFactory(const ::boost::shared_ptr< switch_sai_rpcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< switch_sai_rpcIfFactory > handlerFactory_;
};

class switch_sai_rpcMultiface : virtual public switch_sai_rpcIf {
 public:
  switch_sai_rpcMultiface(std::vector<boost::shared_ptr<switch_sai_rpcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~switch_sai_rpcMultiface() {}
 protected:
  std::vector<boost::shared_ptr<switch_sai_rpcIf> > ifaces_;
  switch_sai_rpcMultiface() {}
  void add(boost::shared_ptr<switch_sai_rpcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  sai_thrift_status_t sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_port_attribute(port_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_port_attribute(port_id, thrift_attr);
  }

  void sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_attribute(_return, port_id);
    }
    ifaces_[i]->sai_thrift_get_port_attribute(_return, port_id);
    return;
  }

  void sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_stats(_return, port_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_port_stats(_return, port_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_port_all_stats(port_id);
    }
    return ifaces_[i]->sai_thrift_clear_port_all_stats(port_id);
  }

  sai_thrift_status_t sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_delete_fdb_entry(thrift_fdb_entry);
    }
    return ifaces_[i]->sai_thrift_delete_fdb_entry(thrift_fdb_entry);
  }

  sai_thrift_status_t sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_flush_fdb_entries(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_flush_fdb_entries(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr);
  }

  void sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, thrift_fdb_entry);
    }
    ifaces_[i]->sai_thrift_get_fdb_entry_attribute(_return, thrift_fdb_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
    }
    return ifaces_[i]->sai_thrift_remove_vlan(vlan_oid);
  }

  void sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_vlan_stats(_return, vlan_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_vlan_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_vlan_member(thrift_attr_list);
  }

  void sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_member_attribute(_return, vlan_member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_vlan_member(vlan_member_id);
  }

  sai_thrift_status_t sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_vlan_attribute(vlan_id, thrift_attr);
  }

  void sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_attribute(_return, vlan_id);
    return;
  }

  void sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_vlan_id(_return, vlan_id);
    }
    ifaces_[i]->sai_thrift_get_vlan_id(_return, vlan_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_virtual_router(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_virtual_router(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_virtual_router(vr_id);
    }
    return ifaces_[i]->sai_thrift_remove_virtual_router(vr_id);
  }

  sai_thrift_status_t sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr);
  }

  void sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, vr_id);
    }
    ifaces_[i]->sai_thrift_get_virtual_router_attribute(_return, vr_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_route(thrift_route_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_route(thrift_route_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_route(thrift_route_entry);
    }
    return ifaces_[i]->sai_thrift_remove_route(thrift_route_entry);
  }

  sai_thrift_status_t sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr);
  }

  void sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_route_attribute(_return, thrift_route_entry);
    }
    ifaces_[i]->sai_thrift_get_route_attribute(_return, thrift_route_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_router_interface(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_router_interface(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_router_interface(rif_id);
    }
    return ifaces_[i]->sai_thrift_remove_router_interface(rif_id);
  }

  sai_thrift_status_t sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_router_interface_attribute(rif_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_router_interface_attribute(rif_id, thrift_attr);
  }

  void sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, rif_id);
    }
    ifaces_[i]->sai_thrift_get_router_interface_attribute(_return, rif_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop(next_hop_id);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop(next_hop_id);
  }

  void sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_id);
    }
    ifaces_[i]->sai_thrift_get_next_hop_attribute(_return, next_hop_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group(nhop_group_oid);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop_group(nhop_group_oid);
  }

  sai_thrift_status_t sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr);
  }

  void sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, nhop_group_oid);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_attribute(_return, nhop_group_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_next_hop_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_next_hop_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_next_hop_group_member(nhop_group_member_oid);
    }
    return ifaces_[i]->sai_thrift_remove_next_hop_group_member(nhop_group_member_oid);
  }

  void sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, nhop_group_member_oid);
    }
    ifaces_[i]->sai_thrift_get_next_hop_group_member_attribute(_return, nhop_group_member_oid);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag(lag_id);
    }
    return ifaces_[i]->sai_thrift_remove_lag(lag_id);
  }

  sai_thrift_status_t sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_attribute(lag_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_lag_attribute(lag_id, thrift_attr);
  }

  void sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_id);
    }
    ifaces_[i]->sai_thrift_get_lag_attribute(_return, lag_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_lag_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_lag_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_lag_member(lag_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_lag_member(lag_member_id);
  }

  sai_thrift_status_t sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr);
  }

  void sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_id);
    }
    ifaces_[i]->sai_thrift_get_lag_member_attribute(_return, lag_member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_stp_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_stp_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_stp_entry(stp_id);
    }
    return ifaces_[i]->sai_thrift_remove_stp_entry(stp_id);
  }

  sai_thrift_status_t sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
    }
    return ifaces_[i]->sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
  }

  sai_thrift_port_stp_port_state_t sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_stp_port_state(stp_id, port_id);
    }
    return ifaces_[i]->sai_thrift_get_stp_port_state(stp_id, port_id);
  }

  sai_thrift_status_t sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
    }
    return ifaces_[i]->sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
  }

  sai_thrift_status_t sai_thrift_remove_all_neighbor_entry() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_all_neighbor_entry();
    }
    return ifaces_[i]->sai_thrift_remove_all_neighbor_entry();
  }

  sai_thrift_status_t sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr);
  }

  void sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, thrift_neighbor_entry);
    }
    ifaces_[i]->sai_thrift_get_neighbor_entry_attribute(_return, thrift_neighbor_entry);
    return;
  }

  void sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_switch_attribute(_return, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_switch_attribute(_return, thrift_attr_ids);
    return;
  }

  void sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_list_by_front_port(_return);
    }
    ifaces_[i]->sai_thrift_get_port_list_by_front_port(_return);
    return;
  }

  sai_thrift_object_id_t sai_thrift_get_cpu_port_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_port_id();
    }
    return ifaces_[i]->sai_thrift_get_cpu_port_id();
  }

  sai_thrift_object_id_t sai_thrift_get_default_trap_group() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_trap_group();
    }
    return ifaces_[i]->sai_thrift_get_default_trap_group();
  }

  sai_thrift_object_id_t sai_thrift_get_default_router_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_router_id();
    }
    return ifaces_[i]->sai_thrift_get_default_router_id();
  }

  sai_thrift_object_id_t sai_thrift_get_default_1q_bridge_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_1q_bridge_id();
    }
    return ifaces_[i]->sai_thrift_get_default_1q_bridge_id();
  }

  void sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_default_vlan_id(_return);
    }
    ifaces_[i]->sai_thrift_get_default_vlan_id(_return);
    return;
  }

  sai_thrift_object_id_t sai_thrift_get_port_id_by_front_port(const std::string& port_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_port_id_by_front_port(port_name);
    }
    return ifaces_[i]->sai_thrift_get_port_id_by_front_port(port_name);
  }

  sai_thrift_status_t sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_switch_attribute(attribute);
    }
    return ifaces_[i]->sai_thrift_set_switch_attribute(attribute);
  }

  sai_thrift_object_id_t sai_thrift_create_switch() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_switch();
    }
    return ifaces_[i]->sai_thrift_create_switch();
  }

  sai_thrift_status_t sai_thrift_remove_switch() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_switch();
    }
    return ifaces_[i]->sai_thrift_remove_switch();
  }

  void sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge_port(_return, thrift_attr_list);
    }
    ifaces_[i]->sai_thrift_create_bridge_port(_return, thrift_attr_list);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_id);
    }
    return ifaces_[i]->sai_thrift_remove_bridge_port(bridge_port_id);
  }

  void sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_list(_return, bridge_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_list(_return, bridge_id);
    return;
  }

  void sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_port_attribute(_return, bridge_port_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr);
  }

  void sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_bridge(_return, thrift_attr_list);
    }
    ifaces_[i]->sai_thrift_create_bridge(_return, thrift_attr_list);
    return;
  }

  sai_thrift_status_t sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_bridge(bridge_id);
    }
    return ifaces_[i]->sai_thrift_remove_bridge(bridge_id);
  }

  void sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_id);
    }
    ifaces_[i]->sai_thrift_get_bridge_attribute(_return, bridge_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_bridge_attribute(bridge_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif(thrift_hif_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif(thrift_hif_id);
  }

  void sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_attribute(_return, thrift_hif_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_attribute(_return, thrift_hif_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_table_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_table_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id);
  }

  void sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, thrift_hostif_table_entry_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_table_entry_attribute(_return, thrift_hostif_table_entry_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id);
  }

  void sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, thrift_hostif_trap_group_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_group_attribute(_return, thrift_hostif_trap_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hostif_trap(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hostif_trap(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hostif_trap(thrift_hostif_trap_id);
    }
    return ifaces_[i]->sai_thrift_remove_hostif_trap(thrift_hostif_trap_id);
  }

  void sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, thrift_hostif_trap_id);
    }
    ifaces_[i]->sai_thrift_get_hostif_trap_attribute(_return, thrift_hostif_trap_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table(acl_table_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table(acl_table_id);
  }

  void sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_table_attribute(_return, acl_table_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry);
    }
    return ifaces_[i]->sai_thrift_remove_acl_entry(acl_entry);
  }

  sai_thrift_status_t sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr);
  }

  void sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_entry_attribute(_return, acl_entry_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table_group(acl_table_group_id);
  }

  void sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_id);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_attribute(_return, acl_table_group_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_table_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_table_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_table_group_member(acl_table_group_member_id);
  }

  void sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_id);
    }
    ifaces_[i]->sai_thrift_get_acl_table_group_member_attribute(_return, acl_table_group_member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_acl_counter(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_acl_counter(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_id);
    }
    return ifaces_[i]->sai_thrift_remove_acl_counter(acl_counter_id);
  }

  void sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_acl_counter_attribute(_return, acl_counter_id, thrift_attr_ids);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_hash(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_hash(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_hash(hash_id);
    }
    return ifaces_[i]->sai_thrift_remove_hash(hash_id);
  }

  sai_thrift_status_t sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr);
  }

  void sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_hash_attribute(_return, thrift_hash_id);
    }
    ifaces_[i]->sai_thrift_get_hash_attribute(_return, thrift_hash_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_group(udf_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf_group(udf_group_id);
  }

  void sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, thrift_udf_group_id);
    }
    ifaces_[i]->sai_thrift_get_udf_group_attribute(_return, thrift_udf_group_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf_match(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf_match(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf_match(udf_match_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf_match(udf_match_id);
  }

  void sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, thrift_udf_match_id);
    }
    ifaces_[i]->sai_thrift_get_udf_match_attribute(_return, thrift_udf_match_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_udf(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_udf(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_udf(udf_id);
    }
    return ifaces_[i]->sai_thrift_remove_udf(udf_id);
  }

  sai_thrift_status_t sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr);
  }

  void sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_udf_attribute(_return, thrift_udf_id);
    }
    ifaces_[i]->sai_thrift_get_udf_attribute(_return, thrift_udf_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mirror_session(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_mirror_session(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mirror_session(session_id);
    }
    return ifaces_[i]->sai_thrift_remove_mirror_session(session_id);
  }

  sai_thrift_status_t sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr);
  }

  void sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mirror_attribute(_return, thrift_mirror_id);
    }
    ifaces_[i]->sai_thrift_get_mirror_attribute(_return, thrift_mirror_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_inseg_entry(thrift_inseg_entry);
    }
    return ifaces_[i]->sai_thrift_remove_inseg_entry(thrift_inseg_entry);
  }

  sai_thrift_status_t sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr);
  }

  void sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, thrift_inseg_entry);
    }
    ifaces_[i]->sai_thrift_get_inseg_entry_attribute(_return, thrift_inseg_entry);
    return;
  }

  sai_thrift_status_t sai_thrift_dump_log(const std::string& dump_file_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_dump_log(dump_file_name);
    }
    return ifaces_[i]->sai_thrift_dump_log(dump_file_name);
  }

  sai_thrift_object_id_t sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_policer(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_policer(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_policer(thrift_policer_id);
    }
    return ifaces_[i]->sai_thrift_remove_policer(thrift_policer_id);
  }

  void sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_attribute(_return, thrift_policer_id);
    }
    ifaces_[i]->sai_thrift_get_policer_attribute(_return, thrift_policer_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr);
  }

  void sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_policer_stats(_return, thrift_policer_id, thrift_counter_ids);
    }
    ifaces_[i]->sai_thrift_get_policer_stats(_return, thrift_policer_id, thrift_counter_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids);
    }
    return ifaces_[i]->sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids);
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler_profile(scheduler_id);
    }
    return ifaces_[i]->sai_thrift_remove_scheduler_profile(scheduler_id);
  }

  void sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, thrift_scheduler_id);
    }
    ifaces_[i]->sai_thrift_get_scheduler_attribute(_return, thrift_scheduler_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_scheduler_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_scheduler_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_scheduler_group(scheduler_group_id);
  }

  void sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_id);
    }
    ifaces_[i]->sai_thrift_get_scheduler_group_attribute(_return, scheduler_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr);
  }

  void sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_queue_stats(_return, queue_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_queue(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_queue(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_queue(queue_id);
    }
    return ifaces_[i]->sai_thrift_remove_queue(queue_id);
  }

  void sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_id);
    }
    ifaces_[i]->sai_thrift_get_queue_attribute(_return, queue_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_queue_attribute(queue_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_queue_attribute(queue_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_buffer_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_buffer_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_id);
    }
    return ifaces_[i]->sai_thrift_remove_buffer_profile(buffer_profile_id);
  }

  void sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_id);
    }
    ifaces_[i]->sai_thrift_get_buffer_profile_attribute(_return, buffer_profile_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_pool_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_pool_profile(thrift_attr_list);
  }

  sai_thrift_object_id_t sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_priority_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_priority_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_priority_group(priority_group_id);
    }
    return ifaces_[i]->sai_thrift_remove_priority_group(priority_group_id);
  }

  void sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_priority_group_attribute(_return, priority_group_id);
    }
    ifaces_[i]->sai_thrift_get_priority_group_attribute(_return, priority_group_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
  }

  void sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_pg_stats(_return, pg_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_pg_stats(_return, pg_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_wred_profile(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_wred_profile(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_wred_profile(wred_id);
    }
    return ifaces_[i]->sai_thrift_remove_wred_profile(wred_id);
  }

  void sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_wred_attribute_profile(_return, wred_id);
    }
    ifaces_[i]->sai_thrift_get_wred_attribute_profile(_return, wred_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_qos_map(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_qos_map(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_qos_map(qos_map_id);
    }
    return ifaces_[i]->sai_thrift_remove_qos_map(qos_map_id);
  }

  void sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_id);
    }
    ifaces_[i]->sai_thrift_get_qos_map_attribute(_return, qos_map_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_group(grp_id);
  }

  void sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_l2mc_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_l2mc_entry(thrift_l2mc_entry);
    }
    return ifaces_[i]->sai_thrift_remove_l2mc_entry(thrift_l2mc_entry);
  }

  sai_thrift_status_t sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr);
  }

  void sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, thrift_l2mc_entry);
    }
    ifaces_[i]->sai_thrift_get_l2mc_entry_attribute(_return, thrift_l2mc_entry);
    return;
  }

  sai_thrift_status_t sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry);
    }
    return ifaces_[i]->sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry);
  }

  sai_thrift_status_t sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr);
  }

  void sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, thrift_mcast_fdb_entry);
    }
    ifaces_[i]->sai_thrift_get_mcast_fdb_entry_attribute(_return, thrift_mcast_fdb_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_group(grp_id);
  }

  void sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_ipmc_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group(grp_id);
    }
    return ifaces_[i]->sai_thrift_remove_rpf_group(grp_id);
  }

  void sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, grp_id);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_attribute(_return, grp_id);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_rpf_group_member(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_rpf_group_member(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_rpf_group_member(member_id);
    }
    return ifaces_[i]->sai_thrift_remove_rpf_group_member(member_id);
  }

  sai_thrift_status_t sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr);
  }

  void sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, member_id);
    }
    ifaces_[i]->sai_thrift_get_rpf_group_member_attribute(_return, member_id);
    return;
  }

  sai_thrift_status_t sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_ipmc_entry(thrift_ipmc_entry);
    }
    return ifaces_[i]->sai_thrift_remove_ipmc_entry(thrift_ipmc_entry);
  }

  sai_thrift_status_t sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr);
  }

  void sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, thrift_ipmc_entry);
    }
    ifaces_[i]->sai_thrift_get_ipmc_entry_attribute(_return, thrift_ipmc_entry);
    return;
  }

  sai_thrift_object_id_t sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_samplepacket(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_samplepacket(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_id);
    }
    return ifaces_[i]->sai_thrift_remove_samplepacket(samplepacket_id);
  }

  void sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_id);
    }
    ifaces_[i]->sai_thrift_get_samplepacket_attribute(_return, samplepacket_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id);
  }

  void sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_id);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_entry_attribute(_return, tunnel_map_entry_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_map(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_map(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_map(tunnel_map_id);
  }

  void sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_id);
    }
    ifaces_[i]->sai_thrift_get_tunnel_map_attribute(_return, tunnel_map_id);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel(tunnel_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel(tunnel_id);
  }

  void sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_tunnel_attribute(_return, tunnel_id, thrift_attr_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr);
  }

  void sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_id, counter_ids, number_of_counters);
    }
    ifaces_[i]->sai_thrift_get_tunnel_stats(_return, tunnel_id, counter_ids, number_of_counters);
    return;
  }

  sai_thrift_status_t sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
    }
    return ifaces_[i]->sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
  }

  sai_thrift_object_id_t sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(thrift_attr_list);
    }
    return ifaces_[i]->sai_thrift_create_tunnel_term_table_entry(thrift_attr_list);
  }

  sai_thrift_status_t sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id);
    }
    return ifaces_[i]->sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id);
  }

  void sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_id, thrift_attr_ids);
    }
    ifaces_[i]->sai_thrift_get_tunnel_term_table_entry_attribute(_return, tunnel_term_table_entry_id, thrift_attr_ids);
    return;
  }

  sai_thrift_status_t sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr);
    }
    return ifaces_[i]->sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr);
  }

  void sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_packet_attribute(_return, switch_id);
    }
    ifaces_[i]->sai_thrift_get_cpu_packet_attribute(_return, switch_id);
    return;
  }

  void sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_get_cpu_packet_count(_return);
    }
    ifaces_[i]->sai_thrift_get_cpu_packet_count(_return);
    return;
  }

  void sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_clear_cpu_packet_info(_return);
    }
    ifaces_[i]->sai_thrift_clear_cpu_packet_info(_return);
    return;
  }

  sai_thrift_status_t sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sai_thrift_log_set(sai_api_id, log_level);
    }
    return ifaces_[i]->sai_thrift_log_set(sai_api_id, log_level);
  }

};

} // namespace

#endif
