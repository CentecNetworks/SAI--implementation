/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace switch_sai {


sai_thrift_fdb_entry_t::~sai_thrift_fdb_entry_t() throw() {
}


void sai_thrift_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}

const char* sai_thrift_fdb_entry_t::ascii_fingerprint = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
const uint8_t sai_thrift_fdb_entry_t::binary_fingerprint[16] = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

uint32_t sai_thrift_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_fdb_entry_t &a, sai_thrift_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_fdb_entry_t::sai_thrift_fdb_entry_t(const sai_thrift_fdb_entry_t& other0) {
  mac_address = other0.mac_address;
  bv_id = other0.bv_id;
  __isset = other0.__isset;
}
sai_thrift_fdb_entry_t& sai_thrift_fdb_entry_t::operator=(const sai_thrift_fdb_entry_t& other1) {
  mac_address = other1.mac_address;
  bv_id = other1.bv_id;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_fdb_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_fdb_entry_t(";
  out << "mac_address=" << to_string(obj.mac_address);
  out << ", " << "bv_id=" << to_string(obj.bv_id);
  out << ")";
  return out;
}


sai_thrift_vlan_port_t::~sai_thrift_vlan_port_t() throw() {
}


void sai_thrift_vlan_port_t::__set_port_id(const sai_thrift_object_id_t val) {
  this->port_id = val;
}

void sai_thrift_vlan_port_t::__set_tagging_mode(const sai_thrift_vlan_tagging_mode_t val) {
  this->tagging_mode = val;
}

const char* sai_thrift_vlan_port_t::ascii_fingerprint = "DDB540D232DEE4BB76F25D4DAA0FC261";
const uint8_t sai_thrift_vlan_port_t::binary_fingerprint[16] = {0xDD,0xB5,0x40,0xD2,0x32,0xDE,0xE4,0xBB,0x76,0xF2,0x5D,0x4D,0xAA,0x0F,0xC2,0x61};

uint32_t sai_thrift_vlan_port_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tagging_mode);
          this->__isset.tagging_mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_port_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_vlan_port_t");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagging_mode", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->tagging_mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_vlan_port_t &a, sai_thrift_vlan_port_t &b) {
  using ::std::swap;
  swap(a.port_id, b.port_id);
  swap(a.tagging_mode, b.tagging_mode);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_port_t::sai_thrift_vlan_port_t(const sai_thrift_vlan_port_t& other2) {
  port_id = other2.port_id;
  tagging_mode = other2.tagging_mode;
  __isset = other2.__isset;
}
sai_thrift_vlan_port_t& sai_thrift_vlan_port_t::operator=(const sai_thrift_vlan_port_t& other3) {
  port_id = other3.port_id;
  tagging_mode = other3.tagging_mode;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_port_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_vlan_port_t(";
  out << "port_id=" << to_string(obj.port_id);
  out << ", " << "tagging_mode=" << to_string(obj.tagging_mode);
  out << ")";
  return out;
}


sai_thrift_ip_t::~sai_thrift_ip_t() throw() {
}


void sai_thrift_ip_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_ip_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

const char* sai_thrift_ip_t::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t sai_thrift_ip_t::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t sai_thrift_ip_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_t");

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_t &a, sai_thrift_ip_t &b) {
  using ::std::swap;
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_t::sai_thrift_ip_t(const sai_thrift_ip_t& other4) {
  ip4 = other4.ip4;
  ip6 = other4.ip6;
  __isset = other4.__isset;
}
sai_thrift_ip_t& sai_thrift_ip_t::operator=(const sai_thrift_ip_t& other5) {
  ip4 = other5.ip4;
  ip6 = other5.ip6;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_t(";
  out << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ")";
  return out;
}


sai_thrift_ip_address_t::~sai_thrift_ip_address_t() throw() {
}


void sai_thrift_ip_address_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_address_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

const char* sai_thrift_ip_address_t::ascii_fingerprint = "B86DD0D72747728764BE008BF41FF2EC";
const uint8_t sai_thrift_ip_address_t::binary_fingerprint[16] = {0xB8,0x6D,0xD0,0xD7,0x27,0x47,0x72,0x87,0x64,0xBE,0x00,0x8B,0xF4,0x1F,0xF2,0xEC};

uint32_t sai_thrift_ip_address_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_address_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_address_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_address_t &a, sai_thrift_ip_address_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_address_t::sai_thrift_ip_address_t(const sai_thrift_ip_address_t& other6) {
  addr_family = other6.addr_family;
  addr = other6.addr;
  __isset = other6.__isset;
}
sai_thrift_ip_address_t& sai_thrift_ip_address_t::operator=(const sai_thrift_ip_address_t& other7) {
  addr_family = other7.addr_family;
  addr = other7.addr;
  __isset = other7.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_address_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_address_t(";
  out << "addr_family=" << to_string(obj.addr_family);
  out << ", " << "addr=" << to_string(obj.addr);
  out << ")";
  return out;
}


sai_thrift_ip_prefix_t::~sai_thrift_ip_prefix_t() throw() {
}


void sai_thrift_ip_prefix_t::__set_addr_family(const sai_thrift_ip_addr_family_t val) {
  this->addr_family = val;
}

void sai_thrift_ip_prefix_t::__set_addr(const sai_thrift_ip_t& val) {
  this->addr = val;
}

void sai_thrift_ip_prefix_t::__set_mask(const sai_thrift_ip_t& val) {
  this->mask = val;
}

const char* sai_thrift_ip_prefix_t::ascii_fingerprint = "E386D6453C8DE928C9A469BCA249EA4A";
const uint8_t sai_thrift_ip_prefix_t::binary_fingerprint[16] = {0xE3,0x86,0xD6,0x45,0x3C,0x8D,0xE9,0x28,0xC9,0xA4,0x69,0xBC,0xA2,0x49,0xEA,0x4A};

uint32_t sai_thrift_ip_prefix_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->addr_family);
          this->__isset.addr_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->addr.read(iprot);
          this->__isset.addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ip_prefix_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ip_prefix_t");

  xfer += oprot->writeFieldBegin("addr_family", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->addr_family);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("addr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->addr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ip_prefix_t &a, sai_thrift_ip_prefix_t &b) {
  using ::std::swap;
  swap(a.addr_family, b.addr_family);
  swap(a.addr, b.addr);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

sai_thrift_ip_prefix_t::sai_thrift_ip_prefix_t(const sai_thrift_ip_prefix_t& other8) {
  addr_family = other8.addr_family;
  addr = other8.addr;
  mask = other8.mask;
  __isset = other8.__isset;
}
sai_thrift_ip_prefix_t& sai_thrift_ip_prefix_t::operator=(const sai_thrift_ip_prefix_t& other9) {
  addr_family = other9.addr_family;
  addr = other9.addr;
  mask = other9.mask;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ip_prefix_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ip_prefix_t(";
  out << "addr_family=" << to_string(obj.addr_family);
  out << ", " << "addr=" << to_string(obj.addr);
  out << ", " << "mask=" << to_string(obj.mask);
  out << ")";
  return out;
}


sai_thrift_object_list_t::~sai_thrift_object_list_t() throw() {
}


void sai_thrift_object_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_object_list_t::__set_object_id_list(const std::vector<sai_thrift_object_id_t> & val) {
  this->object_id_list = val;
}

const char* sai_thrift_object_list_t::ascii_fingerprint = "10B0DAF3A336BE67A0D106228B97776E";
const uint8_t sai_thrift_object_list_t::binary_fingerprint[16] = {0x10,0xB0,0xDA,0xF3,0xA3,0x36,0xBE,0x67,0xA0,0xD1,0x06,0x22,0x8B,0x97,0x77,0x6E};

uint32_t sai_thrift_object_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->object_id_list.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->object_id_list.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->object_id_list[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.object_id_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_object_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_object_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("object_id_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->object_id_list.size()));
    std::vector<sai_thrift_object_id_t> ::const_iterator _iter15;
    for (_iter15 = this->object_id_list.begin(); _iter15 != this->object_id_list.end(); ++_iter15)
    {
      xfer += oprot->writeI64((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_object_list_t &a, sai_thrift_object_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.object_id_list, b.object_id_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_object_list_t::sai_thrift_object_list_t(const sai_thrift_object_list_t& other16) {
  count = other16.count;
  object_id_list = other16.object_id_list;
  __isset = other16.__isset;
}
sai_thrift_object_list_t& sai_thrift_object_list_t::operator=(const sai_thrift_object_list_t& other17) {
  count = other17.count;
  object_id_list = other17.object_id_list;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_object_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_object_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "object_id_list=" << to_string(obj.object_id_list);
  out << ")";
  return out;
}


sai_thrift_vlan_list_t::~sai_thrift_vlan_list_t() throw() {
}


void sai_thrift_vlan_list_t::__set_vlan_count(const int32_t val) {
  this->vlan_count = val;
}

void sai_thrift_vlan_list_t::__set_vlan_list(const std::vector<sai_thrift_vlan_id_t> & val) {
  this->vlan_list = val;
}

const char* sai_thrift_vlan_list_t::ascii_fingerprint = "F63F7DE3A4DDE2FDD6CA7F23C86E5F62";
const uint8_t sai_thrift_vlan_list_t::binary_fingerprint[16] = {0xF6,0x3F,0x7D,0xE3,0xA4,0xDD,0xE2,0xFD,0xD6,0xCA,0x7F,0x23,0xC8,0x6E,0x5F,0x62};

uint32_t sai_thrift_vlan_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->vlan_count);
          this->__isset.vlan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vlan_list.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->vlan_list.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readI16(this->vlan_list[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vlan_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_vlan_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_vlan_list_t");

  xfer += oprot->writeFieldBegin("vlan_count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->vlan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlan_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I16, static_cast<uint32_t>(this->vlan_list.size()));
    std::vector<sai_thrift_vlan_id_t> ::const_iterator _iter23;
    for (_iter23 = this->vlan_list.begin(); _iter23 != this->vlan_list.end(); ++_iter23)
    {
      xfer += oprot->writeI16((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_vlan_list_t &a, sai_thrift_vlan_list_t &b) {
  using ::std::swap;
  swap(a.vlan_count, b.vlan_count);
  swap(a.vlan_list, b.vlan_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_vlan_list_t::sai_thrift_vlan_list_t(const sai_thrift_vlan_list_t& other24) {
  vlan_count = other24.vlan_count;
  vlan_list = other24.vlan_list;
  __isset = other24.__isset;
}
sai_thrift_vlan_list_t& sai_thrift_vlan_list_t::operator=(const sai_thrift_vlan_list_t& other25) {
  vlan_count = other25.vlan_count;
  vlan_list = other25.vlan_list;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_vlan_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_vlan_list_t(";
  out << "vlan_count=" << to_string(obj.vlan_count);
  out << ", " << "vlan_list=" << to_string(obj.vlan_list);
  out << ")";
  return out;
}


sai_thrift_s32_list_t::~sai_thrift_s32_list_t() throw() {
}


void sai_thrift_s32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_s32_list_t::__set_s32list(const std::vector<int32_t> & val) {
  this->s32list = val;
}

const char* sai_thrift_s32_list_t::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t sai_thrift_s32_list_t::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t sai_thrift_s32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->s32list.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->s32list.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += iprot->readI32(this->s32list[_i30]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_s32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->s32list.size()));
    std::vector<int32_t> ::const_iterator _iter31;
    for (_iter31 = this->s32list.begin(); _iter31 != this->s32list.end(); ++_iter31)
    {
      xfer += oprot->writeI32((*_iter31));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_s32_list_t &a, sai_thrift_s32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.s32list, b.s32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s32_list_t::sai_thrift_s32_list_t(const sai_thrift_s32_list_t& other32) {
  count = other32.count;
  s32list = other32.s32list;
  __isset = other32.__isset;
}
sai_thrift_s32_list_t& sai_thrift_s32_list_t::operator=(const sai_thrift_s32_list_t& other33) {
  count = other33.count;
  s32list = other33.s32list;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s32_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_s32_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "s32list=" << to_string(obj.s32list);
  out << ")";
  return out;
}


sai_thrift_acl_mask_t::~sai_thrift_acl_mask_t() throw() {
}


void sai_thrift_acl_mask_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_mask_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_mask_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_mask_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_mask_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_mask_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_mask_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_mask_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_mask_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

const char* sai_thrift_acl_mask_t::ascii_fingerprint = "E5AD0FFDCBB7181F022E6B79FC68A4C3";
const uint8_t sai_thrift_acl_mask_t::binary_fingerprint[16] = {0xE5,0xAD,0x0F,0xFD,0xCB,0xB7,0x18,0x1F,0x02,0x2E,0x6B,0x79,0xFC,0x68,0xA4,0xC3};

uint32_t sai_thrift_acl_mask_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_mask_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_mask_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_mask_t &a, sai_thrift_acl_mask_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_mask_t::sai_thrift_acl_mask_t(const sai_thrift_acl_mask_t& other34) {
  u8 = other34.u8;
  s8 = other34.s8;
  u16 = other34.u16;
  s16 = other34.s16;
  u32 = other34.u32;
  s32 = other34.s32;
  mac = other34.mac;
  ip4 = other34.ip4;
  ip6 = other34.ip6;
  __isset = other34.__isset;
}
sai_thrift_acl_mask_t& sai_thrift_acl_mask_t::operator=(const sai_thrift_acl_mask_t& other35) {
  u8 = other35.u8;
  s8 = other35.s8;
  u16 = other35.u16;
  s16 = other35.s16;
  u32 = other35.u32;
  s32 = other35.s32;
  mac = other35.mac;
  ip4 = other35.ip4;
  ip6 = other35.ip6;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_mask_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_mask_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ")";
  return out;
}


sai_thrift_acl_data_t::~sai_thrift_acl_data_t() throw() {
}


void sai_thrift_acl_data_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_data_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_data_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_data_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_data_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_data_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_data_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_data_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

const char* sai_thrift_acl_data_t::ascii_fingerprint = "69A5F89A4AC57555222082782D955546";
const uint8_t sai_thrift_acl_data_t::binary_fingerprint[16] = {0x69,0xA5,0xF8,0x9A,0x4A,0xC5,0x75,0x55,0x22,0x20,0x82,0x78,0x2D,0x95,0x55,0x46};

uint32_t sai_thrift_acl_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_data_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_data_t &a, sai_thrift_acl_data_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_data_t::sai_thrift_acl_data_t(const sai_thrift_acl_data_t& other36) {
  u8 = other36.u8;
  s8 = other36.s8;
  u16 = other36.u16;
  s16 = other36.s16;
  u32 = other36.u32;
  s32 = other36.s32;
  mac = other36.mac;
  ip4 = other36.ip4;
  ip6 = other36.ip6;
  oid = other36.oid;
  objlist = other36.objlist;
  __isset = other36.__isset;
}
sai_thrift_acl_data_t& sai_thrift_acl_data_t::operator=(const sai_thrift_acl_data_t& other37) {
  u8 = other37.u8;
  s8 = other37.s8;
  u16 = other37.u16;
  s16 = other37.s16;
  u32 = other37.u32;
  s32 = other37.s32;
  mac = other37.mac;
  ip4 = other37.ip4;
  ip6 = other37.ip6;
  oid = other37.oid;
  objlist = other37.objlist;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_data_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "objlist=" << to_string(obj.objlist);
  out << ")";
  return out;
}


sai_thrift_acl_field_data_t::~sai_thrift_acl_field_data_t() throw() {
}


void sai_thrift_acl_field_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_field_data_t::__set_mask(const sai_thrift_acl_mask_t& val) {
  this->mask = val;
}

void sai_thrift_acl_field_data_t::__set_data(const sai_thrift_acl_data_t& val) {
  this->data = val;
}

const char* sai_thrift_acl_field_data_t::ascii_fingerprint = "03664F4E12C8E48B0EC937A1E10C2C5A";
const uint8_t sai_thrift_acl_field_data_t::binary_fingerprint[16] = {0x03,0x66,0x4F,0x4E,0x12,0xC8,0xE4,0x8B,0x0E,0xC9,0x37,0xA1,0xE1,0x0C,0x2C,0x5A};

uint32_t sai_thrift_acl_field_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mask.read(iprot);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_field_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_field_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->mask.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_field_data_t &a, sai_thrift_acl_field_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.mask, b.mask);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_field_data_t::sai_thrift_acl_field_data_t(const sai_thrift_acl_field_data_t& other38) {
  enable = other38.enable;
  mask = other38.mask;
  data = other38.data;
  __isset = other38.__isset;
}
sai_thrift_acl_field_data_t& sai_thrift_acl_field_data_t::operator=(const sai_thrift_acl_field_data_t& other39) {
  enable = other39.enable;
  mask = other39.mask;
  data = other39.data;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_field_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_field_data_t(";
  out << "enable=" << to_string(obj.enable);
  out << ", " << "mask=" << to_string(obj.mask);
  out << ", " << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


sai_thrift_acl_parameter_t::~sai_thrift_acl_parameter_t() throw() {
}


void sai_thrift_acl_parameter_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_acl_parameter_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_acl_parameter_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_acl_parameter_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_acl_parameter_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_acl_parameter_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_acl_parameter_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_acl_parameter_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_acl_parameter_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_acl_parameter_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_acl_parameter_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

const char* sai_thrift_acl_parameter_t::ascii_fingerprint = "69A5F89A4AC57555222082782D955546";
const uint8_t sai_thrift_acl_parameter_t::binary_fingerprint[16] = {0x69,0xA5,0xF8,0x9A,0x4A,0xC5,0x75,0x55,0x22,0x20,0x82,0x78,0x2D,0x95,0x55,0x46};

uint32_t sai_thrift_acl_parameter_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_parameter_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_parameter_t");

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_parameter_t &a, sai_thrift_acl_parameter_t &b) {
  using ::std::swap;
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.mac, b.mac);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.oid, b.oid);
  swap(a.objlist, b.objlist);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_parameter_t::sai_thrift_acl_parameter_t(const sai_thrift_acl_parameter_t& other40) {
  u8 = other40.u8;
  s8 = other40.s8;
  u16 = other40.u16;
  s16 = other40.s16;
  u32 = other40.u32;
  s32 = other40.s32;
  mac = other40.mac;
  ip4 = other40.ip4;
  ip6 = other40.ip6;
  oid = other40.oid;
  objlist = other40.objlist;
  __isset = other40.__isset;
}
sai_thrift_acl_parameter_t& sai_thrift_acl_parameter_t::operator=(const sai_thrift_acl_parameter_t& other41) {
  u8 = other41.u8;
  s8 = other41.s8;
  u16 = other41.u16;
  s16 = other41.s16;
  u32 = other41.u32;
  s32 = other41.s32;
  mac = other41.mac;
  ip4 = other41.ip4;
  ip6 = other41.ip6;
  oid = other41.oid;
  objlist = other41.objlist;
  __isset = other41.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_parameter_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_parameter_t(";
  out << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "objlist=" << to_string(obj.objlist);
  out << ")";
  return out;
}


sai_thrift_acl_action_data_t::~sai_thrift_acl_action_data_t() throw() {
}


void sai_thrift_acl_action_data_t::__set_enable(const bool val) {
  this->enable = val;
}

void sai_thrift_acl_action_data_t::__set_parameter(const sai_thrift_acl_parameter_t& val) {
  this->parameter = val;
}

const char* sai_thrift_acl_action_data_t::ascii_fingerprint = "8E364EC7D4D1E630BB35E30514157C57";
const uint8_t sai_thrift_acl_action_data_t::binary_fingerprint[16] = {0x8E,0x36,0x4E,0xC7,0xD4,0xD1,0xE6,0x30,0xBB,0x35,0xE3,0x05,0x14,0x15,0x7C,0x57};

uint32_t sai_thrift_acl_action_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enable);
          this->__isset.enable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameter.read(iprot);
          this->__isset.parameter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_acl_action_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_acl_action_data_t");

  xfer += oprot->writeFieldBegin("enable", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->enable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameter", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->parameter.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_acl_action_data_t &a, sai_thrift_acl_action_data_t &b) {
  using ::std::swap;
  swap(a.enable, b.enable);
  swap(a.parameter, b.parameter);
  swap(a.__isset, b.__isset);
}

sai_thrift_acl_action_data_t::sai_thrift_acl_action_data_t(const sai_thrift_acl_action_data_t& other42) {
  enable = other42.enable;
  parameter = other42.parameter;
  __isset = other42.__isset;
}
sai_thrift_acl_action_data_t& sai_thrift_acl_action_data_t::operator=(const sai_thrift_acl_action_data_t& other43) {
  enable = other43.enable;
  parameter = other43.parameter;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_acl_action_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_acl_action_data_t(";
  out << "enable=" << to_string(obj.enable);
  out << ", " << "parameter=" << to_string(obj.parameter);
  out << ")";
  return out;
}


sai_thrift_u8_list_t::~sai_thrift_u8_list_t() throw() {
}


void sai_thrift_u8_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u8_list_t::__set_u8list(const std::vector<int8_t> & val) {
  this->u8list = val;
}

const char* sai_thrift_u8_list_t::ascii_fingerprint = "C69B8D458340D01227B2A605EFE33F77";
const uint8_t sai_thrift_u8_list_t::binary_fingerprint[16] = {0xC6,0x9B,0x8D,0x45,0x83,0x40,0xD0,0x12,0x27,0xB2,0xA6,0x05,0xEF,0xE3,0x3F,0x77};

uint32_t sai_thrift_u8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u8list.clear();
            uint32_t _size44;
            ::apache::thrift::protocol::TType _etype47;
            xfer += iprot->readListBegin(_etype47, _size44);
            this->u8list.resize(_size44);
            uint32_t _i48;
            for (_i48 = 0; _i48 < _size44; ++_i48)
            {
              xfer += iprot->readByte(this->u8list[_i48]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_u8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->u8list.size()));
    std::vector<int8_t> ::const_iterator _iter49;
    for (_iter49 = this->u8list.begin(); _iter49 != this->u8list.end(); ++_iter49)
    {
      xfer += oprot->writeByte((*_iter49));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_u8_list_t &a, sai_thrift_u8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u8list, b.u8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u8_list_t::sai_thrift_u8_list_t(const sai_thrift_u8_list_t& other50) {
  count = other50.count;
  u8list = other50.u8list;
  __isset = other50.__isset;
}
sai_thrift_u8_list_t& sai_thrift_u8_list_t::operator=(const sai_thrift_u8_list_t& other51) {
  count = other51.count;
  u8list = other51.u8list;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u8_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_u8_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "u8list=" << to_string(obj.u8list);
  out << ")";
  return out;
}


sai_thrift_s8_list_t::~sai_thrift_s8_list_t() throw() {
}


void sai_thrift_s8_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_s8_list_t::__set_s8list(const std::vector<int8_t> & val) {
  this->s8list = val;
}

const char* sai_thrift_s8_list_t::ascii_fingerprint = "C69B8D458340D01227B2A605EFE33F77";
const uint8_t sai_thrift_s8_list_t::binary_fingerprint[16] = {0xC6,0x9B,0x8D,0x45,0x83,0x40,0xD0,0x12,0x27,0xB2,0xA6,0x05,0xEF,0xE3,0x3F,0x77};

uint32_t sai_thrift_s8_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->s8list.clear();
            uint32_t _size52;
            ::apache::thrift::protocol::TType _etype55;
            xfer += iprot->readListBegin(_etype55, _size52);
            this->s8list.resize(_size52);
            uint32_t _i56;
            for (_i56 = 0; _i56 < _size52; ++_i56)
            {
              xfer += iprot->readByte(this->s8list[_i56]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.s8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_s8_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_s8_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->s8list.size()));
    std::vector<int8_t> ::const_iterator _iter57;
    for (_iter57 = this->s8list.begin(); _iter57 != this->s8list.end(); ++_iter57)
    {
      xfer += oprot->writeByte((*_iter57));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_s8_list_t &a, sai_thrift_s8_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.s8list, b.s8list);
  swap(a.__isset, b.__isset);
}

sai_thrift_s8_list_t::sai_thrift_s8_list_t(const sai_thrift_s8_list_t& other58) {
  count = other58.count;
  s8list = other58.s8list;
  __isset = other58.__isset;
}
sai_thrift_s8_list_t& sai_thrift_s8_list_t::operator=(const sai_thrift_s8_list_t& other59) {
  count = other59.count;
  s8list = other59.s8list;
  __isset = other59.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_s8_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_s8_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "s8list=" << to_string(obj.s8list);
  out << ")";
  return out;
}


sai_thrift_u32_list_t::~sai_thrift_u32_list_t() throw() {
}


void sai_thrift_u32_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_u32_list_t::__set_u32list(const std::vector<int32_t> & val) {
  this->u32list = val;
}

const char* sai_thrift_u32_list_t::ascii_fingerprint = "ACBC8ECF4940BD768FA35CCD08154770";
const uint8_t sai_thrift_u32_list_t::binary_fingerprint[16] = {0xAC,0xBC,0x8E,0xCF,0x49,0x40,0xBD,0x76,0x8F,0xA3,0x5C,0xCD,0x08,0x15,0x47,0x70};

uint32_t sai_thrift_u32_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->u32list.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->u32list.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readI32(this->u32list[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_u32_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_u32_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->u32list.size()));
    std::vector<int32_t> ::const_iterator _iter65;
    for (_iter65 = this->u32list.begin(); _iter65 != this->u32list.end(); ++_iter65)
    {
      xfer += oprot->writeI32((*_iter65));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_u32_list_t &a, sai_thrift_u32_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.u32list, b.u32list);
  swap(a.__isset, b.__isset);
}

sai_thrift_u32_list_t::sai_thrift_u32_list_t(const sai_thrift_u32_list_t& other66) {
  count = other66.count;
  u32list = other66.u32list;
  __isset = other66.__isset;
}
sai_thrift_u32_list_t& sai_thrift_u32_list_t::operator=(const sai_thrift_u32_list_t& other67) {
  count = other67.count;
  u32list = other67.u32list;
  __isset = other67.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_u32_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_u32_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "u32list=" << to_string(obj.u32list);
  out << ")";
  return out;
}


sai_thrift_qos_map_params_t::~sai_thrift_qos_map_params_t() throw() {
}


void sai_thrift_qos_map_params_t::__set_tc(const int8_t val) {
  this->tc = val;
}

void sai_thrift_qos_map_params_t::__set_dscp(const int8_t val) {
  this->dscp = val;
}

void sai_thrift_qos_map_params_t::__set_dot1p(const int8_t val) {
  this->dot1p = val;
}

void sai_thrift_qos_map_params_t::__set_prio(const int8_t val) {
  this->prio = val;
}

void sai_thrift_qos_map_params_t::__set_pg(const int8_t val) {
  this->pg = val;
}

void sai_thrift_qos_map_params_t::__set_queue_index(const int8_t val) {
  this->queue_index = val;
}

void sai_thrift_qos_map_params_t::__set_color(const int8_t val) {
  this->color = val;
}

const char* sai_thrift_qos_map_params_t::ascii_fingerprint = "B52DED7AB06D6B1C2B79707266F08CE3";
const uint8_t sai_thrift_qos_map_params_t::binary_fingerprint[16] = {0xB5,0x2D,0xED,0x7A,0xB0,0x6D,0x6B,0x1C,0x2B,0x79,0x70,0x72,0x66,0xF0,0x8C,0xE3};

uint32_t sai_thrift_qos_map_params_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->tc);
          this->__isset.tc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dscp);
          this->__isset.dscp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->dot1p);
          this->__isset.dot1p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->prio);
          this->__isset.prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->pg);
          this->__isset.pg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->queue_index);
          this->__isset.queue_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_params_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_params_t");

  xfer += oprot->writeFieldBegin("tc", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->tc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dscp", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->dscp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dot1p", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->dot1p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prio", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pg", ::apache::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->pg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue_index", ::apache::thrift::protocol::T_BYTE, 6);
  xfer += oprot->writeByte(this->queue_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_BYTE, 7);
  xfer += oprot->writeByte(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_params_t &a, sai_thrift_qos_map_params_t &b) {
  using ::std::swap;
  swap(a.tc, b.tc);
  swap(a.dscp, b.dscp);
  swap(a.dot1p, b.dot1p);
  swap(a.prio, b.prio);
  swap(a.pg, b.pg);
  swap(a.queue_index, b.queue_index);
  swap(a.color, b.color);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_params_t::sai_thrift_qos_map_params_t(const sai_thrift_qos_map_params_t& other68) {
  tc = other68.tc;
  dscp = other68.dscp;
  dot1p = other68.dot1p;
  prio = other68.prio;
  pg = other68.pg;
  queue_index = other68.queue_index;
  color = other68.color;
  __isset = other68.__isset;
}
sai_thrift_qos_map_params_t& sai_thrift_qos_map_params_t::operator=(const sai_thrift_qos_map_params_t& other69) {
  tc = other69.tc;
  dscp = other69.dscp;
  dot1p = other69.dot1p;
  prio = other69.prio;
  pg = other69.pg;
  queue_index = other69.queue_index;
  color = other69.color;
  __isset = other69.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_params_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_params_t(";
  out << "tc=" << to_string(obj.tc);
  out << ", " << "dscp=" << to_string(obj.dscp);
  out << ", " << "dot1p=" << to_string(obj.dot1p);
  out << ", " << "prio=" << to_string(obj.prio);
  out << ", " << "pg=" << to_string(obj.pg);
  out << ", " << "queue_index=" << to_string(obj.queue_index);
  out << ", " << "color=" << to_string(obj.color);
  out << ")";
  return out;
}


sai_thrift_qos_map_t::~sai_thrift_qos_map_t() throw() {
}


void sai_thrift_qos_map_t::__set_key(const sai_thrift_qos_map_params_t& val) {
  this->key = val;
}

void sai_thrift_qos_map_t::__set_value(const sai_thrift_qos_map_params_t& val) {
  this->value = val;
}

const char* sai_thrift_qos_map_t::ascii_fingerprint = "E05B556F54258C0A928DA79EC2E3FC81";
const uint8_t sai_thrift_qos_map_t::binary_fingerprint[16] = {0xE0,0x5B,0x55,0x6F,0x54,0x25,0x8C,0x0A,0x92,0x8D,0xA7,0x9E,0xC2,0xE3,0xFC,0x81};

uint32_t sai_thrift_qos_map_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->key.read(iprot);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_t");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->key.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_t &a, sai_thrift_qos_map_t &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_t::sai_thrift_qos_map_t(const sai_thrift_qos_map_t& other70) {
  key = other70.key;
  value = other70.value;
  __isset = other70.__isset;
}
sai_thrift_qos_map_t& sai_thrift_qos_map_t::operator=(const sai_thrift_qos_map_t& other71) {
  key = other71.key;
  value = other71.value;
  __isset = other71.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_t(";
  out << "key=" << to_string(obj.key);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


sai_thrift_qos_map_list_t::~sai_thrift_qos_map_list_t() throw() {
}


void sai_thrift_qos_map_list_t::__set_count(const int32_t val) {
  this->count = val;
}

void sai_thrift_qos_map_list_t::__set_map_list(const std::vector<sai_thrift_qos_map_t> & val) {
  this->map_list = val;
}

const char* sai_thrift_qos_map_list_t::ascii_fingerprint = "0DE691264E4AB20B77786DC144CDA39F";
const uint8_t sai_thrift_qos_map_list_t::binary_fingerprint[16] = {0x0D,0xE6,0x91,0x26,0x4E,0x4A,0xB2,0x0B,0x77,0x78,0x6D,0xC1,0x44,0xCD,0xA3,0x9F};

uint32_t sai_thrift_qos_map_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->map_list.clear();
            uint32_t _size72;
            ::apache::thrift::protocol::TType _etype75;
            xfer += iprot->readListBegin(_etype75, _size72);
            this->map_list.resize(_size72);
            uint32_t _i76;
            for (_i76 = 0; _i76 < _size72; ++_i76)
            {
              xfer += this->map_list[_i76].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.map_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_qos_map_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_qos_map_list_t");

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("map_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->map_list.size()));
    std::vector<sai_thrift_qos_map_t> ::const_iterator _iter77;
    for (_iter77 = this->map_list.begin(); _iter77 != this->map_list.end(); ++_iter77)
    {
      xfer += (*_iter77).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_qos_map_list_t &a, sai_thrift_qos_map_list_t &b) {
  using ::std::swap;
  swap(a.count, b.count);
  swap(a.map_list, b.map_list);
  swap(a.__isset, b.__isset);
}

sai_thrift_qos_map_list_t::sai_thrift_qos_map_list_t(const sai_thrift_qos_map_list_t& other78) {
  count = other78.count;
  map_list = other78.map_list;
  __isset = other78.__isset;
}
sai_thrift_qos_map_list_t& sai_thrift_qos_map_list_t::operator=(const sai_thrift_qos_map_list_t& other79) {
  count = other79.count;
  map_list = other79.map_list;
  __isset = other79.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_qos_map_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_qos_map_list_t(";
  out << "count=" << to_string(obj.count);
  out << ", " << "map_list=" << to_string(obj.map_list);
  out << ")";
  return out;
}


sai_thrift_attribute_value_t::~sai_thrift_attribute_value_t() throw() {
}


void sai_thrift_attribute_value_t::__set_booldata(const bool val) {
  this->booldata = val;
}

void sai_thrift_attribute_value_t::__set_chardata(const std::string& val) {
  this->chardata = val;
}

void sai_thrift_attribute_value_t::__set_u8(const int8_t val) {
  this->u8 = val;
}

void sai_thrift_attribute_value_t::__set_s8(const int8_t val) {
  this->s8 = val;
}

void sai_thrift_attribute_value_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

void sai_thrift_attribute_value_t::__set_s16(const int16_t val) {
  this->s16 = val;
}

void sai_thrift_attribute_value_t::__set_u32(const int32_t val) {
  this->u32 = val;
}

void sai_thrift_attribute_value_t::__set_s32(const int32_t val) {
  this->s32 = val;
}

void sai_thrift_attribute_value_t::__set_u64(const int64_t val) {
  this->u64 = val;
}

void sai_thrift_attribute_value_t::__set_s64(const int64_t val) {
  this->s64 = val;
}

void sai_thrift_attribute_value_t::__set_mac(const sai_thrift_mac_t& val) {
  this->mac = val;
}

void sai_thrift_attribute_value_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_attribute_value_t::__set_ip4(const sai_thrift_ip4_t& val) {
  this->ip4 = val;
}

void sai_thrift_attribute_value_t::__set_ip6(const sai_thrift_ip6_t& val) {
  this->ip6 = val;
}

void sai_thrift_attribute_value_t::__set_ipaddr(const sai_thrift_ip_address_t& val) {
  this->ipaddr = val;
}

void sai_thrift_attribute_value_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_attribute_value_t::__set_vlanlist(const sai_thrift_vlan_list_t& val) {
  this->vlanlist = val;
}

void sai_thrift_attribute_value_t::__set_aclfield(const sai_thrift_acl_field_data_t& val) {
  this->aclfield = val;
}

void sai_thrift_attribute_value_t::__set_aclaction(const sai_thrift_acl_action_data_t& val) {
  this->aclaction = val;
}

void sai_thrift_attribute_value_t::__set_u8list(const sai_thrift_u8_list_t& val) {
  this->u8list = val;
}

void sai_thrift_attribute_value_t::__set_s8list(const sai_thrift_s8_list_t& val) {
  this->s8list = val;
}

void sai_thrift_attribute_value_t::__set_u32list(const sai_thrift_u32_list_t& val) {
  this->u32list = val;
}

void sai_thrift_attribute_value_t::__set_s32list(const sai_thrift_s32_list_t& val) {
  this->s32list = val;
}

void sai_thrift_attribute_value_t::__set_qosmap(const sai_thrift_qos_map_list_t& val) {
  this->qosmap = val;
}

const char* sai_thrift_attribute_value_t::ascii_fingerprint = "51DC1EEBC206197C892A0DE4788CADF1";
const uint8_t sai_thrift_attribute_value_t::binary_fingerprint[16] = {0x51,0xDC,0x1E,0xEB,0xC2,0x06,0x19,0x7C,0x89,0x2A,0x0D,0xE4,0x78,0x8C,0xAD,0xF1};

uint32_t sai_thrift_attribute_value_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->booldata);
          this->__isset.booldata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chardata);
          this->__isset.chardata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->u8);
          this->__isset.u8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->s8);
          this->__isset.s8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->s16);
          this->__isset.s16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->u32);
          this->__isset.u32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->s32);
          this->__isset.s32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->u64);
          this->__isset.u64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->s64);
          this->__isset.s64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip4);
          this->__isset.ip4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip6);
          this->__isset.ip6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ipaddr.read(iprot);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vlanlist.read(iprot);
          this->__isset.vlanlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclfield.read(iprot);
          this->__isset.aclfield = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->aclaction.read(iprot);
          this->__isset.aclaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u8list.read(iprot);
          this->__isset.u8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s8list.read(iprot);
          this->__isset.s8list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->u32list.read(iprot);
          this->__isset.u32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->s32list.read(iprot);
          this->__isset.s32list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->qosmap.read(iprot);
          this->__isset.qosmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_value_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_value_t");

  xfer += oprot->writeFieldBegin("booldata", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->booldata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chardata", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->chardata);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->u8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->s8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s16", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->s16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->u32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->s32);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u64", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->u64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s64", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->s64);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip4", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->ip4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip6", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->ip6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipaddr", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->ipaddr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vlanlist", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->vlanlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclfield", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->aclfield.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("aclaction", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->aclaction.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u8list", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->u8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s8list", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->s8list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u32list", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->u32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s32list", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->s32list.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qosmap", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->qosmap.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_value_t &a, sai_thrift_attribute_value_t &b) {
  using ::std::swap;
  swap(a.booldata, b.booldata);
  swap(a.chardata, b.chardata);
  swap(a.u8, b.u8);
  swap(a.s8, b.s8);
  swap(a.u16, b.u16);
  swap(a.s16, b.s16);
  swap(a.u32, b.u32);
  swap(a.s32, b.s32);
  swap(a.u64, b.u64);
  swap(a.s64, b.s64);
  swap(a.mac, b.mac);
  swap(a.oid, b.oid);
  swap(a.ip4, b.ip4);
  swap(a.ip6, b.ip6);
  swap(a.ipaddr, b.ipaddr);
  swap(a.objlist, b.objlist);
  swap(a.vlanlist, b.vlanlist);
  swap(a.aclfield, b.aclfield);
  swap(a.aclaction, b.aclaction);
  swap(a.u8list, b.u8list);
  swap(a.s8list, b.s8list);
  swap(a.u32list, b.u32list);
  swap(a.s32list, b.s32list);
  swap(a.qosmap, b.qosmap);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_value_t::sai_thrift_attribute_value_t(const sai_thrift_attribute_value_t& other80) {
  booldata = other80.booldata;
  chardata = other80.chardata;
  u8 = other80.u8;
  s8 = other80.s8;
  u16 = other80.u16;
  s16 = other80.s16;
  u32 = other80.u32;
  s32 = other80.s32;
  u64 = other80.u64;
  s64 = other80.s64;
  mac = other80.mac;
  oid = other80.oid;
  ip4 = other80.ip4;
  ip6 = other80.ip6;
  ipaddr = other80.ipaddr;
  objlist = other80.objlist;
  vlanlist = other80.vlanlist;
  aclfield = other80.aclfield;
  aclaction = other80.aclaction;
  u8list = other80.u8list;
  s8list = other80.s8list;
  u32list = other80.u32list;
  s32list = other80.s32list;
  qosmap = other80.qosmap;
  __isset = other80.__isset;
}
sai_thrift_attribute_value_t& sai_thrift_attribute_value_t::operator=(const sai_thrift_attribute_value_t& other81) {
  booldata = other81.booldata;
  chardata = other81.chardata;
  u8 = other81.u8;
  s8 = other81.s8;
  u16 = other81.u16;
  s16 = other81.s16;
  u32 = other81.u32;
  s32 = other81.s32;
  u64 = other81.u64;
  s64 = other81.s64;
  mac = other81.mac;
  oid = other81.oid;
  ip4 = other81.ip4;
  ip6 = other81.ip6;
  ipaddr = other81.ipaddr;
  objlist = other81.objlist;
  vlanlist = other81.vlanlist;
  aclfield = other81.aclfield;
  aclaction = other81.aclaction;
  u8list = other81.u8list;
  s8list = other81.s8list;
  u32list = other81.u32list;
  s32list = other81.s32list;
  qosmap = other81.qosmap;
  __isset = other81.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_value_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_value_t(";
  out << "booldata=" << to_string(obj.booldata);
  out << ", " << "chardata=" << to_string(obj.chardata);
  out << ", " << "u8=" << to_string(obj.u8);
  out << ", " << "s8=" << to_string(obj.s8);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ", " << "s16=" << to_string(obj.s16);
  out << ", " << "u32=" << to_string(obj.u32);
  out << ", " << "s32=" << to_string(obj.s32);
  out << ", " << "u64=" << to_string(obj.u64);
  out << ", " << "s64=" << to_string(obj.s64);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "ip4=" << to_string(obj.ip4);
  out << ", " << "ip6=" << to_string(obj.ip6);
  out << ", " << "ipaddr=" << to_string(obj.ipaddr);
  out << ", " << "objlist=" << to_string(obj.objlist);
  out << ", " << "vlanlist=" << to_string(obj.vlanlist);
  out << ", " << "aclfield=" << to_string(obj.aclfield);
  out << ", " << "aclaction=" << to_string(obj.aclaction);
  out << ", " << "u8list=" << to_string(obj.u8list);
  out << ", " << "s8list=" << to_string(obj.s8list);
  out << ", " << "u32list=" << to_string(obj.u32list);
  out << ", " << "s32list=" << to_string(obj.s32list);
  out << ", " << "qosmap=" << to_string(obj.qosmap);
  out << ")";
  return out;
}


sai_thrift_attribute_t::~sai_thrift_attribute_t() throw() {
}


void sai_thrift_attribute_t::__set_id(const int32_t val) {
  this->id = val;
}

void sai_thrift_attribute_t::__set_value(const sai_thrift_attribute_value_t& val) {
  this->value = val;
}

const char* sai_thrift_attribute_t::ascii_fingerprint = "E2239A072F9289DA286877FFBC0343B8";
const uint8_t sai_thrift_attribute_t::binary_fingerprint[16] = {0xE2,0x23,0x9A,0x07,0x2F,0x92,0x89,0xDA,0x28,0x68,0x77,0xFF,0xBC,0x03,0x43,0xB8};

uint32_t sai_thrift_attribute_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_t");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_t &a, sai_thrift_attribute_t &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_t::sai_thrift_attribute_t(const sai_thrift_attribute_t& other82) {
  id = other82.id;
  value = other82.value;
  __isset = other82.__isset;
}
sai_thrift_attribute_t& sai_thrift_attribute_t::operator=(const sai_thrift_attribute_t& other83) {
  id = other83.id;
  value = other83.value;
  __isset = other83.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_t(";
  out << "id=" << to_string(obj.id);
  out << ", " << "value=" << to_string(obj.value);
  out << ")";
  return out;
}


sai_thrift_route_entry_t::~sai_thrift_route_entry_t() throw() {
}


void sai_thrift_route_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_route_entry_t::__set_destination(const sai_thrift_ip_prefix_t& val) {
  this->destination = val;
}

const char* sai_thrift_route_entry_t::ascii_fingerprint = "1421265E56D07855254CAE38B8ECDEED";
const uint8_t sai_thrift_route_entry_t::binary_fingerprint[16] = {0x14,0x21,0x26,0x5E,0x56,0xD0,0x78,0x55,0x25,0x4C,0xAE,0x38,0xB8,0xEC,0xDE,0xED};

uint32_t sai_thrift_route_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_route_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_route_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_route_entry_t &a, sai_thrift_route_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_route_entry_t::sai_thrift_route_entry_t(const sai_thrift_route_entry_t& other84) {
  vr_id = other84.vr_id;
  destination = other84.destination;
  __isset = other84.__isset;
}
sai_thrift_route_entry_t& sai_thrift_route_entry_t::operator=(const sai_thrift_route_entry_t& other85) {
  vr_id = other85.vr_id;
  destination = other85.destination;
  __isset = other85.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_route_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_route_entry_t(";
  out << "vr_id=" << to_string(obj.vr_id);
  out << ", " << "destination=" << to_string(obj.destination);
  out << ")";
  return out;
}


sai_thrift_neighbor_entry_t::~sai_thrift_neighbor_entry_t() throw() {
}


void sai_thrift_neighbor_entry_t::__set_rif_id(const sai_thrift_object_id_t val) {
  this->rif_id = val;
}

void sai_thrift_neighbor_entry_t::__set_ip_address(const sai_thrift_ip_address_t& val) {
  this->ip_address = val;
}

const char* sai_thrift_neighbor_entry_t::ascii_fingerprint = "E645009464B75A249EBD2F0FDC535687";
const uint8_t sai_thrift_neighbor_entry_t::binary_fingerprint[16] = {0xE6,0x45,0x00,0x94,0x64,0xB7,0x5A,0x24,0x9E,0xBD,0x2F,0x0F,0xDC,0x53,0x56,0x87};

uint32_t sai_thrift_neighbor_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ip_address.read(iprot);
          this->__isset.ip_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_neighbor_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_neighbor_entry_t");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip_address", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ip_address.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_neighbor_entry_t &a, sai_thrift_neighbor_entry_t &b) {
  using ::std::swap;
  swap(a.rif_id, b.rif_id);
  swap(a.ip_address, b.ip_address);
  swap(a.__isset, b.__isset);
}

sai_thrift_neighbor_entry_t::sai_thrift_neighbor_entry_t(const sai_thrift_neighbor_entry_t& other86) {
  rif_id = other86.rif_id;
  ip_address = other86.ip_address;
  __isset = other86.__isset;
}
sai_thrift_neighbor_entry_t& sai_thrift_neighbor_entry_t::operator=(const sai_thrift_neighbor_entry_t& other87) {
  rif_id = other87.rif_id;
  ip_address = other87.ip_address;
  __isset = other87.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_neighbor_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_neighbor_entry_t(";
  out << "rif_id=" << to_string(obj.rif_id);
  out << ", " << "ip_address=" << to_string(obj.ip_address);
  out << ")";
  return out;
}


sai_thrift_ipmc_entry_t::~sai_thrift_ipmc_entry_t() throw() {
}


void sai_thrift_ipmc_entry_t::__set_vr_id(const sai_thrift_object_id_t val) {
  this->vr_id = val;
}

void sai_thrift_ipmc_entry_t::__set_type(const sai_thrift_ipmc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_ipmc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}

void sai_thrift_ipmc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}

const char* sai_thrift_ipmc_entry_t::ascii_fingerprint = "A4E6C9CBB5395CC1048E56C1DDDBB737";
const uint8_t sai_thrift_ipmc_entry_t::binary_fingerprint[16] = {0xA4,0xE6,0xC9,0xCB,0xB5,0x39,0x5C,0xC1,0x04,0x8E,0x56,0xC1,0xDD,0xDB,0xB7,0x37};

uint32_t sai_thrift_ipmc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_ipmc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_ipmc_entry_t");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_ipmc_entry_t &a, sai_thrift_ipmc_entry_t &b) {
  using ::std::swap;
  swap(a.vr_id, b.vr_id);
  swap(a.type, b.type);
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_ipmc_entry_t::sai_thrift_ipmc_entry_t(const sai_thrift_ipmc_entry_t& other88) {
  vr_id = other88.vr_id;
  type = other88.type;
  source = other88.source;
  destination = other88.destination;
  __isset = other88.__isset;
}
sai_thrift_ipmc_entry_t& sai_thrift_ipmc_entry_t::operator=(const sai_thrift_ipmc_entry_t& other89) {
  vr_id = other89.vr_id;
  type = other89.type;
  source = other89.source;
  destination = other89.destination;
  __isset = other89.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_ipmc_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_ipmc_entry_t(";
  out << "vr_id=" << to_string(obj.vr_id);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "source=" << to_string(obj.source);
  out << ", " << "destination=" << to_string(obj.destination);
  out << ")";
  return out;
}


sai_thrift_l2mc_entry_t::~sai_thrift_l2mc_entry_t() throw() {
}


void sai_thrift_l2mc_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}

void sai_thrift_l2mc_entry_t::__set_type(const sai_thrift_l2mc_entry_type_t val) {
  this->type = val;
}

void sai_thrift_l2mc_entry_t::__set_source(const sai_thrift_ip_address_t& val) {
  this->source = val;
}

void sai_thrift_l2mc_entry_t::__set_destination(const sai_thrift_ip_address_t& val) {
  this->destination = val;
}

const char* sai_thrift_l2mc_entry_t::ascii_fingerprint = "A4E6C9CBB5395CC1048E56C1DDDBB737";
const uint8_t sai_thrift_l2mc_entry_t::binary_fingerprint[16] = {0xA4,0xE6,0xC9,0xCB,0xB5,0x39,0x5C,0xC1,0x04,0x8E,0x56,0xC1,0xDD,0xDB,0xB7,0x37};

uint32_t sai_thrift_l2mc_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->destination.read(iprot);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_l2mc_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_l2mc_entry_t");

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->source.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->destination.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_l2mc_entry_t &a, sai_thrift_l2mc_entry_t &b) {
  using ::std::swap;
  swap(a.bv_id, b.bv_id);
  swap(a.type, b.type);
  swap(a.source, b.source);
  swap(a.destination, b.destination);
  swap(a.__isset, b.__isset);
}

sai_thrift_l2mc_entry_t::sai_thrift_l2mc_entry_t(const sai_thrift_l2mc_entry_t& other90) {
  bv_id = other90.bv_id;
  type = other90.type;
  source = other90.source;
  destination = other90.destination;
  __isset = other90.__isset;
}
sai_thrift_l2mc_entry_t& sai_thrift_l2mc_entry_t::operator=(const sai_thrift_l2mc_entry_t& other91) {
  bv_id = other91.bv_id;
  type = other91.type;
  source = other91.source;
  destination = other91.destination;
  __isset = other91.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_l2mc_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_l2mc_entry_t(";
  out << "bv_id=" << to_string(obj.bv_id);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "source=" << to_string(obj.source);
  out << ", " << "destination=" << to_string(obj.destination);
  out << ")";
  return out;
}


sai_thrift_mcast_fdb_entry_t::~sai_thrift_mcast_fdb_entry_t() throw() {
}


void sai_thrift_mcast_fdb_entry_t::__set_mac_address(const sai_thrift_mac_t& val) {
  this->mac_address = val;
}

void sai_thrift_mcast_fdb_entry_t::__set_bv_id(const sai_thrift_object_id_t val) {
  this->bv_id = val;
}

const char* sai_thrift_mcast_fdb_entry_t::ascii_fingerprint = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
const uint8_t sai_thrift_mcast_fdb_entry_t::binary_fingerprint[16] = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

uint32_t sai_thrift_mcast_fdb_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac_address);
          this->__isset.mac_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bv_id);
          this->__isset.bv_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_mcast_fdb_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_mcast_fdb_entry_t");

  xfer += oprot->writeFieldBegin("mac_address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->mac_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bv_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bv_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_mcast_fdb_entry_t &a, sai_thrift_mcast_fdb_entry_t &b) {
  using ::std::swap;
  swap(a.mac_address, b.mac_address);
  swap(a.bv_id, b.bv_id);
  swap(a.__isset, b.__isset);
}

sai_thrift_mcast_fdb_entry_t::sai_thrift_mcast_fdb_entry_t(const sai_thrift_mcast_fdb_entry_t& other92) {
  mac_address = other92.mac_address;
  bv_id = other92.bv_id;
  __isset = other92.__isset;
}
sai_thrift_mcast_fdb_entry_t& sai_thrift_mcast_fdb_entry_t::operator=(const sai_thrift_mcast_fdb_entry_t& other93) {
  mac_address = other93.mac_address;
  bv_id = other93.bv_id;
  __isset = other93.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_mcast_fdb_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_mcast_fdb_entry_t(";
  out << "mac_address=" << to_string(obj.mac_address);
  out << ", " << "bv_id=" << to_string(obj.bv_id);
  out << ")";
  return out;
}


sai_thrift_inseg_entry_t::~sai_thrift_inseg_entry_t() throw() {
}


void sai_thrift_inseg_entry_t::__set_label(const int32_t val) {
  this->label = val;
}

const char* sai_thrift_inseg_entry_t::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t sai_thrift_inseg_entry_t::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t sai_thrift_inseg_entry_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->label);
          this->__isset.label = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_inseg_entry_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_inseg_entry_t");

  xfer += oprot->writeFieldBegin("label", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->label);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_inseg_entry_t &a, sai_thrift_inseg_entry_t &b) {
  using ::std::swap;
  swap(a.label, b.label);
  swap(a.__isset, b.__isset);
}

sai_thrift_inseg_entry_t::sai_thrift_inseg_entry_t(const sai_thrift_inseg_entry_t& other94) {
  label = other94.label;
  __isset = other94.__isset;
}
sai_thrift_inseg_entry_t& sai_thrift_inseg_entry_t::operator=(const sai_thrift_inseg_entry_t& other95) {
  label = other95.label;
  __isset = other95.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_inseg_entry_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_inseg_entry_t(";
  out << "label=" << to_string(obj.label);
  out << ")";
  return out;
}


sai_thrift_attribute_list_t::~sai_thrift_attribute_list_t() throw() {
}


void sai_thrift_attribute_list_t::__set_attr_list(const std::vector<sai_thrift_attribute_t> & val) {
  this->attr_list = val;
}

void sai_thrift_attribute_list_t::__set_attr_count(const int32_t val) {
  this->attr_count = val;
}

void sai_thrift_attribute_list_t::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}

const char* sai_thrift_attribute_list_t::ascii_fingerprint = "147DE042700DD45739768F8CF4543A9B";
const uint8_t sai_thrift_attribute_list_t::binary_fingerprint[16] = {0x14,0x7D,0xE0,0x42,0x70,0x0D,0xD4,0x57,0x39,0x76,0x8F,0x8C,0xF4,0x54,0x3A,0x9B};

uint32_t sai_thrift_attribute_list_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attr_list.clear();
            uint32_t _size96;
            ::apache::thrift::protocol::TType _etype99;
            xfer += iprot->readListBegin(_etype99, _size96);
            this->attr_list.resize(_size96);
            uint32_t _i100;
            for (_i100 = 0; _i100 < _size96; ++_i100)
            {
              xfer += this->attr_list[_i100].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->attr_count);
          this->__isset.attr_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_attribute_list_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_attribute_list_t");

  xfer += oprot->writeFieldBegin("attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter101;
    for (_iter101 = this->attr_list.begin(); _iter101 != this->attr_list.end(); ++_iter101)
    {
      xfer += (*_iter101).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attr_count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->attr_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_attribute_list_t &a, sai_thrift_attribute_list_t &b) {
  using ::std::swap;
  swap(a.attr_list, b.attr_list);
  swap(a.attr_count, b.attr_count);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_attribute_list_t::sai_thrift_attribute_list_t(const sai_thrift_attribute_list_t& other102) {
  attr_list = other102.attr_list;
  attr_count = other102.attr_count;
  status = other102.status;
  __isset = other102.__isset;
}
sai_thrift_attribute_list_t& sai_thrift_attribute_list_t::operator=(const sai_thrift_attribute_list_t& other103) {
  attr_list = other103.attr_list;
  attr_count = other103.attr_count;
  status = other103.status;
  __isset = other103.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_attribute_list_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_attribute_list_t(";
  out << "attr_list=" << to_string(obj.attr_list);
  out << ", " << "attr_count=" << to_string(obj.attr_count);
  out << ", " << "status=" << to_string(obj.status);
  out << ")";
  return out;
}


sai_thrift_result_data_t::~sai_thrift_result_data_t() throw() {
}


void sai_thrift_result_data_t::__set_objlist(const sai_thrift_object_list_t& val) {
  this->objlist = val;
}

void sai_thrift_result_data_t::__set_oid(const sai_thrift_object_id_t val) {
  this->oid = val;
}

void sai_thrift_result_data_t::__set_u16(const int16_t val) {
  this->u16 = val;
}

const char* sai_thrift_result_data_t::ascii_fingerprint = "617CEFEEDE885AD7CC566DB8E284D490";
const uint8_t sai_thrift_result_data_t::binary_fingerprint[16] = {0x61,0x7C,0xEF,0xEE,0xDE,0x88,0x5A,0xD7,0xCC,0x56,0x6D,0xB8,0xE2,0x84,0xD4,0x90};

uint32_t sai_thrift_result_data_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->objlist.read(iprot);
          this->__isset.objlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oid);
          this->__isset.oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->u16);
          this->__isset.u16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_data_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_result_data_t");

  xfer += oprot->writeFieldBegin("objlist", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->objlist.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("u16", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->u16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_result_data_t &a, sai_thrift_result_data_t &b) {
  using ::std::swap;
  swap(a.objlist, b.objlist);
  swap(a.oid, b.oid);
  swap(a.u16, b.u16);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_data_t::sai_thrift_result_data_t(const sai_thrift_result_data_t& other104) {
  objlist = other104.objlist;
  oid = other104.oid;
  u16 = other104.u16;
  __isset = other104.__isset;
}
sai_thrift_result_data_t& sai_thrift_result_data_t::operator=(const sai_thrift_result_data_t& other105) {
  objlist = other105.objlist;
  oid = other105.oid;
  u16 = other105.u16;
  __isset = other105.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_data_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_result_data_t(";
  out << "objlist=" << to_string(obj.objlist);
  out << ", " << "oid=" << to_string(obj.oid);
  out << ", " << "u16=" << to_string(obj.u16);
  out << ")";
  return out;
}


sai_thrift_result_t::~sai_thrift_result_t() throw() {
}


void sai_thrift_result_t::__set_data(const sai_thrift_result_data_t& val) {
  this->data = val;
}

void sai_thrift_result_t::__set_status(const sai_thrift_status_t val) {
  this->status = val;
}

const char* sai_thrift_result_t::ascii_fingerprint = "AA7B6A1CB6D462119487BA9E69E3EFA7";
const uint8_t sai_thrift_result_t::binary_fingerprint[16] = {0xAA,0x7B,0x6A,0x1C,0xB6,0xD4,0x62,0x11,0x94,0x87,0xBA,0x9E,0x69,0xE3,0xEF,0xA7};

uint32_t sai_thrift_result_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t sai_thrift_result_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("sai_thrift_result_t");

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(sai_thrift_result_t &a, sai_thrift_result_t &b) {
  using ::std::swap;
  swap(a.data, b.data);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

sai_thrift_result_t::sai_thrift_result_t(const sai_thrift_result_t& other106) {
  data = other106.data;
  status = other106.status;
  __isset = other106.__isset;
}
sai_thrift_result_t& sai_thrift_result_t::operator=(const sai_thrift_result_t& other107) {
  data = other107.data;
  status = other107.status;
  __isset = other107.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const sai_thrift_result_t& obj) {
  using apache::thrift::to_string;
  out << "sai_thrift_result_t(";
  out << "data=" << to_string(obj.data);
  out << ", " << "status=" << to_string(obj.status);
  out << ")";
  return out;
}

} // namespace
