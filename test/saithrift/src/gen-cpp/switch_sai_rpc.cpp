/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "switch_sai_rpc.h"

namespace switch_sai {


switch_sai_rpc_sai_thrift_set_port_attribute_args::~switch_sai_rpc_sai_thrift_set_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_pargs::~switch_sai_rpc_sai_thrift_set_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_result::~switch_sai_rpc_sai_thrift_set_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_port_attribute_presult::~switch_sai_rpc_sai_thrift_set_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_args::~switch_sai_rpc_sai_thrift_get_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_pargs::~switch_sai_rpc_sai_thrift_get_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_result::~switch_sai_rpc_sai_thrift_get_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_attribute_presult::~switch_sai_rpc_sai_thrift_get_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_args::~switch_sai_rpc_sai_thrift_get_port_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size108;
            ::apache::thrift::protocol::TType _etype111;
            xfer += iprot->readListBegin(_etype111, _size108);
            this->counter_ids.resize(_size108);
            uint32_t _i112;
            for (_i112 = 0; _i112 < _size108; ++_i112)
            {
              xfer += iprot->readI32(this->counter_ids[_i112]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_port_stat_counter_t> ::const_iterator _iter113;
    for (_iter113 = this->counter_ids.begin(); _iter113 != this->counter_ids.end(); ++_iter113)
    {
      xfer += oprot->writeI32((*_iter113));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_pargs::~switch_sai_rpc_sai_thrift_get_port_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_port_stat_counter_t> ::const_iterator _iter114;
    for (_iter114 = (*(this->counter_ids)).begin(); _iter114 != (*(this->counter_ids)).end(); ++_iter114)
    {
      xfer += oprot->writeI32((*_iter114));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_result::~switch_sai_rpc_sai_thrift_get_port_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size115;
            ::apache::thrift::protocol::TType _etype118;
            xfer += iprot->readListBegin(_etype118, _size115);
            this->success.resize(_size115);
            uint32_t _i119;
            for (_i119 = 0; _i119 < _size115; ++_i119)
            {
              xfer += iprot->readI64(this->success[_i119]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter120;
      for (_iter120 = this->success.begin(); _iter120 != this->success.end(); ++_iter120)
      {
        xfer += oprot->writeI64((*_iter120));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_stats_presult::~switch_sai_rpc_sai_thrift_get_port_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size121;
            ::apache::thrift::protocol::TType _etype124;
            xfer += iprot->readListBegin(_etype124, _size121);
            (*(this->success)).resize(_size121);
            uint32_t _i125;
            for (_i125 = 0; _i125 < _size121; ++_i125)
            {
              xfer += iprot->readI64((*(this->success))[_i125]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_args::~switch_sai_rpc_sai_thrift_clear_port_all_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_args");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs::~switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs");

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_result::~switch_sai_rpc_sai_thrift_clear_port_all_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_port_all_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_port_all_stats_presult::~switch_sai_rpc_sai_thrift_clear_port_all_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_port_all_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_args::~switch_sai_rpc_sai_thrift_create_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size126;
            ::apache::thrift::protocol::TType _etype129;
            xfer += iprot->readListBegin(_etype129, _size126);
            this->thrift_attr_list.resize(_size126);
            uint32_t _i130;
            for (_i130 = 0; _i130 < _size126; ++_i130)
            {
              xfer += this->thrift_attr_list[_i130].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter131;
    for (_iter131 = this->thrift_attr_list.begin(); _iter131 != this->thrift_attr_list.end(); ++_iter131)
    {
      xfer += (*_iter131).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_create_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter132;
    for (_iter132 = (*(this->thrift_attr_list)).begin(); _iter132 != (*(this->thrift_attr_list)).end(); ++_iter132)
    {
      xfer += (*_iter132).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_result::~switch_sai_rpc_sai_thrift_create_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_fdb_entry_presult::~switch_sai_rpc_sai_thrift_create_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_args::~switch_sai_rpc_sai_thrift_delete_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_result::~switch_sai_rpc_sai_thrift_delete_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_delete_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_delete_fdb_entry_presult::~switch_sai_rpc_sai_thrift_delete_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_delete_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_args::~switch_sai_rpc_sai_thrift_flush_fdb_entries_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size133;
            ::apache::thrift::protocol::TType _etype136;
            xfer += iprot->readListBegin(_etype136, _size133);
            this->thrift_attr_list.resize(_size133);
            uint32_t _i137;
            for (_i137 = 0; _i137 < _size133; ++_i137)
            {
              xfer += this->thrift_attr_list[_i137].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter138;
    for (_iter138 = this->thrift_attr_list.begin(); _iter138 != this->thrift_attr_list.end(); ++_iter138)
    {
      xfer += (*_iter138).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs::~switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter139;
    for (_iter139 = (*(this->thrift_attr_list)).begin(); _iter139 != (*(this->thrift_attr_list)).end(); ++_iter139)
    {
      xfer += (*_iter139).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_result::~switch_sai_rpc_sai_thrift_flush_fdb_entries_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_flush_fdb_entries_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_flush_fdb_entries_presult::~switch_sai_rpc_sai_thrift_flush_fdb_entries_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_flush_fdb_entries_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_fdb_entry.read(iprot);
          this->__isset.thrift_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_args::~switch_sai_rpc_sai_thrift_create_vlan_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size140;
            ::apache::thrift::protocol::TType _etype143;
            xfer += iprot->readListBegin(_etype143, _size140);
            this->thrift_attr_list.resize(_size140);
            uint32_t _i144;
            for (_i144 = 0; _i144 < _size140; ++_i144)
            {
              xfer += this->thrift_attr_list[_i144].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter145;
    for (_iter145 = this->thrift_attr_list.begin(); _iter145 != this->thrift_attr_list.end(); ++_iter145)
    {
      xfer += (*_iter145).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_pargs::~switch_sai_rpc_sai_thrift_create_vlan_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter146;
    for (_iter146 = (*(this->thrift_attr_list)).begin(); _iter146 != (*(this->thrift_attr_list)).end(); ++_iter146)
    {
      xfer += (*_iter146).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_result::~switch_sai_rpc_sai_thrift_create_vlan_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_presult::~switch_sai_rpc_sai_thrift_create_vlan_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_args::~switch_sai_rpc_sai_thrift_remove_vlan_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_oid);
          this->__isset.vlan_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_args");

  xfer += oprot->writeFieldBegin("vlan_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_pargs::~switch_sai_rpc_sai_thrift_remove_vlan_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_pargs");

  xfer += oprot->writeFieldBegin("vlan_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_result::~switch_sai_rpc_sai_thrift_remove_vlan_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_presult::~switch_sai_rpc_sai_thrift_remove_vlan_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_args::~switch_sai_rpc_sai_thrift_get_vlan_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size147;
            ::apache::thrift::protocol::TType _etype150;
            xfer += iprot->readListBegin(_etype150, _size147);
            this->counter_ids.resize(_size147);
            uint32_t _i151;
            for (_i151 = 0; _i151 < _size147; ++_i151)
            {
              xfer += iprot->readI32(this->counter_ids[_i151]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_vlan_stat_counter_t> ::const_iterator _iter152;
    for (_iter152 = this->counter_ids.begin(); _iter152 != this->counter_ids.end(); ++_iter152)
    {
      xfer += oprot->writeI32((*_iter152));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_pargs::~switch_sai_rpc_sai_thrift_get_vlan_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_vlan_stat_counter_t> ::const_iterator _iter153;
    for (_iter153 = (*(this->counter_ids)).begin(); _iter153 != (*(this->counter_ids)).end(); ++_iter153)
    {
      xfer += oprot->writeI32((*_iter153));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_result::~switch_sai_rpc_sai_thrift_get_vlan_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size154;
            ::apache::thrift::protocol::TType _etype157;
            xfer += iprot->readListBegin(_etype157, _size154);
            this->success.resize(_size154);
            uint32_t _i158;
            for (_i158 = 0; _i158 < _size154; ++_i158)
            {
              xfer += iprot->readI64(this->success[_i158]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter159;
      for (_iter159 = this->success.begin(); _iter159 != this->success.end(); ++_iter159)
      {
        xfer += oprot->writeI64((*_iter159));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_stats_presult::~switch_sai_rpc_sai_thrift_get_vlan_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size160;
            ::apache::thrift::protocol::TType _etype163;
            xfer += iprot->readListBegin(_etype163, _size160);
            (*(this->success)).resize(_size160);
            uint32_t _i164;
            for (_i164 = 0; _i164 < _size160; ++_i164)
            {
              xfer += iprot->readI64((*(this->success))[_i164]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_args::~switch_sai_rpc_sai_thrift_create_vlan_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size165;
            ::apache::thrift::protocol::TType _etype168;
            xfer += iprot->readListBegin(_etype168, _size165);
            this->thrift_attr_list.resize(_size165);
            uint32_t _i169;
            for (_i169 = 0; _i169 < _size165; ++_i169)
            {
              xfer += this->thrift_attr_list[_i169].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter170;
    for (_iter170 = this->thrift_attr_list.begin(); _iter170 != this->thrift_attr_list.end(); ++_iter170)
    {
      xfer += (*_iter170).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_pargs::~switch_sai_rpc_sai_thrift_create_vlan_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter171;
    for (_iter171 = (*(this->thrift_attr_list)).begin(); _iter171 != (*(this->thrift_attr_list)).end(); ++_iter171)
    {
      xfer += (*_iter171).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_result::~switch_sai_rpc_sai_thrift_create_vlan_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_vlan_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_vlan_member_presult::~switch_sai_rpc_sai_thrift_create_vlan_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_vlan_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args::~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_member_id);
          this->__isset.vlan_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result::~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_args::~switch_sai_rpc_sai_thrift_remove_vlan_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_member_id);
          this->__isset.vlan_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_args");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_pargs::~switch_sai_rpc_sai_thrift_remove_vlan_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_pargs");

  xfer += oprot->writeFieldBegin("vlan_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_result::~switch_sai_rpc_sai_thrift_remove_vlan_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_vlan_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_vlan_member_presult::~switch_sai_rpc_sai_thrift_remove_vlan_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_vlan_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_vlan_attribute_args::~switch_sai_rpc_sai_thrift_set_vlan_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_vlan_attribute_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs::~switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_vlan_attribute_result::~switch_sai_rpc_sai_thrift_set_vlan_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_vlan_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_vlan_attribute_presult::~switch_sai_rpc_sai_thrift_set_vlan_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_vlan_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_args::~switch_sai_rpc_sai_thrift_get_vlan_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs::~switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_result::~switch_sai_rpc_sai_thrift_get_vlan_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_attribute_presult::~switch_sai_rpc_sai_thrift_get_vlan_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_id_args::~switch_sai_rpc_sai_thrift_get_vlan_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vlan_id);
          this->__isset.vlan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_id_args");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vlan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_id_pargs::~switch_sai_rpc_sai_thrift_get_vlan_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_id_pargs");

  xfer += oprot->writeFieldBegin("vlan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vlan_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_id_result::~switch_sai_rpc_sai_thrift_get_vlan_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_vlan_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_vlan_id_presult::~switch_sai_rpc_sai_thrift_get_vlan_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_vlan_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_args::~switch_sai_rpc_sai_thrift_create_virtual_router_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size172;
            ::apache::thrift::protocol::TType _etype175;
            xfer += iprot->readListBegin(_etype175, _size172);
            this->thrift_attr_list.resize(_size172);
            uint32_t _i176;
            for (_i176 = 0; _i176 < _size172; ++_i176)
            {
              xfer += this->thrift_attr_list[_i176].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter177;
    for (_iter177 = this->thrift_attr_list.begin(); _iter177 != this->thrift_attr_list.end(); ++_iter177)
    {
      xfer += (*_iter177).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_pargs::~switch_sai_rpc_sai_thrift_create_virtual_router_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter178;
    for (_iter178 = (*(this->thrift_attr_list)).begin(); _iter178 != (*(this->thrift_attr_list)).end(); ++_iter178)
    {
      xfer += (*_iter178).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_result::~switch_sai_rpc_sai_thrift_create_virtual_router_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_virtual_router_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_virtual_router_presult::~switch_sai_rpc_sai_thrift_create_virtual_router_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_virtual_router_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_args::~switch_sai_rpc_sai_thrift_remove_virtual_router_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_args");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_pargs::~switch_sai_rpc_sai_thrift_remove_virtual_router_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_pargs");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vr_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_result::~switch_sai_rpc_sai_thrift_remove_virtual_router_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_virtual_router_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_virtual_router_presult::~switch_sai_rpc_sai_thrift_remove_virtual_router_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_virtual_router_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args::~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs::~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vr_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result::~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult::~switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args::~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vr_id);
          this->__isset.vr_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->vr_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs::~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs");

  xfer += oprot->writeFieldBegin("vr_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->vr_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result::~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult::~switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_args::~switch_sai_rpc_sai_thrift_create_route_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_route_entry.read(iprot);
          this->__isset.thrift_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size179;
            ::apache::thrift::protocol::TType _etype182;
            xfer += iprot->readListBegin(_etype182, _size179);
            this->thrift_attr_list.resize(_size179);
            uint32_t _i183;
            for (_i183 = 0; _i183 < _size179; ++_i183)
            {
              xfer += this->thrift_attr_list[_i183].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_route_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_args");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter184;
    for (_iter184 = this->thrift_attr_list.begin(); _iter184 != this->thrift_attr_list.end(); ++_iter184)
    {
      xfer += (*_iter184).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_pargs::~switch_sai_rpc_sai_thrift_create_route_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_pargs");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter185;
    for (_iter185 = (*(this->thrift_attr_list)).begin(); _iter185 != (*(this->thrift_attr_list)).end(); ++_iter185)
    {
      xfer += (*_iter185).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_result::~switch_sai_rpc_sai_thrift_create_route_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_route_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_route_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_route_presult::~switch_sai_rpc_sai_thrift_create_route_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_route_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_args::~switch_sai_rpc_sai_thrift_remove_route_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_route_entry.read(iprot);
          this->__isset.thrift_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_route_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_args");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_pargs::~switch_sai_rpc_sai_thrift_remove_route_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_pargs");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_result::~switch_sai_rpc_sai_thrift_remove_route_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_route_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_route_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_route_presult::~switch_sai_rpc_sai_thrift_remove_route_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_route_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_route_attribute_args::~switch_sai_rpc_sai_thrift_set_route_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_route_entry.read(iprot);
          this->__isset.thrift_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_route_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_route_attribute_pargs::~switch_sai_rpc_sai_thrift_set_route_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_route_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_route_attribute_result::~switch_sai_rpc_sai_thrift_set_route_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_route_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_route_attribute_presult::~switch_sai_rpc_sai_thrift_set_route_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_route_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_route_attribute_args::~switch_sai_rpc_sai_thrift_get_route_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_route_entry.read(iprot);
          this->__isset.thrift_route_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_route_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_route_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_route_attribute_pargs::~switch_sai_rpc_sai_thrift_get_route_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_route_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_route_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_route_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_route_attribute_result::~switch_sai_rpc_sai_thrift_get_route_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_route_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_route_attribute_presult::~switch_sai_rpc_sai_thrift_get_route_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_route_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_args::~switch_sai_rpc_sai_thrift_create_router_interface_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size186;
            ::apache::thrift::protocol::TType _etype189;
            xfer += iprot->readListBegin(_etype189, _size186);
            this->thrift_attr_list.resize(_size186);
            uint32_t _i190;
            for (_i190 = 0; _i190 < _size186; ++_i190)
            {
              xfer += this->thrift_attr_list[_i190].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_router_interface_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter191;
    for (_iter191 = this->thrift_attr_list.begin(); _iter191 != this->thrift_attr_list.end(); ++_iter191)
    {
      xfer += (*_iter191).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_pargs::~switch_sai_rpc_sai_thrift_create_router_interface_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter192;
    for (_iter192 = (*(this->thrift_attr_list)).begin(); _iter192 != (*(this->thrift_attr_list)).end(); ++_iter192)
    {
      xfer += (*_iter192).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_result::~switch_sai_rpc_sai_thrift_create_router_interface_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_router_interface_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_router_interface_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_router_interface_presult::~switch_sai_rpc_sai_thrift_create_router_interface_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_router_interface_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_args::~switch_sai_rpc_sai_thrift_remove_router_interface_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_args");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_pargs::~switch_sai_rpc_sai_thrift_remove_router_interface_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_pargs");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->rif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_result::~switch_sai_rpc_sai_thrift_remove_router_interface_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_router_interface_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_router_interface_presult::~switch_sai_rpc_sai_thrift_remove_router_interface_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_router_interface_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_router_interface_attribute_args::~switch_sai_rpc_sai_thrift_set_router_interface_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_router_interface_attribute_args");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs::~switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->rif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_router_interface_attribute_result::~switch_sai_rpc_sai_thrift_set_router_interface_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_router_interface_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult::~switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_router_interface_attribute_args::~switch_sai_rpc_sai_thrift_get_router_interface_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rif_id);
          this->__isset.rif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_router_interface_attribute_args");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs::~switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs");

  xfer += oprot->writeFieldBegin("rif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->rif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_router_interface_attribute_result::~switch_sai_rpc_sai_thrift_get_router_interface_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_router_interface_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult::~switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_args::~switch_sai_rpc_sai_thrift_create_next_hop_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size193;
            ::apache::thrift::protocol::TType _etype196;
            xfer += iprot->readListBegin(_etype196, _size193);
            this->thrift_attr_list.resize(_size193);
            uint32_t _i197;
            for (_i197 = 0; _i197 < _size193; ++_i197)
            {
              xfer += this->thrift_attr_list[_i197].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter198;
    for (_iter198 = this->thrift_attr_list.begin(); _iter198 != this->thrift_attr_list.end(); ++_iter198)
    {
      xfer += (*_iter198).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_pargs::~switch_sai_rpc_sai_thrift_create_next_hop_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter199;
    for (_iter199 = (*(this->thrift_attr_list)).begin(); _iter199 != (*(this->thrift_attr_list)).end(); ++_iter199)
    {
      xfer += (*_iter199).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_result::~switch_sai_rpc_sai_thrift_create_next_hop_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_presult::~switch_sai_rpc_sai_thrift_create_next_hop_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_args::~switch_sai_rpc_sai_thrift_remove_next_hop_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_id);
          this->__isset.next_hop_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_args");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_pargs");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_result::~switch_sai_rpc_sai_thrift_remove_next_hop_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_attribute_args::~switch_sai_rpc_sai_thrift_get_next_hop_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->next_hop_id);
          this->__isset.next_hop_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_attribute_args");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->next_hop_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs::~switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs");

  xfer += oprot->writeFieldBegin("next_hop_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->next_hop_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_attribute_result::~switch_sai_rpc_sai_thrift_get_next_hop_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult::~switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_args::~switch_sai_rpc_sai_thrift_create_next_hop_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size200;
            ::apache::thrift::protocol::TType _etype203;
            xfer += iprot->readListBegin(_etype203, _size200);
            this->thrift_attr_list.resize(_size200);
            uint32_t _i204;
            for (_i204 = 0; _i204 < _size200; ++_i204)
            {
              xfer += this->thrift_attr_list[_i204].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter205;
    for (_iter205 = this->thrift_attr_list.begin(); _iter205 != this->thrift_attr_list.end(); ++_iter205)
    {
      xfer += (*_iter205).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_pargs::~switch_sai_rpc_sai_thrift_create_next_hop_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter206;
    for (_iter206 = (*(this->thrift_attr_list)).begin(); _iter206 != (*(this->thrift_attr_list)).end(); ++_iter206)
    {
      xfer += (*_iter206).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_result::~switch_sai_rpc_sai_thrift_create_next_hop_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_presult::~switch_sai_rpc_sai_thrift_create_next_hop_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_args::~switch_sai_rpc_sai_thrift_remove_next_hop_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nhop_group_oid);
          this->__isset.nhop_group_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_args");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nhop_group_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->nhop_group_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_result::~switch_sai_rpc_sai_thrift_remove_next_hop_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args::~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nhop_group_oid);
          this->__isset.nhop_group_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nhop_group_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs::~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->nhop_group_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result::~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult::~switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args::~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nhop_group_oid);
          this->__isset.nhop_group_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nhop_group_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("nhop_group_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->nhop_group_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result::~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_member_args::~switch_sai_rpc_sai_thrift_create_next_hop_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size207;
            ::apache::thrift::protocol::TType _etype210;
            xfer += iprot->readListBegin(_etype210, _size207);
            this->thrift_attr_list.resize(_size207);
            uint32_t _i211;
            for (_i211 = 0; _i211 < _size207; ++_i211)
            {
              xfer += this->thrift_attr_list[_i211].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter212;
    for (_iter212 = this->thrift_attr_list.begin(); _iter212 != this->thrift_attr_list.end(); ++_iter212)
    {
      xfer += (*_iter212).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs::~switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter213;
    for (_iter213 = (*(this->thrift_attr_list)).begin(); _iter213 != (*(this->thrift_attr_list)).end(); ++_iter213)
    {
      xfer += (*_iter213).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_member_result::~switch_sai_rpc_sai_thrift_create_next_hop_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_next_hop_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult::~switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args::~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nhop_group_member_oid);
          this->__isset.nhop_group_member_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args");

  xfer += oprot->writeFieldBegin("nhop_group_member_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nhop_group_member_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs::~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs");

  xfer += oprot->writeFieldBegin("nhop_group_member_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->nhop_group_member_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result::~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult::~switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args::~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nhop_group_member_oid);
          this->__isset.nhop_group_member_oid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("nhop_group_member_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->nhop_group_member_oid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("nhop_group_member_oid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->nhop_group_member_oid)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result::~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_args::~switch_sai_rpc_sai_thrift_create_lag_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size214;
            ::apache::thrift::protocol::TType _etype217;
            xfer += iprot->readListBegin(_etype217, _size214);
            this->thrift_attr_list.resize(_size214);
            uint32_t _i218;
            for (_i218 = 0; _i218 < _size214; ++_i218)
            {
              xfer += this->thrift_attr_list[_i218].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter219;
    for (_iter219 = this->thrift_attr_list.begin(); _iter219 != this->thrift_attr_list.end(); ++_iter219)
    {
      xfer += (*_iter219).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_pargs::~switch_sai_rpc_sai_thrift_create_lag_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter220;
    for (_iter220 = (*(this->thrift_attr_list)).begin(); _iter220 != (*(this->thrift_attr_list)).end(); ++_iter220)
    {
      xfer += (*_iter220).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_result::~switch_sai_rpc_sai_thrift_create_lag_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_presult::~switch_sai_rpc_sai_thrift_create_lag_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_args::~switch_sai_rpc_sai_thrift_remove_lag_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_id);
          this->__isset.lag_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_args");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_pargs::~switch_sai_rpc_sai_thrift_remove_lag_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_pargs");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_result::~switch_sai_rpc_sai_thrift_remove_lag_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_presult::~switch_sai_rpc_sai_thrift_remove_lag_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_attribute_args::~switch_sai_rpc_sai_thrift_set_lag_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_id);
          this->__isset.lag_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_attribute_args");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_attribute_pargs::~switch_sai_rpc_sai_thrift_set_lag_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_attribute_pargs");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_attribute_result::~switch_sai_rpc_sai_thrift_set_lag_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_attribute_presult::~switch_sai_rpc_sai_thrift_set_lag_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_attribute_args::~switch_sai_rpc_sai_thrift_get_lag_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_id);
          this->__isset.lag_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_attribute_args");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_attribute_pargs::~switch_sai_rpc_sai_thrift_get_lag_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_attribute_pargs");

  xfer += oprot->writeFieldBegin("lag_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_attribute_result::~switch_sai_rpc_sai_thrift_get_lag_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_attribute_presult::~switch_sai_rpc_sai_thrift_get_lag_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_args::~switch_sai_rpc_sai_thrift_create_lag_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size221;
            ::apache::thrift::protocol::TType _etype224;
            xfer += iprot->readListBegin(_etype224, _size221);
            this->thrift_attr_list.resize(_size221);
            uint32_t _i225;
            for (_i225 = 0; _i225 < _size221; ++_i225)
            {
              xfer += this->thrift_attr_list[_i225].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter226;
    for (_iter226 = this->thrift_attr_list.begin(); _iter226 != this->thrift_attr_list.end(); ++_iter226)
    {
      xfer += (*_iter226).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_pargs::~switch_sai_rpc_sai_thrift_create_lag_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter227;
    for (_iter227 = (*(this->thrift_attr_list)).begin(); _iter227 != (*(this->thrift_attr_list)).end(); ++_iter227)
    {
      xfer += (*_iter227).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_result::~switch_sai_rpc_sai_thrift_create_lag_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_lag_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_lag_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_lag_member_presult::~switch_sai_rpc_sai_thrift_create_lag_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_lag_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_args::~switch_sai_rpc_sai_thrift_remove_lag_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_member_id);
          this->__isset.lag_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_args");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_pargs::~switch_sai_rpc_sai_thrift_remove_lag_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_pargs");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_result::~switch_sai_rpc_sai_thrift_remove_lag_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_lag_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_lag_member_presult::~switch_sai_rpc_sai_thrift_remove_lag_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_lag_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_member_attribute_args::~switch_sai_rpc_sai_thrift_set_lag_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_member_id);
          this->__isset.lag_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_member_attribute_args");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs::~switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_member_attribute_result::~switch_sai_rpc_sai_thrift_set_lag_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_lag_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult::~switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_member_attribute_args::~switch_sai_rpc_sai_thrift_get_lag_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lag_member_id);
          this->__isset.lag_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_member_attribute_args");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->lag_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("lag_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->lag_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_member_attribute_result::~switch_sai_rpc_sai_thrift_get_lag_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_lag_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_args::~switch_sai_rpc_sai_thrift_create_stp_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size228;
            ::apache::thrift::protocol::TType _etype231;
            xfer += iprot->readListBegin(_etype231, _size228);
            this->thrift_attr_list.resize(_size228);
            uint32_t _i232;
            for (_i232 = 0; _i232 < _size228; ++_i232)
            {
              xfer += this->thrift_attr_list[_i232].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter233;
    for (_iter233 = this->thrift_attr_list.begin(); _iter233 != this->thrift_attr_list.end(); ++_iter233)
    {
      xfer += (*_iter233).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_pargs::~switch_sai_rpc_sai_thrift_create_stp_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter234;
    for (_iter234 = (*(this->thrift_attr_list)).begin(); _iter234 != (*(this->thrift_attr_list)).end(); ++_iter234)
    {
      xfer += (*_iter234).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_result::~switch_sai_rpc_sai_thrift_create_stp_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_stp_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_stp_entry_presult::~switch_sai_rpc_sai_thrift_create_stp_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_stp_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_args::~switch_sai_rpc_sai_thrift_remove_stp_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_pargs::~switch_sai_rpc_sai_thrift_remove_stp_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_result::~switch_sai_rpc_sai_thrift_remove_stp_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_stp_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_stp_entry_presult::~switch_sai_rpc_sai_thrift_remove_stp_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_stp_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_args::~switch_sai_rpc_sai_thrift_set_stp_port_state_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->stp_port_state);
          this->__isset.stp_port_state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stp_port_state", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->stp_port_state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_pargs::~switch_sai_rpc_sai_thrift_set_stp_port_state_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stp_port_state", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte((*(this->stp_port_state)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_result::~switch_sai_rpc_sai_thrift_set_stp_port_state_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_stp_port_state_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_stp_port_state_presult::~switch_sai_rpc_sai_thrift_set_stp_port_state_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_stp_port_state_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_args::~switch_sai_rpc_sai_thrift_get_stp_port_state_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->stp_id);
          this->__isset.stp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->port_id);
          this->__isset.port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_args");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->stp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_pargs::~switch_sai_rpc_sai_thrift_get_stp_port_state_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_pargs");

  xfer += oprot->writeFieldBegin("stp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->stp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port_id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_result::~switch_sai_rpc_sai_thrift_get_stp_port_state_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_stp_port_state_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BYTE, 0);
    xfer += oprot->writeByte(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_stp_port_state_presult::~switch_sai_rpc_sai_thrift_get_stp_port_state_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_stp_port_state_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_args::~switch_sai_rpc_sai_thrift_create_neighbor_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size235;
            ::apache::thrift::protocol::TType _etype238;
            xfer += iprot->readListBegin(_etype238, _size235);
            this->thrift_attr_list.resize(_size235);
            uint32_t _i239;
            for (_i239 = 0; _i239 < _size235; ++_i239)
            {
              xfer += this->thrift_attr_list[_i239].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter240;
    for (_iter240 = this->thrift_attr_list.begin(); _iter240 != this->thrift_attr_list.end(); ++_iter240)
    {
      xfer += (*_iter240).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs::~switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter241;
    for (_iter241 = (*(this->thrift_attr_list)).begin(); _iter241 != (*(this->thrift_attr_list)).end(); ++_iter241)
    {
      xfer += (*_iter241).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_result::~switch_sai_rpc_sai_thrift_create_neighbor_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_neighbor_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_neighbor_entry_presult::~switch_sai_rpc_sai_thrift_create_neighbor_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_neighbor_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_neighbor_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult::~switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args::~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs::~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result::~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult::~switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_neighbor_entry.read(iprot);
          this->__isset.thrift_neighbor_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_neighbor_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_neighbor_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_neighbor_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_args::~switch_sai_rpc_sai_thrift_get_switch_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size242;
            ::apache::thrift::protocol::TType _etype245;
            xfer += iprot->readListBegin(_etype245, _size242);
            this->thrift_attr_ids.resize(_size242);
            uint32_t _i246;
            for (_i246 = 0; _i246 < _size242; ++_i246)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i246]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter247;
    for (_iter247 = this->thrift_attr_ids.begin(); _iter247 != this->thrift_attr_ids.end(); ++_iter247)
    {
      xfer += oprot->writeI32((*_iter247));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_pargs::~switch_sai_rpc_sai_thrift_get_switch_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter248;
    for (_iter248 = (*(this->thrift_attr_ids)).begin(); _iter248 != (*(this->thrift_attr_ids)).end(); ++_iter248)
    {
      xfer += oprot->writeI32((*_iter248));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_result::~switch_sai_rpc_sai_thrift_get_switch_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_switch_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_switch_attribute_presult::~switch_sai_rpc_sai_thrift_get_switch_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_switch_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult::~switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_args::~switch_sai_rpc_sai_thrift_get_cpu_port_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs::~switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_result::~switch_sai_rpc_sai_thrift_get_cpu_port_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_port_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_port_id_presult::~switch_sai_rpc_sai_thrift_get_cpu_port_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_port_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_args::~switch_sai_rpc_sai_thrift_get_default_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_pargs::~switch_sai_rpc_sai_thrift_get_default_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_result::~switch_sai_rpc_sai_thrift_get_default_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_trap_group_presult::~switch_sai_rpc_sai_thrift_get_default_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_args::~switch_sai_rpc_sai_thrift_get_default_router_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_pargs::~switch_sai_rpc_sai_thrift_get_default_router_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_result::~switch_sai_rpc_sai_thrift_get_default_router_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_router_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_router_id_presult::~switch_sai_rpc_sai_thrift_get_default_router_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_router_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args::~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs::~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result::~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult::~switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_vlan_id_args::~switch_sai_rpc_sai_thrift_get_default_vlan_id_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_vlan_id_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs::~switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_vlan_id_result::~switch_sai_rpc_sai_thrift_get_default_vlan_id_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_default_vlan_id_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_default_vlan_id_presult::~switch_sai_rpc_sai_thrift_get_default_vlan_id_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_default_vlan_id_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port_name);
          this->__isset.port_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args");

  xfer += oprot->writeFieldBegin("port_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->port_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs");

  xfer += oprot->writeFieldBegin("port_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->port_name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult::~switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_args::~switch_sai_rpc_sai_thrift_set_switch_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->attribute.read(iprot);
          this->__isset.attribute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_args");

  xfer += oprot->writeFieldBegin("attribute", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->attribute.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_pargs::~switch_sai_rpc_sai_thrift_set_switch_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_pargs");

  xfer += oprot->writeFieldBegin("attribute", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->attribute)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_result::~switch_sai_rpc_sai_thrift_set_switch_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_switch_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_switch_attribute_presult::~switch_sai_rpc_sai_thrift_set_switch_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_switch_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_args::~switch_sai_rpc_sai_thrift_create_switch_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_switch_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_pargs::~switch_sai_rpc_sai_thrift_create_switch_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_result::~switch_sai_rpc_sai_thrift_create_switch_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_switch_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_switch_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_switch_presult::~switch_sai_rpc_sai_thrift_create_switch_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_switch_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_switch_args::~switch_sai_rpc_sai_thrift_remove_switch_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_switch_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_switch_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_switch_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_switch_pargs::~switch_sai_rpc_sai_thrift_remove_switch_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_switch_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_switch_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_switch_result::~switch_sai_rpc_sai_thrift_remove_switch_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_switch_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_switch_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_switch_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_switch_presult::~switch_sai_rpc_sai_thrift_remove_switch_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_switch_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_args::~switch_sai_rpc_sai_thrift_create_bridge_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size249;
            ::apache::thrift::protocol::TType _etype252;
            xfer += iprot->readListBegin(_etype252, _size249);
            this->thrift_attr_list.resize(_size249);
            uint32_t _i253;
            for (_i253 = 0; _i253 < _size249; ++_i253)
            {
              xfer += this->thrift_attr_list[_i253].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter254;
    for (_iter254 = this->thrift_attr_list.begin(); _iter254 != this->thrift_attr_list.end(); ++_iter254)
    {
      xfer += (*_iter254).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_pargs::~switch_sai_rpc_sai_thrift_create_bridge_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter255;
    for (_iter255 = (*(this->thrift_attr_list)).begin(); _iter255 != (*(this->thrift_attr_list)).end(); ++_iter255)
    {
      xfer += (*_iter255).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_result::~switch_sai_rpc_sai_thrift_create_bridge_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_port_presult::~switch_sai_rpc_sai_thrift_create_bridge_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_args::~switch_sai_rpc_sai_thrift_remove_bridge_port_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_port_id);
          this->__isset.bridge_port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_args");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_pargs::~switch_sai_rpc_sai_thrift_remove_bridge_port_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_pargs");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_result::~switch_sai_rpc_sai_thrift_remove_bridge_port_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_port_presult::~switch_sai_rpc_sai_thrift_remove_bridge_port_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_list_args::~switch_sai_rpc_sai_thrift_get_bridge_port_list_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_list_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs::~switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_list_result::~switch_sai_rpc_sai_thrift_get_bridge_port_list_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_list_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_list_presult::~switch_sai_rpc_sai_thrift_get_bridge_port_list_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_list_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args::~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_port_id);
          this->__isset.bridge_port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs::~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result::~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult::~switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args::~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_port_id);
          this->__isset.bridge_port_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_port_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs::~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs");

  xfer += oprot->writeFieldBegin("bridge_port_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_port_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result::~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult::~switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_args::~switch_sai_rpc_sai_thrift_create_bridge_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size256;
            ::apache::thrift::protocol::TType _etype259;
            xfer += iprot->readListBegin(_etype259, _size256);
            this->thrift_attr_list.resize(_size256);
            uint32_t _i260;
            for (_i260 = 0; _i260 < _size256; ++_i260)
            {
              xfer += this->thrift_attr_list[_i260].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter261;
    for (_iter261 = this->thrift_attr_list.begin(); _iter261 != this->thrift_attr_list.end(); ++_iter261)
    {
      xfer += (*_iter261).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_pargs::~switch_sai_rpc_sai_thrift_create_bridge_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter262;
    for (_iter262 = (*(this->thrift_attr_list)).begin(); _iter262 != (*(this->thrift_attr_list)).end(); ++_iter262)
    {
      xfer += (*_iter262).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_result::~switch_sai_rpc_sai_thrift_create_bridge_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_bridge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_bridge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_bridge_presult::~switch_sai_rpc_sai_thrift_create_bridge_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_bridge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_args::~switch_sai_rpc_sai_thrift_remove_bridge_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_pargs::~switch_sai_rpc_sai_thrift_remove_bridge_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_result::~switch_sai_rpc_sai_thrift_remove_bridge_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_bridge_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_bridge_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_bridge_presult::~switch_sai_rpc_sai_thrift_remove_bridge_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_bridge_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_attribute_args::~switch_sai_rpc_sai_thrift_get_bridge_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_attribute_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs::~switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_attribute_result::~switch_sai_rpc_sai_thrift_get_bridge_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_bridge_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_bridge_attribute_presult::~switch_sai_rpc_sai_thrift_get_bridge_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_bridge_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_attribute_args::~switch_sai_rpc_sai_thrift_set_bridge_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bridge_id);
          this->__isset.bridge_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_attribute_args");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bridge_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs::~switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs");

  xfer += oprot->writeFieldBegin("bridge_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->bridge_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_attribute_result::~switch_sai_rpc_sai_thrift_set_bridge_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_bridge_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_bridge_attribute_presult::~switch_sai_rpc_sai_thrift_set_bridge_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_bridge_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_args::~switch_sai_rpc_sai_thrift_create_hostif_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size263;
            ::apache::thrift::protocol::TType _etype266;
            xfer += iprot->readListBegin(_etype266, _size263);
            this->thrift_attr_list.resize(_size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              xfer += this->thrift_attr_list[_i267].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter268;
    for (_iter268 = this->thrift_attr_list.begin(); _iter268 != this->thrift_attr_list.end(); ++_iter268)
    {
      xfer += (*_iter268).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_pargs::~switch_sai_rpc_sai_thrift_create_hostif_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter269;
    for (_iter269 = (*(this->thrift_attr_list)).begin(); _iter269 != (*(this->thrift_attr_list)).end(); ++_iter269)
    {
      xfer += (*_iter269).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_result::~switch_sai_rpc_sai_thrift_create_hostif_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_presult::~switch_sai_rpc_sai_thrift_create_hostif_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_args::~switch_sai_rpc_sai_thrift_remove_hostif_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hif_id);
          this->__isset.thrift_hif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_args");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_pargs");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_result::~switch_sai_rpc_sai_thrift_remove_hostif_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_presult::~switch_sai_rpc_sai_thrift_remove_hostif_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_attribute_args::~switch_sai_rpc_sai_thrift_get_hostif_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hif_id);
          this->__isset.thrift_hif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs::~switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_attribute_result::~switch_sai_rpc_sai_thrift_get_hostif_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_attribute_presult::~switch_sai_rpc_sai_thrift_get_hostif_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_attribute_args::~switch_sai_rpc_sai_thrift_set_hostif_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hif_id);
          this->__isset.thrift_hif_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hif_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs::~switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hif_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hif_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_attribute_result::~switch_sai_rpc_sai_thrift_set_hostif_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_attribute_presult::~switch_sai_rpc_sai_thrift_set_hostif_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_table_entry_args::~switch_sai_rpc_sai_thrift_create_hostif_table_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size270;
            ::apache::thrift::protocol::TType _etype273;
            xfer += iprot->readListBegin(_etype273, _size270);
            this->thrift_attr_list.resize(_size270);
            uint32_t _i274;
            for (_i274 = 0; _i274 < _size270; ++_i274)
            {
              xfer += this->thrift_attr_list[_i274].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_table_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter275;
    for (_iter275 = this->thrift_attr_list.begin(); _iter275 != this->thrift_attr_list.end(); ++_iter275)
    {
      xfer += (*_iter275).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs::~switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter276;
    for (_iter276 = (*(this->thrift_attr_list)).begin(); _iter276 != (*(this->thrift_attr_list)).end(); ++_iter276)
    {
      xfer += (*_iter276).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_table_entry_result::~switch_sai_rpc_sai_thrift_create_hostif_table_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_table_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult::~switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args::~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_table_entry_id);
          this->__isset.thrift_hostif_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result::~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult::~switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_table_entry_id);
          this->__isset.thrift_hostif_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_table_entry_id);
          this->__isset.thrift_hostif_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size277;
            ::apache::thrift::protocol::TType _etype280;
            xfer += iprot->readListBegin(_etype280, _size277);
            this->thrift_attr_list.resize(_size277);
            uint32_t _i281;
            for (_i281 = 0; _i281 < _size277; ++_i281)
            {
              xfer += this->thrift_attr_list[_i281].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter282;
    for (_iter282 = this->thrift_attr_list.begin(); _iter282 != this->thrift_attr_list.end(); ++_iter282)
    {
      xfer += (*_iter282).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter283;
    for (_iter283 = (*(this->thrift_attr_list)).begin(); _iter283 != (*(this->thrift_attr_list)).end(); ++_iter283)
    {
      xfer += (*_iter283).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult::~switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_group_id);
          this->__isset.thrift_hostif_trap_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult::~switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args::~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_group_id);
          this->__isset.thrift_hostif_trap_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result::~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_group_id);
          this->__isset.thrift_hostif_trap_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult::~switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_args::~switch_sai_rpc_sai_thrift_create_hostif_trap_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size284;
            ::apache::thrift::protocol::TType _etype287;
            xfer += iprot->readListBegin(_etype287, _size284);
            this->thrift_attr_list.resize(_size284);
            uint32_t _i288;
            for (_i288 = 0; _i288 < _size284; ++_i288)
            {
              xfer += this->thrift_attr_list[_i288].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter289;
    for (_iter289 = this->thrift_attr_list.begin(); _iter289 != this->thrift_attr_list.end(); ++_iter289)
    {
      xfer += (*_iter289).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_pargs::~switch_sai_rpc_sai_thrift_create_hostif_trap_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter290;
    for (_iter290 = (*(this->thrift_attr_list)).begin(); _iter290 != (*(this->thrift_attr_list)).end(); ++_iter290)
    {
      xfer += (*_iter290).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_result::~switch_sai_rpc_sai_thrift_create_hostif_trap_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hostif_trap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hostif_trap_presult::~switch_sai_rpc_sai_thrift_create_hostif_trap_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hostif_trap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_args::~switch_sai_rpc_sai_thrift_remove_hostif_trap_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_id);
          this->__isset.thrift_hostif_trap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs::~switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_result::~switch_sai_rpc_sai_thrift_remove_hostif_trap_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hostif_trap_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hostif_trap_presult::~switch_sai_rpc_sai_thrift_remove_hostif_trap_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hostif_trap_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args::~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_id);
          this->__isset.thrift_hostif_trap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs::~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result::~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult::~switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args::~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hostif_trap_id);
          this->__isset.thrift_hostif_trap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hostif_trap_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs::~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hostif_trap_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hostif_trap_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result::~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult::~switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_args::~switch_sai_rpc_sai_thrift_create_acl_table_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size291;
            ::apache::thrift::protocol::TType _etype294;
            xfer += iprot->readListBegin(_etype294, _size291);
            this->thrift_attr_list.resize(_size291);
            uint32_t _i295;
            for (_i295 = 0; _i295 < _size291; ++_i295)
            {
              xfer += this->thrift_attr_list[_i295].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter296;
    for (_iter296 = this->thrift_attr_list.begin(); _iter296 != this->thrift_attr_list.end(); ++_iter296)
    {
      xfer += (*_iter296).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_pargs::~switch_sai_rpc_sai_thrift_create_acl_table_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter297;
    for (_iter297 = (*(this->thrift_attr_list)).begin(); _iter297 != (*(this->thrift_attr_list)).end(); ++_iter297)
    {
      xfer += (*_iter297).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_result::~switch_sai_rpc_sai_thrift_create_acl_table_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_presult::~switch_sai_rpc_sai_thrift_create_acl_table_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_args::~switch_sai_rpc_sai_thrift_remove_acl_table_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_id);
          this->__isset.acl_table_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_args");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_pargs::~switch_sai_rpc_sai_thrift_remove_acl_table_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_pargs");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_result::~switch_sai_rpc_sai_thrift_remove_acl_table_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_presult::~switch_sai_rpc_sai_thrift_remove_acl_table_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_table_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_id);
          this->__isset.acl_table_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size298;
            ::apache::thrift::protocol::TType _etype301;
            xfer += iprot->readListBegin(_etype301, _size298);
            this->thrift_attr_ids.resize(_size298);
            uint32_t _i302;
            for (_i302 = 0; _i302 < _size298; ++_i302)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i302]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_attribute_args");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter303;
    for (_iter303 = this->thrift_attr_ids.begin(); _iter303 != this->thrift_attr_ids.end(); ++_iter303)
    {
      xfer += oprot->writeI32((*_iter303));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_table_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter304;
    for (_iter304 = (*(this->thrift_attr_ids)).begin(); _iter304 != (*(this->thrift_attr_ids)).end(); ++_iter304)
    {
      xfer += oprot->writeI32((*_iter304));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_table_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_args::~switch_sai_rpc_sai_thrift_create_acl_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size305;
            ::apache::thrift::protocol::TType _etype308;
            xfer += iprot->readListBegin(_etype308, _size305);
            this->thrift_attr_list.resize(_size305);
            uint32_t _i309;
            for (_i309 = 0; _i309 < _size305; ++_i309)
            {
              xfer += this->thrift_attr_list[_i309].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter310;
    for (_iter310 = this->thrift_attr_list.begin(); _iter310 != this->thrift_attr_list.end(); ++_iter310)
    {
      xfer += (*_iter310).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_pargs::~switch_sai_rpc_sai_thrift_create_acl_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter311;
    for (_iter311 = (*(this->thrift_attr_list)).begin(); _iter311 != (*(this->thrift_attr_list)).end(); ++_iter311)
    {
      xfer += (*_iter311).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_result::~switch_sai_rpc_sai_thrift_create_acl_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_entry_presult::~switch_sai_rpc_sai_thrift_create_acl_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_entry_args::~switch_sai_rpc_sai_thrift_remove_acl_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_entry);
          this->__isset.acl_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_entry_args");

  xfer += oprot->writeFieldBegin("acl_entry", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_entry);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_entry_pargs::~switch_sai_rpc_sai_thrift_remove_acl_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_entry_pargs");

  xfer += oprot->writeFieldBegin("acl_entry", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_entry)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_entry_result::~switch_sai_rpc_sai_thrift_remove_acl_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_entry_presult::~switch_sai_rpc_sai_thrift_remove_acl_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_entry_id);
          this->__isset.acl_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args");

  xfer += oprot->writeFieldBegin("acl_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_entry_id);
          this->__isset.acl_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size312;
            ::apache::thrift::protocol::TType _etype315;
            xfer += iprot->readListBegin(_etype315, _size312);
            this->thrift_attr_ids.resize(_size312);
            uint32_t _i316;
            for (_i316 = 0; _i316 < _size312; ++_i316)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i316]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args");

  xfer += oprot->writeFieldBegin("acl_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter317;
    for (_iter317 = this->thrift_attr_ids.begin(); _iter317 != this->thrift_attr_ids.end(); ++_iter317)
    {
      xfer += oprot->writeI32((*_iter317));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter318;
    for (_iter318 = (*(this->thrift_attr_ids)).begin(); _iter318 != (*(this->thrift_attr_ids)).end(); ++_iter318)
    {
      xfer += oprot->writeI32((*_iter318));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_args::~switch_sai_rpc_sai_thrift_create_acl_table_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size319;
            ::apache::thrift::protocol::TType _etype322;
            xfer += iprot->readListBegin(_etype322, _size319);
            this->thrift_attr_list.resize(_size319);
            uint32_t _i323;
            for (_i323 = 0; _i323 < _size319; ++_i323)
            {
              xfer += this->thrift_attr_list[_i323].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter324;
    for (_iter324 = this->thrift_attr_list.begin(); _iter324 != this->thrift_attr_list.end(); ++_iter324)
    {
      xfer += (*_iter324).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_pargs::~switch_sai_rpc_sai_thrift_create_acl_table_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter325;
    for (_iter325 = (*(this->thrift_attr_list)).begin(); _iter325 != (*(this->thrift_attr_list)).end(); ++_iter325)
    {
      xfer += (*_iter325).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_result::~switch_sai_rpc_sai_thrift_create_acl_table_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_presult::~switch_sai_rpc_sai_thrift_create_acl_table_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_args::~switch_sai_rpc_sai_thrift_remove_acl_table_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_group_id);
          this->__isset.acl_table_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_args");

  xfer += oprot->writeFieldBegin("acl_table_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs::~switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs");

  xfer += oprot->writeFieldBegin("acl_table_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_result::~switch_sai_rpc_sai_thrift_remove_acl_table_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_presult::~switch_sai_rpc_sai_thrift_remove_acl_table_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_group_id);
          this->__isset.acl_table_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args");

  xfer += oprot->writeFieldBegin("acl_table_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_table_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_member_args::~switch_sai_rpc_sai_thrift_create_acl_table_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size326;
            ::apache::thrift::protocol::TType _etype329;
            xfer += iprot->readListBegin(_etype329, _size326);
            this->thrift_attr_list.resize(_size326);
            uint32_t _i330;
            for (_i330 = 0; _i330 < _size326; ++_i330)
            {
              xfer += this->thrift_attr_list[_i330].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter331;
    for (_iter331 = this->thrift_attr_list.begin(); _iter331 != this->thrift_attr_list.end(); ++_iter331)
    {
      xfer += (*_iter331).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs::~switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter332;
    for (_iter332 = (*(this->thrift_attr_list)).begin(); _iter332 != (*(this->thrift_attr_list)).end(); ++_iter332)
    {
      xfer += (*_iter332).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_member_result::~switch_sai_rpc_sai_thrift_create_acl_table_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_table_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult::~switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args::~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_group_member_id);
          this->__isset.acl_table_group_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args");

  xfer += oprot->writeFieldBegin("acl_table_group_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_group_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs::~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs");

  xfer += oprot->writeFieldBegin("acl_table_group_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_group_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result::~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult::~switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_table_group_member_id);
          this->__isset.acl_table_group_member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("acl_table_group_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_table_group_member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_table_group_member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_table_group_member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_args::~switch_sai_rpc_sai_thrift_create_acl_counter_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size333;
            ::apache::thrift::protocol::TType _etype336;
            xfer += iprot->readListBegin(_etype336, _size333);
            this->thrift_attr_list.resize(_size333);
            uint32_t _i337;
            for (_i337 = 0; _i337 < _size333; ++_i337)
            {
              xfer += this->thrift_attr_list[_i337].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter338;
    for (_iter338 = this->thrift_attr_list.begin(); _iter338 != this->thrift_attr_list.end(); ++_iter338)
    {
      xfer += (*_iter338).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_pargs::~switch_sai_rpc_sai_thrift_create_acl_counter_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter339;
    for (_iter339 = (*(this->thrift_attr_list)).begin(); _iter339 != (*(this->thrift_attr_list)).end(); ++_iter339)
    {
      xfer += (*_iter339).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_result::~switch_sai_rpc_sai_thrift_create_acl_counter_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_acl_counter_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_acl_counter_presult::~switch_sai_rpc_sai_thrift_create_acl_counter_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_acl_counter_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_counter_args::~switch_sai_rpc_sai_thrift_remove_acl_counter_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_counter_id);
          this->__isset.acl_counter_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_counter_args");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_counter_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_counter_pargs::~switch_sai_rpc_sai_thrift_remove_acl_counter_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_counter_pargs");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_counter_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_counter_result::~switch_sai_rpc_sai_thrift_remove_acl_counter_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_acl_counter_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_acl_counter_presult::~switch_sai_rpc_sai_thrift_remove_acl_counter_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_acl_counter_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->acl_counter_id);
          this->__isset.acl_counter_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size340;
            ::apache::thrift::protocol::TType _etype343;
            xfer += iprot->readListBegin(_etype343, _size340);
            this->thrift_attr_ids.resize(_size340);
            uint32_t _i344;
            for (_i344 = 0; _i344 < _size340; ++_i344)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i344]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->acl_counter_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter345;
    for (_iter345 = this->thrift_attr_ids.begin(); _iter345 != this->thrift_attr_ids.end(); ++_iter345)
    {
      xfer += oprot->writeI32((*_iter345));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs");

  xfer += oprot->writeFieldBegin("acl_counter_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->acl_counter_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter346;
    for (_iter346 = (*(this->thrift_attr_ids)).begin(); _iter346 != (*(this->thrift_attr_ids)).end(); ++_iter346)
    {
      xfer += oprot->writeI32((*_iter346));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size347;
            ::apache::thrift::protocol::TType _etype350;
            xfer += iprot->readListBegin(_etype350, _size347);
            this->success.resize(_size347);
            uint32_t _i351;
            for (_i351 = 0; _i351 < _size347; ++_i351)
            {
              xfer += this->success[_i351].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->success.size()));
      std::vector<sai_thrift_attribute_value_t> ::const_iterator _iter352;
      for (_iter352 = this->success.begin(); _iter352 != this->success.end(); ++_iter352)
      {
        xfer += (*_iter352).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult::~switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size353;
            ::apache::thrift::protocol::TType _etype356;
            xfer += iprot->readListBegin(_etype356, _size353);
            (*(this->success)).resize(_size353);
            uint32_t _i357;
            for (_i357 = 0; _i357 < _size353; ++_i357)
            {
              xfer += (*(this->success))[_i357].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_hash_args::~switch_sai_rpc_sai_thrift_create_hash_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hash_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size358;
            ::apache::thrift::protocol::TType _etype361;
            xfer += iprot->readListBegin(_etype361, _size358);
            this->thrift_attr_list.resize(_size358);
            uint32_t _i362;
            for (_i362 = 0; _i362 < _size358; ++_i362)
            {
              xfer += this->thrift_attr_list[_i362].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hash_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hash_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter363;
    for (_iter363 = this->thrift_attr_list.begin(); _iter363 != this->thrift_attr_list.end(); ++_iter363)
    {
      xfer += (*_iter363).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hash_pargs::~switch_sai_rpc_sai_thrift_create_hash_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hash_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hash_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter364;
    for (_iter364 = (*(this->thrift_attr_list)).begin(); _iter364 != (*(this->thrift_attr_list)).end(); ++_iter364)
    {
      xfer += (*_iter364).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hash_result::~switch_sai_rpc_sai_thrift_create_hash_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hash_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_hash_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_hash_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_hash_presult::~switch_sai_rpc_sai_thrift_create_hash_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_hash_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hash_args::~switch_sai_rpc_sai_thrift_remove_hash_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hash_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->hash_id);
          this->__isset.hash_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hash_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hash_args");

  xfer += oprot->writeFieldBegin("hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->hash_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hash_pargs::~switch_sai_rpc_sai_thrift_remove_hash_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hash_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hash_pargs");

  xfer += oprot->writeFieldBegin("hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->hash_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hash_result::~switch_sai_rpc_sai_thrift_remove_hash_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hash_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_hash_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_hash_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_hash_presult::~switch_sai_rpc_sai_thrift_remove_hash_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_hash_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_hash_attribute_args::~switch_sai_rpc_sai_thrift_set_hash_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hash_id);
          this->__isset.thrift_hash_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hash_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hash_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hash_attribute_pargs::~switch_sai_rpc_sai_thrift_set_hash_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hash_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hash_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hash_attribute_result::~switch_sai_rpc_sai_thrift_set_hash_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_hash_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_hash_attribute_presult::~switch_sai_rpc_sai_thrift_set_hash_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_hash_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_hash_attribute_args::~switch_sai_rpc_sai_thrift_get_hash_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_hash_id);
          this->__isset.thrift_hash_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hash_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_hash_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hash_attribute_pargs::~switch_sai_rpc_sai_thrift_get_hash_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hash_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_hash_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_hash_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hash_attribute_result::~switch_sai_rpc_sai_thrift_get_hash_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_hash_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_hash_attribute_presult::~switch_sai_rpc_sai_thrift_get_hash_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_hash_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_group_args::~switch_sai_rpc_sai_thrift_create_udf_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size365;
            ::apache::thrift::protocol::TType _etype368;
            xfer += iprot->readListBegin(_etype368, _size365);
            this->thrift_attr_list.resize(_size365);
            uint32_t _i369;
            for (_i369 = 0; _i369 < _size365; ++_i369)
            {
              xfer += this->thrift_attr_list[_i369].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter370;
    for (_iter370 = this->thrift_attr_list.begin(); _iter370 != this->thrift_attr_list.end(); ++_iter370)
    {
      xfer += (*_iter370).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_group_pargs::~switch_sai_rpc_sai_thrift_create_udf_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter371;
    for (_iter371 = (*(this->thrift_attr_list)).begin(); _iter371 != (*(this->thrift_attr_list)).end(); ++_iter371)
    {
      xfer += (*_iter371).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_group_result::~switch_sai_rpc_sai_thrift_create_udf_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_group_presult::~switch_sai_rpc_sai_thrift_create_udf_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_group_args::~switch_sai_rpc_sai_thrift_remove_udf_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->udf_group_id);
          this->__isset.udf_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_group_args");

  xfer += oprot->writeFieldBegin("udf_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->udf_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_group_pargs::~switch_sai_rpc_sai_thrift_remove_udf_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_group_pargs");

  xfer += oprot->writeFieldBegin("udf_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->udf_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_group_result::~switch_sai_rpc_sai_thrift_remove_udf_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_group_presult::~switch_sai_rpc_sai_thrift_remove_udf_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_group_attribute_args::~switch_sai_rpc_sai_thrift_get_udf_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_udf_group_id);
          this->__isset.thrift_udf_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_group_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_udf_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_udf_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_udf_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_udf_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_group_attribute_result::~switch_sai_rpc_sai_thrift_get_udf_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_match_args::~switch_sai_rpc_sai_thrift_create_udf_match_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_match_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size372;
            ::apache::thrift::protocol::TType _etype375;
            xfer += iprot->readListBegin(_etype375, _size372);
            this->thrift_attr_list.resize(_size372);
            uint32_t _i376;
            for (_i376 = 0; _i376 < _size372; ++_i376)
            {
              xfer += this->thrift_attr_list[_i376].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_match_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_match_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter377;
    for (_iter377 = this->thrift_attr_list.begin(); _iter377 != this->thrift_attr_list.end(); ++_iter377)
    {
      xfer += (*_iter377).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_match_pargs::~switch_sai_rpc_sai_thrift_create_udf_match_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_match_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_match_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter378;
    for (_iter378 = (*(this->thrift_attr_list)).begin(); _iter378 != (*(this->thrift_attr_list)).end(); ++_iter378)
    {
      xfer += (*_iter378).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_match_result::~switch_sai_rpc_sai_thrift_create_udf_match_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_match_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_match_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_match_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_match_presult::~switch_sai_rpc_sai_thrift_create_udf_match_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_match_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_match_args::~switch_sai_rpc_sai_thrift_remove_udf_match_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->udf_match_id);
          this->__isset.udf_match_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_match_args");

  xfer += oprot->writeFieldBegin("udf_match_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->udf_match_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_match_pargs::~switch_sai_rpc_sai_thrift_remove_udf_match_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_match_pargs");

  xfer += oprot->writeFieldBegin("udf_match_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->udf_match_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_match_result::~switch_sai_rpc_sai_thrift_remove_udf_match_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_match_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_match_presult::~switch_sai_rpc_sai_thrift_remove_udf_match_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_match_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_match_attribute_args::~switch_sai_rpc_sai_thrift_get_udf_match_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_udf_match_id);
          this->__isset.thrift_udf_match_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_match_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_udf_match_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_udf_match_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs::~switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_udf_match_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_udf_match_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_match_attribute_result::~switch_sai_rpc_sai_thrift_get_udf_match_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_match_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult::~switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_args::~switch_sai_rpc_sai_thrift_create_udf_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size379;
            ::apache::thrift::protocol::TType _etype382;
            xfer += iprot->readListBegin(_etype382, _size379);
            this->thrift_attr_list.resize(_size379);
            uint32_t _i383;
            for (_i383 = 0; _i383 < _size379; ++_i383)
            {
              xfer += this->thrift_attr_list[_i383].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter384;
    for (_iter384 = this->thrift_attr_list.begin(); _iter384 != this->thrift_attr_list.end(); ++_iter384)
    {
      xfer += (*_iter384).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_pargs::~switch_sai_rpc_sai_thrift_create_udf_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter385;
    for (_iter385 = (*(this->thrift_attr_list)).begin(); _iter385 != (*(this->thrift_attr_list)).end(); ++_iter385)
    {
      xfer += (*_iter385).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_result::~switch_sai_rpc_sai_thrift_create_udf_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_udf_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_udf_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_udf_presult::~switch_sai_rpc_sai_thrift_create_udf_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_udf_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_args::~switch_sai_rpc_sai_thrift_remove_udf_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->udf_id);
          this->__isset.udf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_args");

  xfer += oprot->writeFieldBegin("udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->udf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_pargs::~switch_sai_rpc_sai_thrift_remove_udf_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_pargs");

  xfer += oprot->writeFieldBegin("udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->udf_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_result::~switch_sai_rpc_sai_thrift_remove_udf_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_udf_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_udf_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_udf_presult::~switch_sai_rpc_sai_thrift_remove_udf_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_udf_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_udf_attribute_args::~switch_sai_rpc_sai_thrift_set_udf_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_udf_id);
          this->__isset.thrift_udf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_udf_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_udf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_udf_attribute_pargs::~switch_sai_rpc_sai_thrift_set_udf_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_udf_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_udf_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_udf_attribute_result::~switch_sai_rpc_sai_thrift_set_udf_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_udf_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_udf_attribute_presult::~switch_sai_rpc_sai_thrift_set_udf_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_udf_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_attribute_args::~switch_sai_rpc_sai_thrift_get_udf_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_udf_id);
          this->__isset.thrift_udf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_udf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_attribute_pargs::~switch_sai_rpc_sai_thrift_get_udf_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_udf_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_udf_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_attribute_result::~switch_sai_rpc_sai_thrift_get_udf_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_udf_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_udf_attribute_presult::~switch_sai_rpc_sai_thrift_get_udf_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_udf_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_args::~switch_sai_rpc_sai_thrift_create_mirror_session_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size386;
            ::apache::thrift::protocol::TType _etype389;
            xfer += iprot->readListBegin(_etype389, _size386);
            this->thrift_attr_list.resize(_size386);
            uint32_t _i390;
            for (_i390 = 0; _i390 < _size386; ++_i390)
            {
              xfer += this->thrift_attr_list[_i390].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter391;
    for (_iter391 = this->thrift_attr_list.begin(); _iter391 != this->thrift_attr_list.end(); ++_iter391)
    {
      xfer += (*_iter391).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_pargs::~switch_sai_rpc_sai_thrift_create_mirror_session_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter392;
    for (_iter392 = (*(this->thrift_attr_list)).begin(); _iter392 != (*(this->thrift_attr_list)).end(); ++_iter392)
    {
      xfer += (*_iter392).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_result::~switch_sai_rpc_sai_thrift_create_mirror_session_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mirror_session_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mirror_session_presult::~switch_sai_rpc_sai_thrift_create_mirror_session_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mirror_session_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_args::~switch_sai_rpc_sai_thrift_remove_mirror_session_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_args");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->session_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_pargs::~switch_sai_rpc_sai_thrift_remove_mirror_session_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_pargs");

  xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->session_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_result::~switch_sai_rpc_sai_thrift_remove_mirror_session_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mirror_session_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mirror_session_presult::~switch_sai_rpc_sai_thrift_remove_mirror_session_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mirror_session_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_mirror_attribute_args::~switch_sai_rpc_sai_thrift_set_mirror_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_mirror_id);
          this->__isset.thrift_mirror_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mirror_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_mirror_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_mirror_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs::~switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_mirror_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_mirror_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mirror_attribute_result::~switch_sai_rpc_sai_thrift_set_mirror_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mirror_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mirror_attribute_presult::~switch_sai_rpc_sai_thrift_set_mirror_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mirror_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_mirror_attribute_args::~switch_sai_rpc_sai_thrift_get_mirror_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_mirror_id);
          this->__isset.thrift_mirror_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mirror_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_mirror_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_mirror_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs::~switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_mirror_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_mirror_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mirror_attribute_result::~switch_sai_rpc_sai_thrift_get_mirror_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mirror_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mirror_attribute_presult::~switch_sai_rpc_sai_thrift_get_mirror_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mirror_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_inseg_entry_args::~switch_sai_rpc_sai_thrift_create_inseg_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_inseg_entry.read(iprot);
          this->__isset.thrift_inseg_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size393;
            ::apache::thrift::protocol::TType _etype396;
            xfer += iprot->readListBegin(_etype396, _size393);
            this->thrift_attr_list.resize(_size393);
            uint32_t _i397;
            for (_i397 = 0; _i397 < _size393; ++_i397)
            {
              xfer += this->thrift_attr_list[_i397].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_inseg_entry_args");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_inseg_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter398;
    for (_iter398 = this->thrift_attr_list.begin(); _iter398 != this->thrift_attr_list.end(); ++_iter398)
    {
      xfer += (*_iter398).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_inseg_entry_pargs::~switch_sai_rpc_sai_thrift_create_inseg_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_inseg_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_inseg_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter399;
    for (_iter399 = (*(this->thrift_attr_list)).begin(); _iter399 != (*(this->thrift_attr_list)).end(); ++_iter399)
    {
      xfer += (*_iter399).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_inseg_entry_result::~switch_sai_rpc_sai_thrift_create_inseg_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_inseg_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_inseg_entry_presult::~switch_sai_rpc_sai_thrift_create_inseg_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_inseg_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_inseg_entry_args::~switch_sai_rpc_sai_thrift_remove_inseg_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_inseg_entry.read(iprot);
          this->__isset.thrift_inseg_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_inseg_entry_args");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_inseg_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs::~switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_inseg_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_inseg_entry_result::~switch_sai_rpc_sai_thrift_remove_inseg_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_inseg_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_inseg_entry_presult::~switch_sai_rpc_sai_thrift_remove_inseg_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_inseg_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_inseg_entry.read(iprot);
          this->__isset.thrift_inseg_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_inseg_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_inseg_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_inseg_entry.read(iprot);
          this->__isset.thrift_inseg_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_inseg_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_inseg_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_inseg_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_dump_log_args::~switch_sai_rpc_sai_thrift_dump_log_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_dump_log_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dump_file_name);
          this->__isset.dump_file_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_dump_log_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_dump_log_args");

  xfer += oprot->writeFieldBegin("dump_file_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dump_file_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_dump_log_pargs::~switch_sai_rpc_sai_thrift_dump_log_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_dump_log_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_dump_log_pargs");

  xfer += oprot->writeFieldBegin("dump_file_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->dump_file_name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_dump_log_result::~switch_sai_rpc_sai_thrift_dump_log_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_dump_log_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_dump_log_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_dump_log_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_dump_log_presult::~switch_sai_rpc_sai_thrift_dump_log_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_dump_log_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_args::~switch_sai_rpc_sai_thrift_create_policer_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size400;
            ::apache::thrift::protocol::TType _etype403;
            xfer += iprot->readListBegin(_etype403, _size400);
            this->thrift_attr_list.resize(_size400);
            uint32_t _i404;
            for (_i404 = 0; _i404 < _size400; ++_i404)
            {
              xfer += this->thrift_attr_list[_i404].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_policer_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter405;
    for (_iter405 = this->thrift_attr_list.begin(); _iter405 != this->thrift_attr_list.end(); ++_iter405)
    {
      xfer += (*_iter405).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_pargs::~switch_sai_rpc_sai_thrift_create_policer_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter406;
    for (_iter406 = (*(this->thrift_attr_list)).begin(); _iter406 != (*(this->thrift_attr_list)).end(); ++_iter406)
    {
      xfer += (*_iter406).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_result::~switch_sai_rpc_sai_thrift_create_policer_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_policer_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_policer_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_policer_presult::~switch_sai_rpc_sai_thrift_create_policer_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_policer_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_args::~switch_sai_rpc_sai_thrift_remove_policer_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_policer_id);
          this->__isset.thrift_policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_policer_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_args");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_pargs::~switch_sai_rpc_sai_thrift_remove_policer_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_pargs");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_result::~switch_sai_rpc_sai_thrift_remove_policer_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_policer_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_policer_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_policer_presult::~switch_sai_rpc_sai_thrift_remove_policer_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_policer_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_attribute_args::~switch_sai_rpc_sai_thrift_get_policer_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_policer_id);
          this->__isset.thrift_policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_attribute_pargs::~switch_sai_rpc_sai_thrift_get_policer_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_attribute_result::~switch_sai_rpc_sai_thrift_get_policer_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_attribute_presult::~switch_sai_rpc_sai_thrift_get_policer_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_policer_attribute_args::~switch_sai_rpc_sai_thrift_set_policer_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_policer_id);
          this->__isset.thrift_policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_policer_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_policer_attribute_pargs::~switch_sai_rpc_sai_thrift_set_policer_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_policer_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_policer_attribute_result::~switch_sai_rpc_sai_thrift_set_policer_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_policer_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_policer_attribute_presult::~switch_sai_rpc_sai_thrift_set_policer_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_policer_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_args::~switch_sai_rpc_sai_thrift_get_policer_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_policer_id);
          this->__isset.thrift_policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_counter_ids.clear();
            uint32_t _size407;
            ::apache::thrift::protocol::TType _etype410;
            xfer += iprot->readListBegin(_etype410, _size407);
            this->thrift_counter_ids.resize(_size407);
            uint32_t _i411;
            for (_i411 = 0; _i411 < _size407; ++_i411)
            {
              xfer += iprot->readI32(this->thrift_counter_ids[_i411]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_args");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_counter_ids.size()));
    std::vector<sai_thrift_policer_stat_t> ::const_iterator _iter412;
    for (_iter412 = this->thrift_counter_ids.begin(); _iter412 != this->thrift_counter_ids.end(); ++_iter412)
    {
      xfer += oprot->writeI32((*_iter412));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_pargs::~switch_sai_rpc_sai_thrift_get_policer_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_pargs");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_counter_ids)).size()));
    std::vector<sai_thrift_policer_stat_t> ::const_iterator _iter413;
    for (_iter413 = (*(this->thrift_counter_ids)).begin(); _iter413 != (*(this->thrift_counter_ids)).end(); ++_iter413)
    {
      xfer += oprot->writeI32((*_iter413));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_result::~switch_sai_rpc_sai_thrift_get_policer_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size414;
            ::apache::thrift::protocol::TType _etype417;
            xfer += iprot->readListBegin(_etype417, _size414);
            this->success.resize(_size414);
            uint32_t _i418;
            for (_i418 = 0; _i418 < _size414; ++_i418)
            {
              xfer += iprot->readI64(this->success[_i418]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_policer_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<sai_thrift_uint64_t> ::const_iterator _iter419;
      for (_iter419 = this->success.begin(); _iter419 != this->success.end(); ++_iter419)
      {
        xfer += oprot->writeI64((*_iter419));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_policer_stats_presult::~switch_sai_rpc_sai_thrift_get_policer_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_policer_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size420;
            ::apache::thrift::protocol::TType _etype423;
            xfer += iprot->readListBegin(_etype423, _size420);
            (*(this->success)).resize(_size420);
            uint32_t _i424;
            for (_i424 = 0; _i424 < _size420; ++_i424)
            {
              xfer += iprot->readI64((*(this->success))[_i424]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_policer_stats_args::~switch_sai_rpc_sai_thrift_clear_policer_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_policer_id);
          this->__isset.thrift_policer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_counter_ids.clear();
            uint32_t _size425;
            ::apache::thrift::protocol::TType _etype428;
            xfer += iprot->readListBegin(_etype428, _size425);
            this->thrift_counter_ids.resize(_size425);
            uint32_t _i429;
            for (_i429 = 0; _i429 < _size425; ++_i429)
            {
              xfer += iprot->readI32(this->thrift_counter_ids[_i429]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_policer_stats_args");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_policer_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_counter_ids.size()));
    std::vector<sai_thrift_policer_stat_t> ::const_iterator _iter430;
    for (_iter430 = this->thrift_counter_ids.begin(); _iter430 != this->thrift_counter_ids.end(); ++_iter430)
    {
      xfer += oprot->writeI32((*_iter430));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_policer_stats_pargs::~switch_sai_rpc_sai_thrift_clear_policer_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_policer_stats_pargs");

  xfer += oprot->writeFieldBegin("thrift_policer_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_policer_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_counter_ids)).size()));
    std::vector<sai_thrift_policer_stat_t> ::const_iterator _iter431;
    for (_iter431 = (*(this->thrift_counter_ids)).begin(); _iter431 != (*(this->thrift_counter_ids)).end(); ++_iter431)
    {
      xfer += oprot->writeI32((*_iter431));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_policer_stats_result::~switch_sai_rpc_sai_thrift_clear_policer_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_policer_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_policer_stats_presult::~switch_sai_rpc_sai_thrift_clear_policer_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_policer_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_args::~switch_sai_rpc_sai_thrift_create_scheduler_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size432;
            ::apache::thrift::protocol::TType _etype435;
            xfer += iprot->readListBegin(_etype435, _size432);
            this->thrift_attr_list.resize(_size432);
            uint32_t _i436;
            for (_i436 = 0; _i436 < _size432; ++_i436)
            {
              xfer += this->thrift_attr_list[_i436].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter437;
    for (_iter437 = this->thrift_attr_list.begin(); _iter437 != this->thrift_attr_list.end(); ++_iter437)
    {
      xfer += (*_iter437).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs::~switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter438;
    for (_iter438 = (*(this->thrift_attr_list)).begin(); _iter438 != (*(this->thrift_attr_list)).end(); ++_iter438)
    {
      xfer += (*_iter438).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_result::~switch_sai_rpc_sai_thrift_create_scheduler_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_profile_presult::~switch_sai_rpc_sai_thrift_create_scheduler_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scheduler_id);
          this->__isset.scheduler_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_args");

  xfer += oprot->writeFieldBegin("scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scheduler_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs");

  xfer += oprot->writeFieldBegin("scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->scheduler_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult::~switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_attribute_args::~switch_sai_rpc_sai_thrift_get_scheduler_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_scheduler_id);
          this->__isset.thrift_scheduler_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_scheduler_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs::~switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_scheduler_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_attribute_result::~switch_sai_rpc_sai_thrift_get_scheduler_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult::~switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_attribute_args::~switch_sai_rpc_sai_thrift_set_scheduler_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thrift_scheduler_id);
          this->__isset.thrift_scheduler_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->thrift_scheduler_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs::~switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_scheduler_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->thrift_scheduler_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_attribute_result::~switch_sai_rpc_sai_thrift_set_scheduler_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult::~switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_group_args::~switch_sai_rpc_sai_thrift_create_scheduler_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size439;
            ::apache::thrift::protocol::TType _etype442;
            xfer += iprot->readListBegin(_etype442, _size439);
            this->thrift_attr_list.resize(_size439);
            uint32_t _i443;
            for (_i443 = 0; _i443 < _size439; ++_i443)
            {
              xfer += this->thrift_attr_list[_i443].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter444;
    for (_iter444 = this->thrift_attr_list.begin(); _iter444 != this->thrift_attr_list.end(); ++_iter444)
    {
      xfer += (*_iter444).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_group_pargs::~switch_sai_rpc_sai_thrift_create_scheduler_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter445;
    for (_iter445 = (*(this->thrift_attr_list)).begin(); _iter445 != (*(this->thrift_attr_list)).end(); ++_iter445)
    {
      xfer += (*_iter445).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_group_result::~switch_sai_rpc_sai_thrift_create_scheduler_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_scheduler_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_scheduler_group_presult::~switch_sai_rpc_sai_thrift_create_scheduler_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_scheduler_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_group_args::~switch_sai_rpc_sai_thrift_remove_scheduler_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scheduler_group_id);
          this->__isset.scheduler_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_group_args");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scheduler_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs::~switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->scheduler_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_group_result::~switch_sai_rpc_sai_thrift_remove_scheduler_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_scheduler_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_scheduler_group_presult::~switch_sai_rpc_sai_thrift_remove_scheduler_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_scheduler_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args::~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scheduler_group_id);
          this->__isset.scheduler_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scheduler_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->scheduler_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result::~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args::~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->scheduler_group_id);
          this->__isset.scheduler_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->scheduler_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs::~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("scheduler_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->scheduler_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result::~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult::~switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_args::~switch_sai_rpc_sai_thrift_get_queue_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size446;
            ::apache::thrift::protocol::TType _etype449;
            xfer += iprot->readListBegin(_etype449, _size446);
            this->counter_ids.resize(_size446);
            uint32_t _i450;
            for (_i450 = 0; _i450 < _size446; ++_i450)
            {
              xfer += iprot->readI32(this->counter_ids[_i450]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter451;
    for (_iter451 = this->counter_ids.begin(); _iter451 != this->counter_ids.end(); ++_iter451)
    {
      xfer += oprot->writeI32((*_iter451));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_pargs::~switch_sai_rpc_sai_thrift_get_queue_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter452;
    for (_iter452 = (*(this->counter_ids)).begin(); _iter452 != (*(this->counter_ids)).end(); ++_iter452)
    {
      xfer += oprot->writeI32((*_iter452));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_result::~switch_sai_rpc_sai_thrift_get_queue_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size453;
            ::apache::thrift::protocol::TType _etype456;
            xfer += iprot->readListBegin(_etype456, _size453);
            this->success.resize(_size453);
            uint32_t _i457;
            for (_i457 = 0; _i457 < _size453; ++_i457)
            {
              xfer += iprot->readI64(this->success[_i457]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter458;
      for (_iter458 = this->success.begin(); _iter458 != this->success.end(); ++_iter458)
      {
        xfer += oprot->writeI64((*_iter458));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_stats_presult::~switch_sai_rpc_sai_thrift_get_queue_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size459;
            ::apache::thrift::protocol::TType _etype462;
            xfer += iprot->readListBegin(_etype462, _size459);
            (*(this->success)).resize(_size459);
            uint32_t _i463;
            for (_i463 = 0; _i463 < _size459; ++_i463)
            {
              xfer += iprot->readI64((*(this->success))[_i463]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_args::~switch_sai_rpc_sai_thrift_clear_queue_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size464;
            ::apache::thrift::protocol::TType _etype467;
            xfer += iprot->readListBegin(_etype467, _size464);
            this->counter_ids.resize(_size464);
            uint32_t _i468;
            for (_i468 = 0; _i468 < _size464; ++_i468)
            {
              xfer += iprot->readI32(this->counter_ids[_i468]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter469;
    for (_iter469 = this->counter_ids.begin(); _iter469 != this->counter_ids.end(); ++_iter469)
    {
      xfer += oprot->writeI32((*_iter469));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_pargs::~switch_sai_rpc_sai_thrift_clear_queue_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter470;
    for (_iter470 = (*(this->counter_ids)).begin(); _iter470 != (*(this->counter_ids)).end(); ++_iter470)
    {
      xfer += oprot->writeI32((*_iter470));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_result::~switch_sai_rpc_sai_thrift_clear_queue_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_queue_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_queue_stats_presult::~switch_sai_rpc_sai_thrift_clear_queue_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_queue_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_queue_args::~switch_sai_rpc_sai_thrift_create_queue_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_queue_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size471;
            ::apache::thrift::protocol::TType _etype474;
            xfer += iprot->readListBegin(_etype474, _size471);
            this->thrift_attr_list.resize(_size471);
            uint32_t _i475;
            for (_i475 = 0; _i475 < _size471; ++_i475)
            {
              xfer += this->thrift_attr_list[_i475].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_queue_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_queue_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter476;
    for (_iter476 = this->thrift_attr_list.begin(); _iter476 != this->thrift_attr_list.end(); ++_iter476)
    {
      xfer += (*_iter476).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_queue_pargs::~switch_sai_rpc_sai_thrift_create_queue_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_queue_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_queue_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter477;
    for (_iter477 = (*(this->thrift_attr_list)).begin(); _iter477 != (*(this->thrift_attr_list)).end(); ++_iter477)
    {
      xfer += (*_iter477).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_queue_result::~switch_sai_rpc_sai_thrift_create_queue_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_queue_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_queue_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_queue_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_queue_presult::~switch_sai_rpc_sai_thrift_create_queue_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_queue_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_queue_args::~switch_sai_rpc_sai_thrift_remove_queue_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_queue_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_queue_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_queue_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_queue_pargs::~switch_sai_rpc_sai_thrift_remove_queue_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_queue_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_queue_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_queue_result::~switch_sai_rpc_sai_thrift_remove_queue_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_queue_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_queue_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_queue_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_queue_presult::~switch_sai_rpc_sai_thrift_remove_queue_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_queue_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_attribute_args::~switch_sai_rpc_sai_thrift_get_queue_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_attribute_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_attribute_pargs::~switch_sai_rpc_sai_thrift_get_queue_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_attribute_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_attribute_result::~switch_sai_rpc_sai_thrift_get_queue_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_queue_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_queue_attribute_presult::~switch_sai_rpc_sai_thrift_get_queue_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_queue_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_args::~switch_sai_rpc_sai_thrift_set_queue_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->queue_id);
          this->__isset.queue_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_args");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->queue_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_pargs::~switch_sai_rpc_sai_thrift_set_queue_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_pargs");

  xfer += oprot->writeFieldBegin("queue_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->queue_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_result::~switch_sai_rpc_sai_thrift_set_queue_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_queue_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_queue_attribute_presult::~switch_sai_rpc_sai_thrift_set_queue_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_queue_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_args::~switch_sai_rpc_sai_thrift_create_buffer_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size478;
            ::apache::thrift::protocol::TType _etype481;
            xfer += iprot->readListBegin(_etype481, _size478);
            this->thrift_attr_list.resize(_size478);
            uint32_t _i482;
            for (_i482 = 0; _i482 < _size478; ++_i482)
            {
              xfer += this->thrift_attr_list[_i482].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter483;
    for (_iter483 = this->thrift_attr_list.begin(); _iter483 != this->thrift_attr_list.end(); ++_iter483)
    {
      xfer += (*_iter483).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_pargs::~switch_sai_rpc_sai_thrift_create_buffer_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter484;
    for (_iter484 = (*(this->thrift_attr_list)).begin(); _iter484 != (*(this->thrift_attr_list)).end(); ++_iter484)
    {
      xfer += (*_iter484).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_result::~switch_sai_rpc_sai_thrift_create_buffer_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_buffer_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_buffer_profile_presult::~switch_sai_rpc_sai_thrift_create_buffer_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_buffer_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_buffer_profile_args::~switch_sai_rpc_sai_thrift_remove_buffer_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->buffer_profile_id);
          this->__isset.buffer_profile_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_buffer_profile_args");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->buffer_profile_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs::~switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->buffer_profile_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_buffer_profile_result::~switch_sai_rpc_sai_thrift_remove_buffer_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_buffer_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_buffer_profile_presult::~switch_sai_rpc_sai_thrift_remove_buffer_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_buffer_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args::~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->buffer_profile_id);
          this->__isset.buffer_profile_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->buffer_profile_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs::~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->buffer_profile_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result::~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult::~switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args::~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->buffer_profile_id);
          this->__isset.buffer_profile_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->buffer_profile_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs::~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs");

  xfer += oprot->writeFieldBegin("buffer_profile_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->buffer_profile_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result::~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult::~switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_args::~switch_sai_rpc_sai_thrift_create_pool_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size485;
            ::apache::thrift::protocol::TType _etype488;
            xfer += iprot->readListBegin(_etype488, _size485);
            this->thrift_attr_list.resize(_size485);
            uint32_t _i489;
            for (_i489 = 0; _i489 < _size485; ++_i489)
            {
              xfer += this->thrift_attr_list[_i489].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter490;
    for (_iter490 = this->thrift_attr_list.begin(); _iter490 != this->thrift_attr_list.end(); ++_iter490)
    {
      xfer += (*_iter490).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_pargs::~switch_sai_rpc_sai_thrift_create_pool_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter491;
    for (_iter491 = (*(this->thrift_attr_list)).begin(); _iter491 != (*(this->thrift_attr_list)).end(); ++_iter491)
    {
      xfer += (*_iter491).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_result::~switch_sai_rpc_sai_thrift_create_pool_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_pool_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_pool_profile_presult::~switch_sai_rpc_sai_thrift_create_pool_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_pool_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_priority_group_args::~switch_sai_rpc_sai_thrift_create_priority_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_priority_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size492;
            ::apache::thrift::protocol::TType _etype495;
            xfer += iprot->readListBegin(_etype495, _size492);
            this->thrift_attr_list.resize(_size492);
            uint32_t _i496;
            for (_i496 = 0; _i496 < _size492; ++_i496)
            {
              xfer += this->thrift_attr_list[_i496].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_priority_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_priority_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter497;
    for (_iter497 = this->thrift_attr_list.begin(); _iter497 != this->thrift_attr_list.end(); ++_iter497)
    {
      xfer += (*_iter497).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_priority_group_pargs::~switch_sai_rpc_sai_thrift_create_priority_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_priority_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_priority_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter498;
    for (_iter498 = (*(this->thrift_attr_list)).begin(); _iter498 != (*(this->thrift_attr_list)).end(); ++_iter498)
    {
      xfer += (*_iter498).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_priority_group_result::~switch_sai_rpc_sai_thrift_create_priority_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_priority_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_priority_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_priority_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_priority_group_presult::~switch_sai_rpc_sai_thrift_create_priority_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_priority_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_priority_group_args::~switch_sai_rpc_sai_thrift_remove_priority_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->priority_group_id);
          this->__isset.priority_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_priority_group_args");

  xfer += oprot->writeFieldBegin("priority_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->priority_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_priority_group_pargs::~switch_sai_rpc_sai_thrift_remove_priority_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_priority_group_pargs");

  xfer += oprot->writeFieldBegin("priority_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->priority_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_priority_group_result::~switch_sai_rpc_sai_thrift_remove_priority_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_priority_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_priority_group_presult::~switch_sai_rpc_sai_thrift_remove_priority_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_priority_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_priority_group_attribute_args::~switch_sai_rpc_sai_thrift_get_priority_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->priority_group_id);
          this->__isset.priority_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_priority_group_attribute_args");

  xfer += oprot->writeFieldBegin("priority_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->priority_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("priority_group_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->priority_group_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_priority_group_attribute_result::~switch_sai_rpc_sai_thrift_get_priority_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_priority_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pg_id);
          this->__isset.pg_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_args");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->pg_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->pg_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_priority_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult::~switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_args::~switch_sai_rpc_sai_thrift_get_pg_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pg_id);
          this->__isset.pg_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size499;
            ::apache::thrift::protocol::TType _etype502;
            xfer += iprot->readListBegin(_etype502, _size499);
            this->counter_ids.resize(_size499);
            uint32_t _i503;
            for (_i503 = 0; _i503 < _size499; ++_i503)
            {
              xfer += iprot->readI32(this->counter_ids[_i503]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_args");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->pg_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_pg_stat_counter_t> ::const_iterator _iter504;
    for (_iter504 = this->counter_ids.begin(); _iter504 != this->counter_ids.end(); ++_iter504)
    {
      xfer += oprot->writeI32((*_iter504));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_pargs::~switch_sai_rpc_sai_thrift_get_pg_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_pargs");

  xfer += oprot->writeFieldBegin("pg_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->pg_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_pg_stat_counter_t> ::const_iterator _iter505;
    for (_iter505 = (*(this->counter_ids)).begin(); _iter505 != (*(this->counter_ids)).end(); ++_iter505)
    {
      xfer += oprot->writeI32((*_iter505));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_result::~switch_sai_rpc_sai_thrift_get_pg_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size506;
            ::apache::thrift::protocol::TType _etype509;
            xfer += iprot->readListBegin(_etype509, _size506);
            this->success.resize(_size506);
            uint32_t _i510;
            for (_i510 = 0; _i510 < _size506; ++_i510)
            {
              xfer += iprot->readI64(this->success[_i510]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_pg_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter511;
      for (_iter511 = this->success.begin(); _iter511 != this->success.end(); ++_iter511)
      {
        xfer += oprot->writeI64((*_iter511));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_pg_stats_presult::~switch_sai_rpc_sai_thrift_get_pg_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_pg_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size512;
            ::apache::thrift::protocol::TType _etype515;
            xfer += iprot->readListBegin(_etype515, _size512);
            (*(this->success)).resize(_size512);
            uint32_t _i516;
            for (_i516 = 0; _i516 < _size512; ++_i516)
            {
              xfer += iprot->readI64((*(this->success))[_i516]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_args::~switch_sai_rpc_sai_thrift_create_wred_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size517;
            ::apache::thrift::protocol::TType _etype520;
            xfer += iprot->readListBegin(_etype520, _size517);
            this->thrift_attr_list.resize(_size517);
            uint32_t _i521;
            for (_i521 = 0; _i521 < _size517; ++_i521)
            {
              xfer += this->thrift_attr_list[_i521].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter522;
    for (_iter522 = this->thrift_attr_list.begin(); _iter522 != this->thrift_attr_list.end(); ++_iter522)
    {
      xfer += (*_iter522).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_pargs::~switch_sai_rpc_sai_thrift_create_wred_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter523;
    for (_iter523 = (*(this->thrift_attr_list)).begin(); _iter523 != (*(this->thrift_attr_list)).end(); ++_iter523)
    {
      xfer += (*_iter523).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_result::~switch_sai_rpc_sai_thrift_create_wred_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_wred_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_wred_profile_presult::~switch_sai_rpc_sai_thrift_create_wred_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_wred_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_args::~switch_sai_rpc_sai_thrift_remove_wred_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wred_id);
          this->__isset.wred_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_args");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->wred_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_pargs::~switch_sai_rpc_sai_thrift_remove_wred_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_pargs");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->wred_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_result::~switch_sai_rpc_sai_thrift_remove_wred_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_wred_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_wred_profile_presult::~switch_sai_rpc_sai_thrift_remove_wred_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_wred_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args::~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wred_id);
          this->__isset.wred_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->wred_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs::~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->wred_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result::~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult::~switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args::~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->wred_id);
          this->__isset.wred_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->wred_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs::~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs");

  xfer += oprot->writeFieldBegin("wred_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->wred_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result::~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult::~switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_args::~switch_sai_rpc_sai_thrift_create_qos_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size524;
            ::apache::thrift::protocol::TType _etype527;
            xfer += iprot->readListBegin(_etype527, _size524);
            this->thrift_attr_list.resize(_size524);
            uint32_t _i528;
            for (_i528 = 0; _i528 < _size524; ++_i528)
            {
              xfer += this->thrift_attr_list[_i528].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_qos_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter529;
    for (_iter529 = this->thrift_attr_list.begin(); _iter529 != this->thrift_attr_list.end(); ++_iter529)
    {
      xfer += (*_iter529).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_pargs::~switch_sai_rpc_sai_thrift_create_qos_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter530;
    for (_iter530 = (*(this->thrift_attr_list)).begin(); _iter530 != (*(this->thrift_attr_list)).end(); ++_iter530)
    {
      xfer += (*_iter530).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_result::~switch_sai_rpc_sai_thrift_create_qos_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_qos_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_qos_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_qos_map_presult::~switch_sai_rpc_sai_thrift_create_qos_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_qos_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_args::~switch_sai_rpc_sai_thrift_remove_qos_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->qos_map_id);
          this->__isset.qos_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_args");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->qos_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_pargs::~switch_sai_rpc_sai_thrift_remove_qos_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_pargs");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->qos_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_result::~switch_sai_rpc_sai_thrift_remove_qos_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_qos_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_qos_map_presult::~switch_sai_rpc_sai_thrift_remove_qos_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_qos_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_qos_map_attribute_args::~switch_sai_rpc_sai_thrift_get_qos_map_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->qos_map_id);
          this->__isset.qos_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_qos_map_attribute_args");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->qos_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs::~switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->qos_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_qos_map_attribute_result::~switch_sai_rpc_sai_thrift_get_qos_map_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_qos_map_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult::~switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_qos_map_attribute_args::~switch_sai_rpc_sai_thrift_set_qos_map_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->qos_map_id);
          this->__isset.qos_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_qos_map_attribute_args");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->qos_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs::~switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs");

  xfer += oprot->writeFieldBegin("qos_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->qos_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_qos_map_attribute_result::~switch_sai_rpc_sai_thrift_set_qos_map_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_qos_map_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult::~switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_args::~switch_sai_rpc_sai_thrift_create_l2mc_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size531;
            ::apache::thrift::protocol::TType _etype534;
            xfer += iprot->readListBegin(_etype534, _size531);
            this->thrift_attr_list.resize(_size531);
            uint32_t _i535;
            for (_i535 = 0; _i535 < _size531; ++_i535)
            {
              xfer += this->thrift_attr_list[_i535].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter536;
    for (_iter536 = this->thrift_attr_list.begin(); _iter536 != this->thrift_attr_list.end(); ++_iter536)
    {
      xfer += (*_iter536).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_pargs::~switch_sai_rpc_sai_thrift_create_l2mc_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter537;
    for (_iter537 = (*(this->thrift_attr_list)).begin(); _iter537 != (*(this->thrift_attr_list)).end(); ++_iter537)
    {
      xfer += (*_iter537).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_result::~switch_sai_rpc_sai_thrift_create_l2mc_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_presult::~switch_sai_rpc_sai_thrift_create_l2mc_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_args::~switch_sai_rpc_sai_thrift_remove_l2mc_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs::~switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_result::~switch_sai_rpc_sai_thrift_remove_l2mc_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_presult::~switch_sai_rpc_sai_thrift_remove_l2mc_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args::~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result::~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_member_args::~switch_sai_rpc_sai_thrift_create_l2mc_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size538;
            ::apache::thrift::protocol::TType _etype541;
            xfer += iprot->readListBegin(_etype541, _size538);
            this->thrift_attr_list.resize(_size538);
            uint32_t _i542;
            for (_i542 = 0; _i542 < _size538; ++_i542)
            {
              xfer += this->thrift_attr_list[_i542].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter543;
    for (_iter543 = this->thrift_attr_list.begin(); _iter543 != this->thrift_attr_list.end(); ++_iter543)
    {
      xfer += (*_iter543).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs::~switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter544;
    for (_iter544 = (*(this->thrift_attr_list)).begin(); _iter544 != (*(this->thrift_attr_list)).end(); ++_iter544)
    {
      xfer += (*_iter544).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_member_result::~switch_sai_rpc_sai_thrift_create_l2mc_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult::~switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args::~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs::~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result::~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult::~switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args::~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result::~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args::~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result::~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_entry_args::~switch_sai_rpc_sai_thrift_create_l2mc_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_l2mc_entry.read(iprot);
          this->__isset.thrift_l2mc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size545;
            ::apache::thrift::protocol::TType _etype548;
            xfer += iprot->readListBegin(_etype548, _size545);
            this->thrift_attr_list.resize(_size545);
            uint32_t _i549;
            for (_i549 = 0; _i549 < _size545; ++_i549)
            {
              xfer += this->thrift_attr_list[_i549].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_entry_args");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_l2mc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter550;
    for (_iter550 = this->thrift_attr_list.begin(); _iter550 != this->thrift_attr_list.end(); ++_iter550)
    {
      xfer += (*_iter550).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs::~switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_l2mc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter551;
    for (_iter551 = (*(this->thrift_attr_list)).begin(); _iter551 != (*(this->thrift_attr_list)).end(); ++_iter551)
    {
      xfer += (*_iter551).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_entry_result::~switch_sai_rpc_sai_thrift_create_l2mc_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_l2mc_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_l2mc_entry_presult::~switch_sai_rpc_sai_thrift_create_l2mc_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_l2mc_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_entry_args::~switch_sai_rpc_sai_thrift_remove_l2mc_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_l2mc_entry.read(iprot);
          this->__isset.thrift_l2mc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_entry_args");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_l2mc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs::~switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_l2mc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_entry_result::~switch_sai_rpc_sai_thrift_remove_l2mc_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_l2mc_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult::~switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_l2mc_entry.read(iprot);
          this->__isset.thrift_l2mc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_l2mc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_l2mc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_l2mc_entry.read(iprot);
          this->__isset.thrift_l2mc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_l2mc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_l2mc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_l2mc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args::~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_mcast_fdb_entry.read(iprot);
          this->__isset.thrift_mcast_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size552;
            ::apache::thrift::protocol::TType _etype555;
            xfer += iprot->readListBegin(_etype555, _size552);
            this->thrift_attr_list.resize(_size552);
            uint32_t _i556;
            for (_i556 = 0; _i556 < _size552; ++_i556)
            {
              xfer += this->thrift_attr_list[_i556].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_mcast_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter557;
    for (_iter557 = this->thrift_attr_list.begin(); _iter557 != this->thrift_attr_list.end(); ++_iter557)
    {
      xfer += (*_iter557).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_mcast_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter558;
    for (_iter558 = (*(this->thrift_attr_list)).begin(); _iter558 != (*(this->thrift_attr_list)).end(); ++_iter558)
    {
      xfer += (*_iter558).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result::~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult::~switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args::~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_mcast_fdb_entry.read(iprot);
          this->__isset.thrift_mcast_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_mcast_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs::~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_mcast_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result::~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult::~switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_mcast_fdb_entry.read(iprot);
          this->__isset.thrift_mcast_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_mcast_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_mcast_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_mcast_fdb_entry.read(iprot);
          this->__isset.thrift_mcast_fdb_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_mcast_fdb_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_mcast_fdb_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_mcast_fdb_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_args::~switch_sai_rpc_sai_thrift_create_ipmc_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size559;
            ::apache::thrift::protocol::TType _etype562;
            xfer += iprot->readListBegin(_etype562, _size559);
            this->thrift_attr_list.resize(_size559);
            uint32_t _i563;
            for (_i563 = 0; _i563 < _size559; ++_i563)
            {
              xfer += this->thrift_attr_list[_i563].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter564;
    for (_iter564 = this->thrift_attr_list.begin(); _iter564 != this->thrift_attr_list.end(); ++_iter564)
    {
      xfer += (*_iter564).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_pargs::~switch_sai_rpc_sai_thrift_create_ipmc_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter565;
    for (_iter565 = (*(this->thrift_attr_list)).begin(); _iter565 != (*(this->thrift_attr_list)).end(); ++_iter565)
    {
      xfer += (*_iter565).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_result::~switch_sai_rpc_sai_thrift_create_ipmc_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_presult::~switch_sai_rpc_sai_thrift_create_ipmc_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_args::~switch_sai_rpc_sai_thrift_remove_ipmc_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs::~switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_result::~switch_sai_rpc_sai_thrift_remove_ipmc_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_presult::~switch_sai_rpc_sai_thrift_remove_ipmc_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args::~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result::~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_member_args::~switch_sai_rpc_sai_thrift_create_ipmc_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size566;
            ::apache::thrift::protocol::TType _etype569;
            xfer += iprot->readListBegin(_etype569, _size566);
            this->thrift_attr_list.resize(_size566);
            uint32_t _i570;
            for (_i570 = 0; _i570 < _size566; ++_i570)
            {
              xfer += this->thrift_attr_list[_i570].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter571;
    for (_iter571 = this->thrift_attr_list.begin(); _iter571 != this->thrift_attr_list.end(); ++_iter571)
    {
      xfer += (*_iter571).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs::~switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter572;
    for (_iter572 = (*(this->thrift_attr_list)).begin(); _iter572 != (*(this->thrift_attr_list)).end(); ++_iter572)
    {
      xfer += (*_iter572).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_member_result::~switch_sai_rpc_sai_thrift_create_ipmc_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult::~switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args::~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs::~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result::~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult::~switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args::~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result::~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args::~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result::~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_args::~switch_sai_rpc_sai_thrift_create_rpf_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size573;
            ::apache::thrift::protocol::TType _etype576;
            xfer += iprot->readListBegin(_etype576, _size573);
            this->thrift_attr_list.resize(_size573);
            uint32_t _i577;
            for (_i577 = 0; _i577 < _size573; ++_i577)
            {
              xfer += this->thrift_attr_list[_i577].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter578;
    for (_iter578 = this->thrift_attr_list.begin(); _iter578 != this->thrift_attr_list.end(); ++_iter578)
    {
      xfer += (*_iter578).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_pargs::~switch_sai_rpc_sai_thrift_create_rpf_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter579;
    for (_iter579 = (*(this->thrift_attr_list)).begin(); _iter579 != (*(this->thrift_attr_list)).end(); ++_iter579)
    {
      xfer += (*_iter579).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_result::~switch_sai_rpc_sai_thrift_create_rpf_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_presult::~switch_sai_rpc_sai_thrift_create_rpf_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_args::~switch_sai_rpc_sai_thrift_remove_rpf_group_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_pargs::~switch_sai_rpc_sai_thrift_remove_rpf_group_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_result::~switch_sai_rpc_sai_thrift_remove_rpf_group_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_presult::~switch_sai_rpc_sai_thrift_remove_rpf_group_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args::~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->grp_id);
          this->__isset.grp_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->grp_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs::~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs");

  xfer += oprot->writeFieldBegin("grp_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->grp_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result::~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult::~switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_member_args::~switch_sai_rpc_sai_thrift_create_rpf_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size580;
            ::apache::thrift::protocol::TType _etype583;
            xfer += iprot->readListBegin(_etype583, _size580);
            this->thrift_attr_list.resize(_size580);
            uint32_t _i584;
            for (_i584 = 0; _i584 < _size580; ++_i584)
            {
              xfer += this->thrift_attr_list[_i584].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_member_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter585;
    for (_iter585 = this->thrift_attr_list.begin(); _iter585 != this->thrift_attr_list.end(); ++_iter585)
    {
      xfer += (*_iter585).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs::~switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter586;
    for (_iter586 = (*(this->thrift_attr_list)).begin(); _iter586 != (*(this->thrift_attr_list)).end(); ++_iter586)
    {
      xfer += (*_iter586).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_member_result::~switch_sai_rpc_sai_thrift_create_rpf_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_rpf_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_rpf_group_member_presult::~switch_sai_rpc_sai_thrift_create_rpf_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_rpf_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_member_args::~switch_sai_rpc_sai_thrift_remove_rpf_group_member_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_member_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs::~switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_member_result::~switch_sai_rpc_sai_thrift_remove_rpf_group_member_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_rpf_group_member_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult::~switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args::~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result::~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args::~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->member_id);
          this->__isset.member_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->member_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs::~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs");

  xfer += oprot->writeFieldBegin("member_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->member_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result::~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult::~switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_entry_args::~switch_sai_rpc_sai_thrift_create_ipmc_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_ipmc_entry.read(iprot);
          this->__isset.thrift_ipmc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size587;
            ::apache::thrift::protocol::TType _etype590;
            xfer += iprot->readListBegin(_etype590, _size587);
            this->thrift_attr_list.resize(_size587);
            uint32_t _i591;
            for (_i591 = 0; _i591 < _size587; ++_i591)
            {
              xfer += this->thrift_attr_list[_i591].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_entry_args");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_ipmc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter592;
    for (_iter592 = this->thrift_attr_list.begin(); _iter592 != this->thrift_attr_list.end(); ++_iter592)
    {
      xfer += (*_iter592).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs::~switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_ipmc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter593;
    for (_iter593 = (*(this->thrift_attr_list)).begin(); _iter593 != (*(this->thrift_attr_list)).end(); ++_iter593)
    {
      xfer += (*_iter593).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_entry_result::~switch_sai_rpc_sai_thrift_create_ipmc_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_ipmc_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_ipmc_entry_presult::~switch_sai_rpc_sai_thrift_create_ipmc_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_ipmc_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_entry_args::~switch_sai_rpc_sai_thrift_remove_ipmc_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_ipmc_entry.read(iprot);
          this->__isset.thrift_ipmc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_entry_args");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_ipmc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs::~switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_ipmc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_entry_result::~switch_sai_rpc_sai_thrift_remove_ipmc_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_ipmc_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult::~switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_ipmc_entry.read(iprot);
          this->__isset.thrift_ipmc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_ipmc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_ipmc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_ipmc_entry.read(iprot);
          this->__isset.thrift_ipmc_entry = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->thrift_ipmc_entry.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("thrift_ipmc_entry", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->thrift_ipmc_entry)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_samplepacket_args::~switch_sai_rpc_sai_thrift_create_samplepacket_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size594;
            ::apache::thrift::protocol::TType _etype597;
            xfer += iprot->readListBegin(_etype597, _size594);
            this->thrift_attr_list.resize(_size594);
            uint32_t _i598;
            for (_i598 = 0; _i598 < _size594; ++_i598)
            {
              xfer += this->thrift_attr_list[_i598].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_samplepacket_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter599;
    for (_iter599 = this->thrift_attr_list.begin(); _iter599 != this->thrift_attr_list.end(); ++_iter599)
    {
      xfer += (*_iter599).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_samplepacket_pargs::~switch_sai_rpc_sai_thrift_create_samplepacket_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_samplepacket_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter600;
    for (_iter600 = (*(this->thrift_attr_list)).begin(); _iter600 != (*(this->thrift_attr_list)).end(); ++_iter600)
    {
      xfer += (*_iter600).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_samplepacket_result::~switch_sai_rpc_sai_thrift_create_samplepacket_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_samplepacket_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_samplepacket_presult::~switch_sai_rpc_sai_thrift_create_samplepacket_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_samplepacket_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_samplepacket_args::~switch_sai_rpc_sai_thrift_remove_samplepacket_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->samplepacket_id);
          this->__isset.samplepacket_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_samplepacket_args");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->samplepacket_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_samplepacket_pargs::~switch_sai_rpc_sai_thrift_remove_samplepacket_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_samplepacket_pargs");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->samplepacket_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_samplepacket_result::~switch_sai_rpc_sai_thrift_remove_samplepacket_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_samplepacket_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_samplepacket_presult::~switch_sai_rpc_sai_thrift_remove_samplepacket_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_samplepacket_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args::~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->samplepacket_id);
          this->__isset.samplepacket_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->samplepacket_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs::~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->samplepacket_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result::~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult::~switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args::~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->samplepacket_id);
          this->__isset.samplepacket_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->samplepacket_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs::~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs");

  xfer += oprot->writeFieldBegin("samplepacket_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->samplepacket_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result::~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult::~switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args::~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size601;
            ::apache::thrift::protocol::TType _etype604;
            xfer += iprot->readListBegin(_etype604, _size601);
            this->thrift_attr_list.resize(_size601);
            uint32_t _i605;
            for (_i605 = 0; _i605 < _size601; ++_i605)
            {
              xfer += this->thrift_attr_list[_i605].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter606;
    for (_iter606 = this->thrift_attr_list.begin(); _iter606 != this->thrift_attr_list.end(); ++_iter606)
    {
      xfer += (*_iter606).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs::~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter607;
    for (_iter607 = (*(this->thrift_attr_list)).begin(); _iter607 != (*(this->thrift_attr_list)).end(); ++_iter607)
    {
      xfer += (*_iter607).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result::~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult::~switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args::~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_entry_id);
          this->__isset.tunnel_map_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs::~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result::~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult::~switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_entry_id);
          this->__isset.tunnel_map_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_entry_id);
          this->__isset.tunnel_map_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_args::~switch_sai_rpc_sai_thrift_create_tunnel_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size608;
            ::apache::thrift::protocol::TType _etype611;
            xfer += iprot->readListBegin(_etype611, _size608);
            this->thrift_attr_list.resize(_size608);
            uint32_t _i612;
            for (_i612 = 0; _i612 < _size608; ++_i612)
            {
              xfer += this->thrift_attr_list[_i612].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter613;
    for (_iter613 = this->thrift_attr_list.begin(); _iter613 != this->thrift_attr_list.end(); ++_iter613)
    {
      xfer += (*_iter613).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_pargs::~switch_sai_rpc_sai_thrift_create_tunnel_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter614;
    for (_iter614 = (*(this->thrift_attr_list)).begin(); _iter614 != (*(this->thrift_attr_list)).end(); ++_iter614)
    {
      xfer += (*_iter614).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_result::~switch_sai_rpc_sai_thrift_create_tunnel_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_map_presult::~switch_sai_rpc_sai_thrift_create_tunnel_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_args::~switch_sai_rpc_sai_thrift_remove_tunnel_map_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_id);
          this->__isset.tunnel_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_args");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs::~switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_result::~switch_sai_rpc_sai_thrift_remove_tunnel_map_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_map_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_map_presult::~switch_sai_rpc_sai_thrift_remove_tunnel_map_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_map_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args::~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_id);
          this->__isset.tunnel_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs::~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result::~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult::~switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args::~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_map_id);
          this->__isset.tunnel_map_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_map_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs::~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_map_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_map_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result::~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult::~switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_args::~switch_sai_rpc_sai_thrift_create_tunnel_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size615;
            ::apache::thrift::protocol::TType _etype618;
            xfer += iprot->readListBegin(_etype618, _size615);
            this->thrift_attr_list.resize(_size615);
            uint32_t _i619;
            for (_i619 = 0; _i619 < _size615; ++_i619)
            {
              xfer += this->thrift_attr_list[_i619].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter620;
    for (_iter620 = this->thrift_attr_list.begin(); _iter620 != this->thrift_attr_list.end(); ++_iter620)
    {
      xfer += (*_iter620).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_pargs::~switch_sai_rpc_sai_thrift_create_tunnel_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter621;
    for (_iter621 = (*(this->thrift_attr_list)).begin(); _iter621 != (*(this->thrift_attr_list)).end(); ++_iter621)
    {
      xfer += (*_iter621).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_result::~switch_sai_rpc_sai_thrift_create_tunnel_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_presult::~switch_sai_rpc_sai_thrift_create_tunnel_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_args::~switch_sai_rpc_sai_thrift_remove_tunnel_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_args");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_pargs::~switch_sai_rpc_sai_thrift_remove_tunnel_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_pargs");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_result::~switch_sai_rpc_sai_thrift_remove_tunnel_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_presult::~switch_sai_rpc_sai_thrift_remove_tunnel_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_attribute_args::~switch_sai_rpc_sai_thrift_get_tunnel_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size622;
            ::apache::thrift::protocol::TType _etype625;
            xfer += iprot->readListBegin(_etype625, _size622);
            this->thrift_attr_ids.resize(_size622);
            uint32_t _i626;
            for (_i626 = 0; _i626 < _size622; ++_i626)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i626]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter627;
    for (_iter627 = this->thrift_attr_ids.begin(); _iter627 != this->thrift_attr_ids.end(); ++_iter627)
    {
      xfer += oprot->writeI32((*_iter627));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs::~switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter628;
    for (_iter628 = (*(this->thrift_attr_ids)).begin(); _iter628 != (*(this->thrift_attr_ids)).end(); ++_iter628)
    {
      xfer += oprot->writeI32((*_iter628));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_attribute_result::~switch_sai_rpc_sai_thrift_get_tunnel_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult::~switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_attribute_args::~switch_sai_rpc_sai_thrift_set_tunnel_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs::~switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_attribute_result::~switch_sai_rpc_sai_thrift_set_tunnel_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult::~switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_stats_args::~switch_sai_rpc_sai_thrift_get_tunnel_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size629;
            ::apache::thrift::protocol::TType _etype632;
            xfer += iprot->readListBegin(_etype632, _size629);
            this->counter_ids.resize(_size629);
            uint32_t _i633;
            for (_i633 = 0; _i633 < _size629; ++_i633)
            {
              xfer += iprot->readI32(this->counter_ids[_i633]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_stats_args");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter634;
    for (_iter634 = this->counter_ids.begin(); _iter634 != this->counter_ids.end(); ++_iter634)
    {
      xfer += oprot->writeI32((*_iter634));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs::~switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter635;
    for (_iter635 = (*(this->counter_ids)).begin(); _iter635 != (*(this->counter_ids)).end(); ++_iter635)
    {
      xfer += oprot->writeI32((*_iter635));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_stats_result::~switch_sai_rpc_sai_thrift_get_tunnel_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size636;
            ::apache::thrift::protocol::TType _etype639;
            xfer += iprot->readListBegin(_etype639, _size636);
            this->success.resize(_size636);
            uint32_t _i640;
            for (_i640 = 0; _i640 < _size636; ++_i640)
            {
              xfer += iprot->readI64(this->success[_i640]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->success.size()));
      std::vector<int64_t> ::const_iterator _iter641;
      for (_iter641 = this->success.begin(); _iter641 != this->success.end(); ++_iter641)
      {
        xfer += oprot->writeI64((*_iter641));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_stats_presult::~switch_sai_rpc_sai_thrift_get_tunnel_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size642;
            ::apache::thrift::protocol::TType _etype645;
            xfer += iprot->readListBegin(_etype645, _size642);
            (*(this->success)).resize(_size642);
            uint32_t _i646;
            for (_i646 = 0; _i646 < _size642; ++_i646)
            {
              xfer += iprot->readI64((*(this->success))[_i646]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_tunnel_stats_args::~switch_sai_rpc_sai_thrift_clear_tunnel_stats_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counter_ids.clear();
            uint32_t _size647;
            ::apache::thrift::protocol::TType _etype650;
            xfer += iprot->readListBegin(_etype650, _size647);
            this->counter_ids.resize(_size647);
            uint32_t _i651;
            for (_i651 = 0; _i651 < _size647; ++_i651)
            {
              xfer += iprot->readI32(this->counter_ids[_i651]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counter_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->number_of_counters);
          this->__isset.number_of_counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_tunnel_stats_args");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->counter_ids.size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter652;
    for (_iter652 = this->counter_ids.begin(); _iter652 != this->counter_ids.end(); ++_iter652)
    {
      xfer += oprot->writeI32((*_iter652));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->number_of_counters);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs::~switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs");

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("counter_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->counter_ids)).size()));
    std::vector<sai_thrift_queue_stat_counter_t> ::const_iterator _iter653;
    for (_iter653 = (*(this->counter_ids)).begin(); _iter653 != (*(this->counter_ids)).end(); ++_iter653)
    {
      xfer += oprot->writeI32((*_iter653));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number_of_counters", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32((*(this->number_of_counters)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_tunnel_stats_result::~switch_sai_rpc_sai_thrift_clear_tunnel_stats_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_tunnel_stats_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult::~switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args::~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_list.clear();
            uint32_t _size654;
            ::apache::thrift::protocol::TType _etype657;
            xfer += iprot->readListBegin(_etype657, _size654);
            this->thrift_attr_list.resize(_size654);
            uint32_t _i658;
            for (_i658 = 0; _i658 < _size654; ++_i658)
            {
              xfer += this->thrift_attr_list[_i658].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_list = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->thrift_attr_list.size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter659;
    for (_iter659 = this->thrift_attr_list.begin(); _iter659 != this->thrift_attr_list.end(); ++_iter659)
    {
      xfer += (*_iter659).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs::~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs");

  xfer += oprot->writeFieldBegin("thrift_attr_list", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>((*(this->thrift_attr_list)).size()));
    std::vector<sai_thrift_attribute_t> ::const_iterator _iter660;
    for (_iter660 = (*(this->thrift_attr_list)).begin(); _iter660 != (*(this->thrift_attr_list)).end(); ++_iter660)
    {
      xfer += (*_iter660).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result::~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult::~switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args::~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_term_table_entry_id);
          this->__isset.tunnel_term_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_term_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs::~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_term_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result::~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult::~switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args::~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_term_table_entry_id);
          this->__isset.tunnel_term_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->thrift_attr_ids.clear();
            uint32_t _size661;
            ::apache::thrift::protocol::TType _etype664;
            xfer += iprot->readListBegin(_etype664, _size661);
            this->thrift_attr_ids.resize(_size661);
            uint32_t _i665;
            for (_i665 = 0; _i665 < _size661; ++_i665)
            {
              xfer += iprot->readI32(this->thrift_attr_ids[_i665]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.thrift_attr_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_term_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->thrift_attr_ids.size()));
    std::vector<int32_t> ::const_iterator _iter666;
    for (_iter666 = this->thrift_attr_ids.begin(); _iter666 != this->thrift_attr_ids.end(); ++_iter666)
    {
      xfer += oprot->writeI32((*_iter666));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_term_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr_ids", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->thrift_attr_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter667;
    for (_iter667 = (*(this->thrift_attr_ids)).begin(); _iter667 != (*(this->thrift_attr_ids)).end(); ++_iter667)
    {
      xfer += oprot->writeI32((*_iter667));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result::~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult::~switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args::~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tunnel_term_table_entry_id);
          this->__isset.tunnel_term_table_entry_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->thrift_attr.read(iprot);
          this->__isset.thrift_attr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->tunnel_term_table_entry_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->thrift_attr.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs::~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs");

  xfer += oprot->writeFieldBegin("tunnel_term_table_entry_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->tunnel_term_table_entry_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thrift_attr", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->thrift_attr)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result::~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult::~switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args::~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->switch_id);
          this->__isset.switch_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->switch_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs::~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs");

  xfer += oprot->writeFieldBegin("switch_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->switch_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result::~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult::~switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_count_args::~switch_sai_rpc_sai_thrift_get_cpu_packet_count_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_count_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs::~switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_count_result::~switch_sai_rpc_sai_thrift_get_cpu_packet_count_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_get_cpu_packet_count_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult::~switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args::~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs::~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result::~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult::~switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


switch_sai_rpc_sai_thrift_log_set_args::~switch_sai_rpc_sai_thrift_log_set_args() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_log_set_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sai_api_id);
          this->__isset.sai_api_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->log_level);
          this->__isset.log_level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_log_set_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_log_set_args");

  xfer += oprot->writeFieldBegin("sai_api_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sai_api_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->log_level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_log_set_pargs::~switch_sai_rpc_sai_thrift_log_set_pargs() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_log_set_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_log_set_pargs");

  xfer += oprot->writeFieldBegin("sai_api_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->sai_api_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log_level", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->log_level)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


switch_sai_rpc_sai_thrift_log_set_result::~switch_sai_rpc_sai_thrift_log_set_result() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_log_set_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t switch_sai_rpc_sai_thrift_log_set_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("switch_sai_rpc_sai_thrift_log_set_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


switch_sai_rpc_sai_thrift_log_set_presult::~switch_sai_rpc_sai_thrift_log_set_presult() throw() {
}


uint32_t switch_sai_rpc_sai_thrift_log_set_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_port_attribute(port_id, thrift_attr);
  return recv_sai_thrift_set_port_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_port_attribute(const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_port_attribute_pargs args;
  args.port_id = &port_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_port_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_port_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_get_port_attribute(port_id);
  recv_sai_thrift_get_port_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_attribute(const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_attribute_pargs args;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_port_stats(port_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_port_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_stats(const sai_thrift_object_id_t port_id, const std::vector<sai_thrift_port_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_stats_pargs args;
  args.port_id = &port_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_clear_port_all_stats(port_id);
  return recv_sai_thrift_clear_port_all_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_port_all_stats(const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_port_all_stats_pargs args;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_port_all_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_port_all_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_port_all_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_port_all_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list);
  return recv_sai_thrift_create_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_fdb_entry_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  send_sai_thrift_delete_fdb_entry(thrift_fdb_entry);
  return recv_sai_thrift_delete_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_delete_fdb_entry(const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_delete_fdb_entry_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_delete_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_delete_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_delete_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_delete_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_flush_fdb_entries(thrift_attr_list);
  return recv_sai_thrift_flush_fdb_entries();
}

void switch_sai_rpcClient::send_sai_thrift_flush_fdb_entries(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_flush_fdb_entries_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_flush_fdb_entries()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_flush_fdb_entries") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_flush_fdb_entries_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_flush_fdb_entries failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_fdb_entry_attribute(thrift_fdb_entry, thrift_attr);
  return recv_sai_thrift_set_fdb_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_fdb_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_fdb_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_fdb_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_fdb_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  send_sai_thrift_get_fdb_entry_attribute(thrift_fdb_entry);
  recv_sai_thrift_get_fdb_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_fdb_entry_attribute(const sai_thrift_fdb_entry_t& thrift_fdb_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_fdb_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_pargs args;
  args.thrift_fdb_entry = &thrift_fdb_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_fdb_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_fdb_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_fdb_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_vlan(thrift_attr_list);
  return recv_sai_thrift_create_vlan();
}

void switch_sai_rpcClient::send_sai_thrift_create_vlan(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_vlan_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_vlan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_vlan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_vlan_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid)
{
  send_sai_thrift_remove_vlan(vlan_oid);
  return recv_sai_thrift_remove_vlan();
}

void switch_sai_rpcClient::send_sai_thrift_remove_vlan(const sai_thrift_object_id_t vlan_oid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_vlan", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_vlan_pargs args;
  args.vlan_oid = &vlan_oid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_vlan()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_vlan") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_vlan_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_vlan failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_stats(std::vector<int64_t> & _return, const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_vlan_stats(vlan_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_vlan_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_stats(const sai_thrift_vlan_id_t vlan_id, const std::vector<sai_thrift_vlan_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_stats_pargs args;
  args.vlan_id = &vlan_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_vlan_member(thrift_attr_list);
  return recv_sai_thrift_create_vlan_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_vlan_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_vlan_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_vlan_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_vlan_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_vlan_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_vlan_member failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_member_id)
{
  send_sai_thrift_get_vlan_member_attribute(vlan_member_id);
  recv_sai_thrift_get_vlan_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_member_attribute(const sai_thrift_object_id_t vlan_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_pargs args;
  args.vlan_member_id = &vlan_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_member_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id)
{
  send_sai_thrift_remove_vlan_member(vlan_member_id);
  return recv_sai_thrift_remove_vlan_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_vlan_member(const sai_thrift_object_id_t vlan_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_vlan_member_pargs args;
  args.vlan_member_id = &vlan_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_vlan_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_vlan_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_vlan_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_vlan_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_vlan_attribute(vlan_id, thrift_attr);
  return recv_sai_thrift_set_vlan_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_vlan_attribute(const sai_thrift_object_id_t vlan_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_vlan_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_vlan_attribute_pargs args;
  args.vlan_id = &vlan_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_vlan_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_vlan_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_vlan_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_vlan_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vlan_id)
{
  send_sai_thrift_get_vlan_attribute(vlan_id);
  recv_sai_thrift_get_vlan_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_attribute(const sai_thrift_object_id_t vlan_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_attribute_pargs args;
  args.vlan_id = &vlan_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_vlan_id(sai_thrift_result_t& _return, const sai_thrift_object_id_t vlan_id)
{
  send_sai_thrift_get_vlan_id(vlan_id);
  recv_sai_thrift_get_vlan_id(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_vlan_id(const sai_thrift_object_id_t vlan_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_vlan_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_vlan_id_pargs args;
  args.vlan_id = &vlan_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_vlan_id(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_vlan_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_vlan_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_vlan_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_virtual_router(thrift_attr_list);
  return recv_sai_thrift_create_virtual_router();
}

void switch_sai_rpcClient::send_sai_thrift_create_virtual_router(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_virtual_router_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_virtual_router()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_virtual_router") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_virtual_router_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id)
{
  send_sai_thrift_remove_virtual_router(vr_id);
  return recv_sai_thrift_remove_virtual_router();
}

void switch_sai_rpcClient::send_sai_thrift_remove_virtual_router(const sai_thrift_object_id_t vr_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_virtual_router_pargs args;
  args.vr_id = &vr_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_virtual_router()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_virtual_router") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_virtual_router_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_virtual_router failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_virtual_router_attribute(vr_id, thrift_attr);
  return recv_sai_thrift_set_virtual_router_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_virtual_router_attribute(const sai_thrift_object_id_t vr_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_virtual_router_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_pargs args;
  args.vr_id = &vr_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_virtual_router_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_virtual_router_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_virtual_router_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t vr_id)
{
  send_sai_thrift_get_virtual_router_attribute(vr_id);
  recv_sai_thrift_get_virtual_router_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_virtual_router_attribute(const sai_thrift_object_id_t vr_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_virtual_router_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_pargs args;
  args.vr_id = &vr_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_virtual_router_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_virtual_router_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_virtual_router_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_route(thrift_route_entry, thrift_attr_list);
  return recv_sai_thrift_create_route();
}

void switch_sai_rpcClient::send_sai_thrift_create_route(const sai_thrift_route_entry_t& thrift_route_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_route_pargs args;
  args.thrift_route_entry = &thrift_route_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_route()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_route") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_route_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_route failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry)
{
  send_sai_thrift_remove_route(thrift_route_entry);
  return recv_sai_thrift_remove_route();
}

void switch_sai_rpcClient::send_sai_thrift_remove_route(const sai_thrift_route_entry_t& thrift_route_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_route_pargs args;
  args.thrift_route_entry = &thrift_route_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_route()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_route") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_route_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_route failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_route_attribute(thrift_route_entry, thrift_attr);
  return recv_sai_thrift_set_route_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_route_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_route_attribute_pargs args;
  args.thrift_route_entry = &thrift_route_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_route_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_route_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_route_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_route_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_route_entry_t& thrift_route_entry)
{
  send_sai_thrift_get_route_attribute(thrift_route_entry);
  recv_sai_thrift_get_route_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_route_attribute(const sai_thrift_route_entry_t& thrift_route_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_route_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_route_attribute_pargs args;
  args.thrift_route_entry = &thrift_route_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_route_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_route_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_route_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_route_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_router_interface(thrift_attr_list);
  return recv_sai_thrift_create_router_interface();
}

void switch_sai_rpcClient::send_sai_thrift_create_router_interface(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_router_interface_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_router_interface()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_router_interface") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_router_interface_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id)
{
  send_sai_thrift_remove_router_interface(rif_id);
  return recv_sai_thrift_remove_router_interface();
}

void switch_sai_rpcClient::send_sai_thrift_remove_router_interface(const sai_thrift_object_id_t rif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_router_interface_pargs args;
  args.rif_id = &rif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_router_interface()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_router_interface") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_router_interface_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_router_interface failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_router_interface_attribute(rif_id, thrift_attr);
  return recv_sai_thrift_set_router_interface_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_router_interface_attribute(const sai_thrift_object_id_t rif_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_router_interface_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_pargs args;
  args.rif_id = &rif_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_router_interface_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_router_interface_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_router_interface_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_router_interface_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t rif_id)
{
  send_sai_thrift_get_router_interface_attribute(rif_id);
  recv_sai_thrift_get_router_interface_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_router_interface_attribute(const sai_thrift_object_id_t rif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_router_interface_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_pargs args;
  args.rif_id = &rif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_router_interface_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_router_interface_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_router_interface_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_router_interface_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_next_hop(thrift_attr_list);
  return recv_sai_thrift_create_next_hop();
}

void switch_sai_rpcClient::send_sai_thrift_create_next_hop(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_next_hop_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_next_hop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_next_hop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_next_hop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id)
{
  send_sai_thrift_remove_next_hop(next_hop_id);
  return recv_sai_thrift_remove_next_hop();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop(const sai_thrift_object_id_t next_hop_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_pargs args;
  args.next_hop_id = &next_hop_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t next_hop_id)
{
  send_sai_thrift_get_next_hop_attribute(next_hop_id);
  recv_sai_thrift_get_next_hop_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_next_hop_attribute(const sai_thrift_object_id_t next_hop_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_next_hop_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_pargs args;
  args.next_hop_id = &next_hop_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_next_hop_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_next_hop_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_next_hop_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_next_hop_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_next_hop_group(thrift_attr_list);
  return recv_sai_thrift_create_next_hop_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_next_hop_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_next_hop_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_next_hop_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_next_hop_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_next_hop_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid)
{
  send_sai_thrift_remove_next_hop_group(nhop_group_oid);
  return recv_sai_thrift_remove_next_hop_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop_group(const sai_thrift_object_id_t nhop_group_oid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_group_pargs args;
  args.nhop_group_oid = &nhop_group_oid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_next_hop_group_attribute(nhop_group_oid, thrift_attr);
  return recv_sai_thrift_set_next_hop_group_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_next_hop_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_pargs args;
  args.nhop_group_oid = &nhop_group_oid;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_next_hop_group_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_next_hop_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_next_hop_group_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_oid)
{
  send_sai_thrift_get_next_hop_group_attribute(nhop_group_oid);
  recv_sai_thrift_get_next_hop_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_next_hop_group_attribute(const sai_thrift_object_id_t nhop_group_oid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_next_hop_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_pargs args;
  args.nhop_group_oid = &nhop_group_oid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_next_hop_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_next_hop_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_next_hop_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_next_hop_group_member(thrift_attr_list);
  return recv_sai_thrift_create_next_hop_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_next_hop_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_next_hop_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_next_hop_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_next_hop_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_next_hop_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_next_hop_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid)
{
  send_sai_thrift_remove_next_hop_group_member(nhop_group_member_oid);
  return recv_sai_thrift_remove_next_hop_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_next_hop_group_member(const sai_thrift_object_id_t nhop_group_member_oid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_next_hop_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_pargs args;
  args.nhop_group_member_oid = &nhop_group_member_oid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_next_hop_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_next_hop_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_next_hop_group_member failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t nhop_group_member_oid)
{
  send_sai_thrift_get_next_hop_group_member_attribute(nhop_group_member_oid);
  recv_sai_thrift_get_next_hop_group_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_next_hop_group_member_attribute(const sai_thrift_object_id_t nhop_group_member_oid)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_pargs args;
  args.nhop_group_member_oid = &nhop_group_member_oid;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_next_hop_group_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_next_hop_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_next_hop_group_member_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_lag(thrift_attr_list);
  return recv_sai_thrift_create_lag();
}

void switch_sai_rpcClient::send_sai_thrift_create_lag(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_lag_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_lag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_lag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_lag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_lag failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id)
{
  send_sai_thrift_remove_lag(lag_id);
  return recv_sai_thrift_remove_lag();
}

void switch_sai_rpcClient::send_sai_thrift_remove_lag(const sai_thrift_object_id_t lag_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_lag_pargs args;
  args.lag_id = &lag_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_lag()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_lag") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_lag_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_lag failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_lag_attribute(lag_id, thrift_attr);
  return recv_sai_thrift_set_lag_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_lag_attribute(const sai_thrift_object_id_t lag_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_lag_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_lag_attribute_pargs args;
  args.lag_id = &lag_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_lag_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_lag_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_lag_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_lag_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_id)
{
  send_sai_thrift_get_lag_attribute(lag_id);
  recv_sai_thrift_get_lag_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_lag_attribute(const sai_thrift_object_id_t lag_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_lag_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_lag_attribute_pargs args;
  args.lag_id = &lag_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_lag_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_lag_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_lag_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_lag_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_lag_member(thrift_attr_list);
  return recv_sai_thrift_create_lag_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_lag_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_lag_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_lag_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_lag_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_lag_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id)
{
  send_sai_thrift_remove_lag_member(lag_member_id);
  return recv_sai_thrift_remove_lag_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_lag_member(const sai_thrift_object_id_t lag_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_lag_member_pargs args;
  args.lag_member_id = &lag_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_lag_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_lag_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_lag_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_lag_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_lag_member_attribute(lag_member_id, thrift_attr);
  return recv_sai_thrift_set_lag_member_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_lag_member_attribute(const sai_thrift_object_id_t lag_member_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_lag_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_pargs args;
  args.lag_member_id = &lag_member_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_lag_member_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_lag_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_lag_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_lag_member_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t lag_member_id)
{
  send_sai_thrift_get_lag_member_attribute(lag_member_id);
  recv_sai_thrift_get_lag_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_lag_member_attribute(const sai_thrift_object_id_t lag_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_lag_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_pargs args;
  args.lag_member_id = &lag_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_lag_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_lag_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_lag_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_lag_member_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_stp_entry(thrift_attr_list);
  return recv_sai_thrift_create_stp_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_stp_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_stp_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_stp_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_stp_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_stp_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_stp_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id)
{
  send_sai_thrift_remove_stp_entry(stp_id);
  return recv_sai_thrift_remove_stp_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_stp_entry(const sai_thrift_object_id_t stp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_stp_entry_pargs args;
  args.stp_id = &stp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_stp_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_stp_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_stp_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_stp_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state)
{
  send_sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state);
  return recv_sai_thrift_set_stp_port_state();
}

void switch_sai_rpcClient::send_sai_thrift_set_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_stp_port_state_pargs args;
  args.stp_id = &stp_id;
  args.port_id = &port_id;
  args.stp_port_state = &stp_port_state;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_stp_port_state()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_stp_port_state") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_stp_port_state_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_stp_port_state failed: unknown result");
}

sai_thrift_port_stp_port_state_t switch_sai_rpcClient::sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id)
{
  send_sai_thrift_get_stp_port_state(stp_id, port_id);
  return recv_sai_thrift_get_stp_port_state();
}

void switch_sai_rpcClient::send_sai_thrift_get_stp_port_state(const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_stp_port_state_pargs args;
  args.stp_id = &stp_id;
  args.port_id = &port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_port_stp_port_state_t switch_sai_rpcClient::recv_sai_thrift_get_stp_port_state()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_stp_port_state") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_port_stp_port_state_t _return;
  switch_sai_rpc_sai_thrift_get_stp_port_state_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_stp_port_state failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list);
  return recv_sai_thrift_create_neighbor_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_neighbor_entry_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_neighbor_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_neighbor_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_neighbor_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_neighbor_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  send_sai_thrift_remove_neighbor_entry(thrift_neighbor_entry);
  return recv_sai_thrift_remove_neighbor_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_neighbor_entry(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_neighbor_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_neighbor_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_neighbor_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_neighbor_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_all_neighbor_entry()
{
  send_sai_thrift_remove_all_neighbor_entry();
  return recv_sai_thrift_remove_all_neighbor_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_all_neighbor_entry()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_all_neighbor_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_all_neighbor_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_all_neighbor_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_all_neighbor_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_neighbor_entry_attribute(thrift_neighbor_entry, thrift_attr);
  return recv_sai_thrift_set_neighbor_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_neighbor_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_neighbor_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_neighbor_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  send_sai_thrift_get_neighbor_entry_attribute(thrift_neighbor_entry);
  recv_sai_thrift_get_neighbor_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_neighbor_entry_attribute(const sai_thrift_neighbor_entry_t& thrift_neighbor_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_pargs args;
  args.thrift_neighbor_entry = &thrift_neighbor_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_neighbor_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_neighbor_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_neighbor_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_switch_attribute(thrift_attr_ids);
  recv_sai_thrift_get_switch_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_switch_attribute(const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_switch_attribute_pargs args;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_switch_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_switch_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_switch_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return)
{
  send_sai_thrift_get_port_list_by_front_port();
  recv_sai_thrift_get_port_list_by_front_port(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_port_list_by_front_port()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_port_list_by_front_port(sai_thrift_attribute_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_list_by_front_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_list_by_front_port failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_cpu_port_id()
{
  send_sai_thrift_get_cpu_port_id();
  return recv_sai_thrift_get_cpu_port_id();
}

void switch_sai_rpcClient::send_sai_thrift_get_cpu_port_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_cpu_port_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_cpu_port_id()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_cpu_port_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_cpu_port_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_cpu_port_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_default_trap_group()
{
  send_sai_thrift_get_default_trap_group();
  return recv_sai_thrift_get_default_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_get_default_trap_group()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_trap_group_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_default_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_default_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_trap_group failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_default_router_id()
{
  send_sai_thrift_get_default_router_id();
  return recv_sai_thrift_get_default_router_id();
}

void switch_sai_rpcClient::send_sai_thrift_get_default_router_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_router_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_default_router_id()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_router_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_default_router_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_router_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_default_1q_bridge_id()
{
  send_sai_thrift_get_default_1q_bridge_id();
  return recv_sai_thrift_get_default_1q_bridge_id();
}

void switch_sai_rpcClient::send_sai_thrift_get_default_1q_bridge_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_1q_bridge_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_default_1q_bridge_id()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_1q_bridge_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_1q_bridge_id failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return)
{
  send_sai_thrift_get_default_vlan_id();
  recv_sai_thrift_get_default_vlan_id(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_default_vlan_id()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_default_vlan_id", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_default_vlan_id_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_default_vlan_id(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_default_vlan_id") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_default_vlan_id_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_default_vlan_id failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_get_port_id_by_front_port(const std::string& port_name)
{
  send_sai_thrift_get_port_id_by_front_port(port_name);
  return recv_sai_thrift_get_port_id_by_front_port();
}

void switch_sai_rpcClient::send_sai_thrift_get_port_id_by_front_port(const std::string& port_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_pargs args;
  args.port_name = &port_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_get_port_id_by_front_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_port_id_by_front_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_port_id_by_front_port failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute)
{
  send_sai_thrift_set_switch_attribute(attribute);
  return recv_sai_thrift_set_switch_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_switch_attribute(const sai_thrift_attribute_t& attribute)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_switch_attribute_pargs args;
  args.attribute = &attribute;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_switch_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_switch_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_switch_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_switch_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_switch()
{
  send_sai_thrift_create_switch();
  return recv_sai_thrift_create_switch();
}

void switch_sai_rpcClient::send_sai_thrift_create_switch()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_switch_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_switch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_switch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_switch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_switch failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_switch()
{
  send_sai_thrift_remove_switch();
  return recv_sai_thrift_remove_switch();
}

void switch_sai_rpcClient::send_sai_thrift_remove_switch()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_switch", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_switch_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_switch()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_switch") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_switch_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_switch failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_create_bridge_port(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_bridge_port(thrift_attr_list);
  recv_sai_thrift_create_bridge_port(_return);
}

void switch_sai_rpcClient::send_sai_thrift_create_bridge_port(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_bridge_port_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_create_bridge_port(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_bridge_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_create_bridge_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_bridge_port failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id)
{
  send_sai_thrift_remove_bridge_port(bridge_port_id);
  return recv_sai_thrift_remove_bridge_port();
}

void switch_sai_rpcClient::send_sai_thrift_remove_bridge_port(const sai_thrift_object_id_t bridge_port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_bridge_port_pargs args;
  args.bridge_port_id = &bridge_port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_bridge_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_bridge_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_bridge_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_bridge_port failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return, const sai_thrift_object_id_t bridge_id)
{
  send_sai_thrift_get_bridge_port_list(bridge_id);
  recv_sai_thrift_get_bridge_port_list(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_bridge_port_list(const sai_thrift_object_id_t bridge_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_bridge_port_list", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_bridge_port_list_pargs args;
  args.bridge_id = &bridge_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_bridge_port_list(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_bridge_port_list") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_bridge_port_list_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_bridge_port_list failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_port_id)
{
  send_sai_thrift_get_bridge_port_attribute(bridge_port_id);
  recv_sai_thrift_get_bridge_port_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_bridge_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_pargs args;
  args.bridge_port_id = &bridge_port_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_bridge_port_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_bridge_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_bridge_port_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_bridge_port_attribute(bridge_port_id, thrift_attr);
  return recv_sai_thrift_set_bridge_port_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_bridge_port_attribute(const sai_thrift_object_id_t bridge_port_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_bridge_port_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_pargs args;
  args.bridge_port_id = &bridge_port_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_bridge_port_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_bridge_port_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_bridge_port_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_create_bridge(sai_thrift_result_t& _return, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_bridge(thrift_attr_list);
  recv_sai_thrift_create_bridge(_return);
}

void switch_sai_rpcClient::send_sai_thrift_create_bridge(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_bridge_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_create_bridge(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_bridge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_create_bridge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_bridge failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id)
{
  send_sai_thrift_remove_bridge(bridge_id);
  return recv_sai_thrift_remove_bridge();
}

void switch_sai_rpcClient::send_sai_thrift_remove_bridge(const sai_thrift_object_id_t bridge_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_bridge_pargs args;
  args.bridge_id = &bridge_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_bridge()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_bridge") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_bridge_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_bridge failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t bridge_id)
{
  send_sai_thrift_get_bridge_attribute(bridge_id);
  recv_sai_thrift_get_bridge_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_bridge_attribute(const sai_thrift_object_id_t bridge_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_bridge_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_bridge_attribute_pargs args;
  args.bridge_id = &bridge_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_bridge_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_bridge_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_bridge_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_bridge_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_bridge_attribute(bridge_id, thrift_attr);
  return recv_sai_thrift_set_bridge_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_bridge_attribute(const sai_thrift_object_id_t bridge_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_bridge_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_bridge_attribute_pargs args;
  args.bridge_id = &bridge_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_bridge_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_bridge_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_bridge_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_bridge_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif(thrift_attr_list);
  return recv_sai_thrift_create_hostif();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id)
{
  send_sai_thrift_remove_hostif(thrift_hif_id);
  return recv_sai_thrift_remove_hostif();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif(const sai_thrift_object_id_t thrift_hif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_pargs args;
  args.thrift_hif_id = &thrift_hif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hif_id)
{
  send_sai_thrift_get_hostif_attribute(thrift_hif_id);
  recv_sai_thrift_get_hostif_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_hostif_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_hostif_attribute_pargs args;
  args.thrift_hif_id = &thrift_hif_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_hostif_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_hostif_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_hostif_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_hostif_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_attribute(thrift_hif_id, thrift_attr);
  return recv_sai_thrift_set_hostif_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_attribute(const sai_thrift_object_id_t thrift_hif_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_attribute_pargs args;
  args.thrift_hif_id = &thrift_hif_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif_table_entry(thrift_attr_list);
  return recv_sai_thrift_create_hostif_table_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif_table_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif_table_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif_table_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_table_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif_table_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id)
{
  send_sai_thrift_remove_hostif_table_entry(thrift_hostif_table_entry_id);
  return recv_sai_thrift_remove_hostif_table_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif_table_entry(const sai_thrift_object_id_t thrift_hostif_table_entry_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif_table_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_pargs args;
  args.thrift_hostif_table_entry_id = &thrift_hostif_table_entry_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif_table_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif_table_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif_table_entry failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_table_entry_id)
{
  send_sai_thrift_get_hostif_table_entry_attribute(thrift_hostif_table_entry_id);
  recv_sai_thrift_get_hostif_table_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_pargs args;
  args.thrift_hostif_table_entry_id = &thrift_hostif_table_entry_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_hostif_table_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_hostif_table_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_hostif_table_entry_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_table_entry_attribute(thrift_hostif_table_entry_id, thrift_attr);
  return recv_sai_thrift_set_hostif_table_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_table_entry_attribute(const sai_thrift_object_id_t thrift_hostif_table_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_pargs args;
  args.thrift_hostif_table_entry_id = &thrift_hostif_table_entry_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_table_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_table_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_table_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif_trap_group(thrift_attr_list);
  return recv_sai_thrift_create_hostif_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif_trap_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id)
{
  send_sai_thrift_remove_hostif_trap_group(thrift_hostif_trap_group_id);
  return recv_sai_thrift_remove_hostif_trap_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif_trap_group(const sai_thrift_object_id_t thrift_hostif_trap_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_pargs args;
  args.thrift_hostif_trap_group_id = &thrift_hostif_trap_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif_trap_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif_trap_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif_trap_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_group_id)
{
  send_sai_thrift_get_hostif_trap_group_attribute(thrift_hostif_trap_group_id);
  recv_sai_thrift_get_hostif_trap_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_pargs args;
  args.thrift_hostif_trap_group_id = &thrift_hostif_trap_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_hostif_trap_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_hostif_trap_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_hostif_trap_group_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_trap_group_attribute(thrift_hostif_trap_group_id, thrift_attr);
  return recv_sai_thrift_set_hostif_trap_group_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_trap_group_attribute(const sai_thrift_object_id_t thrift_hostif_trap_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_pargs args;
  args.thrift_hostif_trap_group_id = &thrift_hostif_trap_group_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_trap_group_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_trap_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_trap_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hostif_trap(thrift_attr_list);
  return recv_sai_thrift_create_hostif_trap();
}

void switch_sai_rpcClient::send_sai_thrift_create_hostif_trap(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hostif_trap_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hostif_trap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hostif_trap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hostif_trap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id)
{
  send_sai_thrift_remove_hostif_trap(thrift_hostif_trap_id);
  return recv_sai_thrift_remove_hostif_trap();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hostif_trap(const sai_thrift_object_id_t thrift_hostif_trap_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hostif_trap_pargs args;
  args.thrift_hostif_trap_id = &thrift_hostif_trap_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hostif_trap()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hostif_trap") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hostif_trap_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hostif_trap failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hostif_trap_id)
{
  send_sai_thrift_get_hostif_trap_attribute(thrift_hostif_trap_id);
  recv_sai_thrift_get_hostif_trap_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_hostif_trap_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_pargs args;
  args.thrift_hostif_trap_id = &thrift_hostif_trap_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_hostif_trap_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_hostif_trap_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_hostif_trap_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hostif_trap_attribute(thrift_hostif_trap_id, thrift_attr);
  return recv_sai_thrift_set_hostif_trap_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_hostif_trap_attribute(const sai_thrift_object_id_t thrift_hostif_trap_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hostif_trap_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_pargs args;
  args.thrift_hostif_trap_id = &thrift_hostif_trap_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hostif_trap_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hostif_trap_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hostif_trap_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_table(thrift_attr_list);
  return recv_sai_thrift_create_acl_table();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_table(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_table_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_table()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_table") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_table_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id)
{
  send_sai_thrift_remove_acl_table(acl_table_id);
  return recv_sai_thrift_remove_acl_table();
}

void switch_sai_rpcClient::send_sai_thrift_remove_acl_table(const sai_thrift_object_id_t acl_table_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_acl_table", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_acl_table_pargs args;
  args.acl_table_id = &acl_table_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_acl_table()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_acl_table") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_acl_table_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_acl_table failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_acl_table_attribute(acl_table_id, thrift_attr_ids);
  recv_sai_thrift_get_acl_table_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_table_attribute(const sai_thrift_object_id_t acl_table_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_table_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_pargs args;
  args.acl_table_id = &acl_table_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_table_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_table_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_table_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_table_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_entry(thrift_attr_list);
  return recv_sai_thrift_create_acl_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry)
{
  send_sai_thrift_remove_acl_entry(acl_entry);
  return recv_sai_thrift_remove_acl_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_acl_entry(const sai_thrift_object_id_t acl_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_acl_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_acl_entry_pargs args;
  args.acl_entry = &acl_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_acl_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_acl_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_acl_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_acl_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_acl_entry_attribute(acl_entry_id, thrift_attr);
  return recv_sai_thrift_set_acl_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_acl_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_pargs args;
  args.acl_entry_id = &acl_entry_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_acl_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_acl_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_acl_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_acl_entry_attribute(acl_entry_id, thrift_attr_ids);
  recv_sai_thrift_get_acl_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_entry_attribute(const sai_thrift_object_id_t acl_entry_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_pargs args;
  args.acl_entry_id = &acl_entry_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_table_group(thrift_attr_list);
  return recv_sai_thrift_create_acl_table_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_table_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_table_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_table_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_table_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_table_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_table_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_table_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id)
{
  send_sai_thrift_remove_acl_table_group(acl_table_group_id);
  return recv_sai_thrift_remove_acl_table_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_acl_table_group(const sai_thrift_object_id_t acl_table_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_acl_table_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_acl_table_group_pargs args;
  args.acl_table_group_id = &acl_table_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_acl_table_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_acl_table_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_acl_table_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_acl_table_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_id)
{
  send_sai_thrift_get_acl_table_group_attribute(acl_table_group_id);
  recv_sai_thrift_get_acl_table_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_table_group_attribute(const sai_thrift_object_id_t acl_table_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_table_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_pargs args;
  args.acl_table_group_id = &acl_table_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_table_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_table_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_table_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_table_group_member(thrift_attr_list);
  return recv_sai_thrift_create_acl_table_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_table_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_table_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_table_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_table_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_table_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_table_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id)
{
  send_sai_thrift_remove_acl_table_group_member(acl_table_group_member_id);
  return recv_sai_thrift_remove_acl_table_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_acl_table_group_member(const sai_thrift_object_id_t acl_table_group_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_acl_table_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_pargs args;
  args.acl_table_group_member_id = &acl_table_group_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_acl_table_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_acl_table_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_acl_table_group_member failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t acl_table_group_member_id)
{
  send_sai_thrift_get_acl_table_group_member_attribute(acl_table_group_member_id);
  recv_sai_thrift_get_acl_table_group_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_table_group_member_attribute(const sai_thrift_object_id_t acl_table_group_member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_pargs args;
  args.acl_table_group_member_id = &acl_table_group_member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_table_group_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_table_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_table_group_member_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_acl_counter(thrift_attr_list);
  return recv_sai_thrift_create_acl_counter();
}

void switch_sai_rpcClient::send_sai_thrift_create_acl_counter(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_acl_counter_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_acl_counter()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_acl_counter") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_acl_counter_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id)
{
  send_sai_thrift_remove_acl_counter(acl_counter_id);
  return recv_sai_thrift_remove_acl_counter();
}

void switch_sai_rpcClient::send_sai_thrift_remove_acl_counter(const sai_thrift_object_id_t acl_counter_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_acl_counter", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_acl_counter_pargs args;
  args.acl_counter_id = &acl_counter_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_acl_counter()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_acl_counter") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_acl_counter_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_acl_counter failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return, const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_acl_counter_attribute(acl_counter_id, thrift_attr_ids);
  recv_sai_thrift_get_acl_counter_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_acl_counter_attribute(const sai_thrift_object_id_t acl_counter_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_pargs args;
  args.acl_counter_id = &acl_counter_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_acl_counter_attribute(std::vector<sai_thrift_attribute_value_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_acl_counter_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_hash(thrift_attr_list);
  return recv_sai_thrift_create_hash();
}

void switch_sai_rpcClient::send_sai_thrift_create_hash(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_hash", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_hash_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_hash()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_hash") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_hash_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_hash failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id)
{
  send_sai_thrift_remove_hash(hash_id);
  return recv_sai_thrift_remove_hash();
}

void switch_sai_rpcClient::send_sai_thrift_remove_hash(const sai_thrift_object_id_t hash_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_hash", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_hash_pargs args;
  args.hash_id = &hash_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_hash()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_hash") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_hash_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_hash failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_hash_attribute(thrift_hash_id, thrift_attr);
  return recv_sai_thrift_set_hash_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_hash_attribute(const sai_thrift_object_id_t thrift_hash_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_hash_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_hash_attribute_pargs args;
  args.thrift_hash_id = &thrift_hash_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_hash_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_hash_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_hash_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_hash_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_hash_id)
{
  send_sai_thrift_get_hash_attribute(thrift_hash_id);
  recv_sai_thrift_get_hash_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_hash_attribute(const sai_thrift_object_id_t thrift_hash_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_hash_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_hash_attribute_pargs args;
  args.thrift_hash_id = &thrift_hash_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_hash_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_hash_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_hash_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_hash_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_udf_group(thrift_attr_list);
  return recv_sai_thrift_create_udf_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_udf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_udf_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_udf_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_udf_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_udf_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_udf_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_udf_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id)
{
  send_sai_thrift_remove_udf_group(udf_group_id);
  return recv_sai_thrift_remove_udf_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_udf_group(const sai_thrift_object_id_t udf_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_udf_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_udf_group_pargs args;
  args.udf_group_id = &udf_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_udf_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_udf_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_udf_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_udf_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_group_id)
{
  send_sai_thrift_get_udf_group_attribute(thrift_udf_group_id);
  recv_sai_thrift_get_udf_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_udf_group_attribute(const sai_thrift_object_id_t thrift_udf_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_udf_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_pargs args;
  args.thrift_udf_group_id = &thrift_udf_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_udf_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_udf_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_udf_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_udf_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_udf_match(thrift_attr_list);
  return recv_sai_thrift_create_udf_match();
}

void switch_sai_rpcClient::send_sai_thrift_create_udf_match(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_udf_match", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_udf_match_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_udf_match()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_udf_match") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_udf_match_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_udf_match failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id)
{
  send_sai_thrift_remove_udf_match(udf_match_id);
  return recv_sai_thrift_remove_udf_match();
}

void switch_sai_rpcClient::send_sai_thrift_remove_udf_match(const sai_thrift_object_id_t udf_match_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_udf_match", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_udf_match_pargs args;
  args.udf_match_id = &udf_match_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_udf_match()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_udf_match") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_udf_match_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_udf_match failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_match_id)
{
  send_sai_thrift_get_udf_match_attribute(thrift_udf_match_id);
  recv_sai_thrift_get_udf_match_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_udf_match_attribute(const sai_thrift_object_id_t thrift_udf_match_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_udf_match_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_pargs args;
  args.thrift_udf_match_id = &thrift_udf_match_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_udf_match_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_udf_match_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_udf_match_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_udf_match_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_udf(thrift_attr_list);
  return recv_sai_thrift_create_udf();
}

void switch_sai_rpcClient::send_sai_thrift_create_udf(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_udf", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_udf_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_udf()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_udf") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_udf_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_udf failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id)
{
  send_sai_thrift_remove_udf(udf_id);
  return recv_sai_thrift_remove_udf();
}

void switch_sai_rpcClient::send_sai_thrift_remove_udf(const sai_thrift_object_id_t udf_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_udf", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_udf_pargs args;
  args.udf_id = &udf_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_udf()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_udf") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_udf_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_udf failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_udf_attribute(thrift_udf_id, thrift_attr);
  return recv_sai_thrift_set_udf_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_udf_attribute(const sai_thrift_object_id_t thrift_udf_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_udf_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_udf_attribute_pargs args;
  args.thrift_udf_id = &thrift_udf_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_udf_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_udf_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_udf_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_udf_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_udf_id)
{
  send_sai_thrift_get_udf_attribute(thrift_udf_id);
  recv_sai_thrift_get_udf_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_udf_attribute(const sai_thrift_object_id_t thrift_udf_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_udf_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_udf_attribute_pargs args;
  args.thrift_udf_id = &thrift_udf_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_udf_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_udf_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_udf_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_udf_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_mirror_session(thrift_attr_list);
  return recv_sai_thrift_create_mirror_session();
}

void switch_sai_rpcClient::send_sai_thrift_create_mirror_session(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_mirror_session_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_mirror_session()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_mirror_session") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_mirror_session_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id)
{
  send_sai_thrift_remove_mirror_session(session_id);
  return recv_sai_thrift_remove_mirror_session();
}

void switch_sai_rpcClient::send_sai_thrift_remove_mirror_session(const sai_thrift_object_id_t session_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_mirror_session_pargs args;
  args.session_id = &session_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_mirror_session()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_mirror_session") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_mirror_session_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_mirror_session failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_mirror_attribute(thrift_mirror_id, thrift_attr);
  return recv_sai_thrift_set_mirror_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_mirror_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_mirror_attribute_pargs args;
  args.thrift_mirror_id = &thrift_mirror_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_mirror_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_mirror_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_mirror_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_mirror_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_mirror_id)
{
  send_sai_thrift_get_mirror_attribute(thrift_mirror_id);
  recv_sai_thrift_get_mirror_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_mirror_attribute(const sai_thrift_object_id_t thrift_mirror_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_mirror_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_mirror_attribute_pargs args;
  args.thrift_mirror_id = &thrift_mirror_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_mirror_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_mirror_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_mirror_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_mirror_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_inseg_entry(thrift_inseg_entry, thrift_attr_list);
  return recv_sai_thrift_create_inseg_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_inseg_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_inseg_entry_pargs args;
  args.thrift_inseg_entry = &thrift_inseg_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_inseg_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_inseg_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_inseg_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_inseg_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry)
{
  send_sai_thrift_remove_inseg_entry(thrift_inseg_entry);
  return recv_sai_thrift_remove_inseg_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_inseg_entry(const sai_thrift_inseg_entry_t& thrift_inseg_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_inseg_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_inseg_entry_pargs args;
  args.thrift_inseg_entry = &thrift_inseg_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_inseg_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_inseg_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_inseg_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_inseg_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_inseg_entry_attribute(thrift_inseg_entry, thrift_attr);
  return recv_sai_thrift_set_inseg_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_inseg_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_pargs args;
  args.thrift_inseg_entry = &thrift_inseg_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_inseg_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_inseg_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_inseg_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_inseg_entry_t& thrift_inseg_entry)
{
  send_sai_thrift_get_inseg_entry_attribute(thrift_inseg_entry);
  recv_sai_thrift_get_inseg_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_inseg_entry_attribute(const sai_thrift_inseg_entry_t& thrift_inseg_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_inseg_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_pargs args;
  args.thrift_inseg_entry = &thrift_inseg_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_inseg_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_inseg_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_inseg_entry_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_dump_log(const std::string& dump_file_name)
{
  send_sai_thrift_dump_log(dump_file_name);
  return recv_sai_thrift_dump_log();
}

void switch_sai_rpcClient::send_sai_thrift_dump_log(const std::string& dump_file_name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_dump_log", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_dump_log_pargs args;
  args.dump_file_name = &dump_file_name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_dump_log()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_dump_log") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_dump_log_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_dump_log failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_policer(thrift_attr_list);
  return recv_sai_thrift_create_policer();
}

void switch_sai_rpcClient::send_sai_thrift_create_policer(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_policer_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_policer()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_policer") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_policer_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_policer failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id)
{
  send_sai_thrift_remove_policer(thrift_policer_id);
  return recv_sai_thrift_remove_policer();
}

void switch_sai_rpcClient::send_sai_thrift_remove_policer(const sai_thrift_object_id_t thrift_policer_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_policer_pargs args;
  args.thrift_policer_id = &thrift_policer_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_policer()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_policer") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_policer_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_policer failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_policer_id)
{
  send_sai_thrift_get_policer_attribute(thrift_policer_id);
  recv_sai_thrift_get_policer_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_policer_attribute(const sai_thrift_object_id_t thrift_policer_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_policer_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_policer_attribute_pargs args;
  args.thrift_policer_id = &thrift_policer_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_policer_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_policer_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_policer_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_policer_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_policer_attribute(thrift_policer_id, thrift_attr);
  return recv_sai_thrift_set_policer_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_policer_attribute(const sai_thrift_object_id_t thrift_policer_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_policer_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_policer_attribute_pargs args;
  args.thrift_policer_id = &thrift_policer_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_policer_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_policer_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_policer_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_policer_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return, const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids)
{
  send_sai_thrift_get_policer_stats(thrift_policer_id, thrift_counter_ids);
  recv_sai_thrift_get_policer_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_policer_stats_pargs args;
  args.thrift_policer_id = &thrift_policer_id;
  args.thrift_counter_ids = &thrift_counter_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_policer_stats(std::vector<sai_thrift_uint64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_policer_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_policer_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids)
{
  send_sai_thrift_clear_policer_stats(thrift_policer_id, thrift_counter_ids);
  return recv_sai_thrift_clear_policer_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_policer_stats(const sai_thrift_object_id_t thrift_policer_id, const std::vector<sai_thrift_policer_stat_t> & thrift_counter_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_policer_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_policer_stats_pargs args;
  args.thrift_policer_id = &thrift_policer_id;
  args.thrift_counter_ids = &thrift_counter_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_policer_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_policer_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_policer_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_policer_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_scheduler_profile(thrift_attr_list);
  return recv_sai_thrift_create_scheduler_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_scheduler_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_scheduler_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_scheduler_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_scheduler_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_scheduler_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_scheduler_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id)
{
  send_sai_thrift_remove_scheduler_profile(scheduler_id);
  return recv_sai_thrift_remove_scheduler_profile();
}

void switch_sai_rpcClient::send_sai_thrift_remove_scheduler_profile(const sai_thrift_object_id_t scheduler_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_pargs args;
  args.scheduler_id = &scheduler_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_scheduler_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_scheduler_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_scheduler_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_scheduler_profile failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t thrift_scheduler_id)
{
  send_sai_thrift_get_scheduler_attribute(thrift_scheduler_id);
  recv_sai_thrift_get_scheduler_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_scheduler_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_pargs args;
  args.thrift_scheduler_id = &thrift_scheduler_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_scheduler_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_scheduler_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_scheduler_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_scheduler_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_scheduler_attribute(thrift_scheduler_id, thrift_attr);
  return recv_sai_thrift_set_scheduler_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_scheduler_attribute(const sai_thrift_object_id_t thrift_scheduler_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_scheduler_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_pargs args;
  args.thrift_scheduler_id = &thrift_scheduler_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_scheduler_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_scheduler_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_scheduler_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_scheduler_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_scheduler_group(thrift_attr_list);
  return recv_sai_thrift_create_scheduler_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_scheduler_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_scheduler_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_scheduler_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_scheduler_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_scheduler_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_scheduler_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_scheduler_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id)
{
  send_sai_thrift_remove_scheduler_group(scheduler_group_id);
  return recv_sai_thrift_remove_scheduler_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_scheduler_group(const sai_thrift_object_id_t scheduler_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_scheduler_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_scheduler_group_pargs args;
  args.scheduler_group_id = &scheduler_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_scheduler_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_scheduler_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_scheduler_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_scheduler_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t scheduler_group_id)
{
  send_sai_thrift_get_scheduler_group_attribute(scheduler_group_id);
  recv_sai_thrift_get_scheduler_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_scheduler_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_pargs args;
  args.scheduler_group_id = &scheduler_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_scheduler_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_scheduler_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_scheduler_group_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_scheduler_group_attribute(scheduler_group_id, thrift_attr);
  return recv_sai_thrift_set_scheduler_group_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_scheduler_group_attribute(const sai_thrift_object_id_t scheduler_group_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_scheduler_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_pargs args;
  args.scheduler_group_id = &scheduler_group_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_scheduler_group_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_scheduler_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_scheduler_group_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_queue_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_queue_stats(queue_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_queue_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_queue_stats_pargs args;
  args.queue_id = &queue_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_queue_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_queue_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_queue_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_queue_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_clear_queue_stats(queue_id, counter_ids, number_of_counters);
  return recv_sai_thrift_clear_queue_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_queue_stats(const sai_thrift_object_id_t queue_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_queue_stats_pargs args;
  args.queue_id = &queue_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_queue_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_queue_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_queue_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_queue_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_queue(thrift_attr_list);
  return recv_sai_thrift_create_queue();
}

void switch_sai_rpcClient::send_sai_thrift_create_queue(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_queue", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_queue_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_queue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_queue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_queue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_queue failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id)
{
  send_sai_thrift_remove_queue(queue_id);
  return recv_sai_thrift_remove_queue();
}

void switch_sai_rpcClient::send_sai_thrift_remove_queue(const sai_thrift_object_id_t queue_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_queue", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_queue_pargs args;
  args.queue_id = &queue_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_queue()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_queue") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_queue_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_queue failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t queue_id)
{
  send_sai_thrift_get_queue_attribute(queue_id);
  recv_sai_thrift_get_queue_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_queue_attribute(const sai_thrift_object_id_t queue_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_queue_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_queue_attribute_pargs args;
  args.queue_id = &queue_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_queue_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_queue_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_queue_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_queue_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_queue_attribute(queue_id, thrift_attr);
  return recv_sai_thrift_set_queue_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_queue_attribute(const sai_thrift_object_id_t queue_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_queue_attribute_pargs args;
  args.queue_id = &queue_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_queue_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_queue_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_queue_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_queue_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_buffer_profile(thrift_attr_list);
  return recv_sai_thrift_create_buffer_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_buffer_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_buffer_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_buffer_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_buffer_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_buffer_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_buffer_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id)
{
  send_sai_thrift_remove_buffer_profile(buffer_profile_id);
  return recv_sai_thrift_remove_buffer_profile();
}

void switch_sai_rpcClient::send_sai_thrift_remove_buffer_profile(const sai_thrift_object_id_t buffer_profile_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_buffer_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_buffer_profile_pargs args;
  args.buffer_profile_id = &buffer_profile_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_buffer_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_buffer_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_buffer_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_buffer_profile failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t buffer_profile_id)
{
  send_sai_thrift_get_buffer_profile_attribute(buffer_profile_id);
  recv_sai_thrift_get_buffer_profile_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_buffer_profile_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_pargs args;
  args.buffer_profile_id = &buffer_profile_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_buffer_profile_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_buffer_profile_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_buffer_profile_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_buffer_profile_attribute(buffer_profile_id, thrift_attr);
  return recv_sai_thrift_set_buffer_profile_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_buffer_profile_attribute(const sai_thrift_object_id_t buffer_profile_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_buffer_profile_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_pargs args;
  args.buffer_profile_id = &buffer_profile_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_buffer_profile_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_buffer_profile_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_buffer_profile_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_pool_profile(thrift_attr_list);
  return recv_sai_thrift_create_pool_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_pool_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_pool_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_pool_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_pool_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_pool_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_pool_profile failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_priority_group(thrift_attr_list);
  return recv_sai_thrift_create_priority_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_priority_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_priority_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_priority_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_priority_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_priority_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_priority_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_priority_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id)
{
  send_sai_thrift_remove_priority_group(priority_group_id);
  return recv_sai_thrift_remove_priority_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_priority_group(const sai_thrift_object_id_t priority_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_priority_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_priority_group_pargs args;
  args.priority_group_id = &priority_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_priority_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_priority_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_priority_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_priority_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t priority_group_id)
{
  send_sai_thrift_get_priority_group_attribute(priority_group_id);
  recv_sai_thrift_get_priority_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_priority_group_attribute(const sai_thrift_object_id_t priority_group_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_priority_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_pargs args;
  args.priority_group_id = &priority_group_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_priority_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_priority_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_priority_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_priority_group_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_priority_group_attribute(pg_id, thrift_attr);
  return recv_sai_thrift_set_priority_group_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_priority_group_attribute(const sai_thrift_object_id_t pg_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_pargs args;
  args.pg_id = &pg_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_priority_group_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_priority_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_priority_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_priority_group_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_pg_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_pg_stats(pg_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_pg_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_pg_stats(const sai_thrift_object_id_t pg_id, const std::vector<sai_thrift_pg_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_pg_stats_pargs args;
  args.pg_id = &pg_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_pg_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_pg_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_pg_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_pg_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_wred_profile(thrift_attr_list);
  return recv_sai_thrift_create_wred_profile();
}

void switch_sai_rpcClient::send_sai_thrift_create_wred_profile(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_wred_profile_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_wred_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_wred_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_wred_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_wred_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id)
{
  send_sai_thrift_remove_wred_profile(wred_id);
  return recv_sai_thrift_remove_wred_profile();
}

void switch_sai_rpcClient::send_sai_thrift_remove_wred_profile(const sai_thrift_object_id_t wred_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_wred_profile_pargs args;
  args.wred_id = &wred_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_wred_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_wred_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_wred_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_wred_profile failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t wred_id)
{
  send_sai_thrift_get_wred_attribute_profile(wred_id);
  recv_sai_thrift_get_wred_attribute_profile(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_wred_attribute_profile(const sai_thrift_object_id_t wred_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_wred_attribute_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_pargs args;
  args.wred_id = &wred_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_wred_attribute_profile(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_wred_attribute_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_wred_attribute_profile failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_wred_attribute_profile(wred_id, thrift_attr);
  return recv_sai_thrift_set_wred_attribute_profile();
}

void switch_sai_rpcClient::send_sai_thrift_set_wred_attribute_profile(const sai_thrift_object_id_t wred_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_wred_attribute_profile", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_pargs args;
  args.wred_id = &wred_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_wred_attribute_profile()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_wred_attribute_profile") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_wred_attribute_profile failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_qos_map(thrift_attr_list);
  return recv_sai_thrift_create_qos_map();
}

void switch_sai_rpcClient::send_sai_thrift_create_qos_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_qos_map_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_qos_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_qos_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_qos_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_qos_map failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id)
{
  send_sai_thrift_remove_qos_map(qos_map_id);
  return recv_sai_thrift_remove_qos_map();
}

void switch_sai_rpcClient::send_sai_thrift_remove_qos_map(const sai_thrift_object_id_t qos_map_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_qos_map_pargs args;
  args.qos_map_id = &qos_map_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_qos_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_qos_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_qos_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_qos_map failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t qos_map_id)
{
  send_sai_thrift_get_qos_map_attribute(qos_map_id);
  recv_sai_thrift_get_qos_map_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_qos_map_attribute(const sai_thrift_object_id_t qos_map_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_qos_map_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_pargs args;
  args.qos_map_id = &qos_map_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_qos_map_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_qos_map_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_qos_map_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_qos_map_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_qos_map_attribute(qos_map_id, thrift_attr);
  return recv_sai_thrift_set_qos_map_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_qos_map_attribute(const sai_thrift_object_id_t qos_map_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_qos_map_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_pargs args;
  args.qos_map_id = &qos_map_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_qos_map_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_qos_map_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_qos_map_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_qos_map_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_l2mc_group(thrift_attr_list);
  return recv_sai_thrift_create_l2mc_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_l2mc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_l2mc_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_l2mc_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_l2mc_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_l2mc_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_l2mc_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_l2mc_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_remove_l2mc_group(grp_id);
  return recv_sai_thrift_remove_l2mc_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_l2mc_group(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_l2mc_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_l2mc_group_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_l2mc_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_l2mc_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_l2mc_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_l2mc_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_get_l2mc_group_attribute(grp_id);
  recv_sai_thrift_get_l2mc_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_l2mc_group_attribute(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_l2mc_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_l2mc_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_l2mc_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_l2mc_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_l2mc_group_member(thrift_attr_list);
  return recv_sai_thrift_create_l2mc_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_l2mc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_l2mc_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_l2mc_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_l2mc_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_l2mc_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_l2mc_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_remove_l2mc_group_member(member_id);
  return recv_sai_thrift_remove_l2mc_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_l2mc_group_member(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_l2mc_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_l2mc_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_l2mc_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_l2mc_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_l2mc_group_member_attribute(member_id, thrift_attr);
  return recv_sai_thrift_set_l2mc_group_member_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_l2mc_group_member_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_l2mc_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_l2mc_group_member_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_get_l2mc_group_member_attribute(member_id);
  recv_sai_thrift_get_l2mc_group_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_l2mc_group_member_attribute(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_l2mc_group_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_l2mc_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_l2mc_group_member_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_l2mc_entry(thrift_l2mc_entry, thrift_attr_list);
  return recv_sai_thrift_create_l2mc_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_l2mc_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_l2mc_entry_pargs args;
  args.thrift_l2mc_entry = &thrift_l2mc_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_l2mc_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_l2mc_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_l2mc_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_l2mc_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry)
{
  send_sai_thrift_remove_l2mc_entry(thrift_l2mc_entry);
  return recv_sai_thrift_remove_l2mc_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_l2mc_entry(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_l2mc_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_pargs args;
  args.thrift_l2mc_entry = &thrift_l2mc_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_l2mc_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_l2mc_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_l2mc_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_l2mc_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_l2mc_entry_attribute(thrift_l2mc_entry, thrift_attr);
  return recv_sai_thrift_set_l2mc_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_pargs args;
  args.thrift_l2mc_entry = &thrift_l2mc_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_l2mc_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_l2mc_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_l2mc_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_l2mc_entry_t& thrift_l2mc_entry)
{
  send_sai_thrift_get_l2mc_entry_attribute(thrift_l2mc_entry);
  recv_sai_thrift_get_l2mc_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_l2mc_entry_attribute(const sai_thrift_l2mc_entry_t& thrift_l2mc_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_pargs args;
  args.thrift_l2mc_entry = &thrift_l2mc_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_l2mc_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_l2mc_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_l2mc_entry_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_mcast_fdb_entry(thrift_mcast_fdb_entry, thrift_attr_list);
  return recv_sai_thrift_create_mcast_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_mcast_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_pargs args;
  args.thrift_mcast_fdb_entry = &thrift_mcast_fdb_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_mcast_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_mcast_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_mcast_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry)
{
  send_sai_thrift_remove_mcast_fdb_entry(thrift_mcast_fdb_entry);
  return recv_sai_thrift_remove_mcast_fdb_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_mcast_fdb_entry(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_pargs args;
  args.thrift_mcast_fdb_entry = &thrift_mcast_fdb_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_mcast_fdb_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_mcast_fdb_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_mcast_fdb_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry, thrift_attr);
  return recv_sai_thrift_set_mcast_fdb_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_pargs args;
  args.thrift_mcast_fdb_entry = &thrift_mcast_fdb_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_mcast_fdb_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_mcast_fdb_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_mcast_fdb_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry)
{
  send_sai_thrift_get_mcast_fdb_entry_attribute(thrift_mcast_fdb_entry);
  recv_sai_thrift_get_mcast_fdb_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_mcast_fdb_entry_attribute(const sai_thrift_mcast_fdb_entry_t& thrift_mcast_fdb_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_pargs args;
  args.thrift_mcast_fdb_entry = &thrift_mcast_fdb_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_mcast_fdb_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_mcast_fdb_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_mcast_fdb_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_ipmc_group(thrift_attr_list);
  return recv_sai_thrift_create_ipmc_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_ipmc_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_ipmc_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_ipmc_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_ipmc_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_ipmc_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_ipmc_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_ipmc_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_remove_ipmc_group(grp_id);
  return recv_sai_thrift_remove_ipmc_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_ipmc_group(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_ipmc_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_ipmc_group_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_ipmc_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_ipmc_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_ipmc_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_ipmc_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_get_ipmc_group_attribute(grp_id);
  recv_sai_thrift_get_ipmc_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_ipmc_group_attribute(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_ipmc_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_ipmc_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_ipmc_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_ipmc_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_ipmc_group_member(thrift_attr_list);
  return recv_sai_thrift_create_ipmc_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_ipmc_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_ipmc_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_ipmc_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_ipmc_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_ipmc_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_ipmc_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_remove_ipmc_group_member(member_id);
  return recv_sai_thrift_remove_ipmc_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_ipmc_group_member(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_ipmc_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_ipmc_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_ipmc_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_ipmc_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_ipmc_group_member_attribute(member_id, thrift_attr);
  return recv_sai_thrift_set_ipmc_group_member_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_ipmc_group_member_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_ipmc_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_ipmc_group_member_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_get_ipmc_group_member_attribute(member_id);
  recv_sai_thrift_get_ipmc_group_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_ipmc_group_member_attribute(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_ipmc_group_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_ipmc_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_ipmc_group_member_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_rpf_group(thrift_attr_list);
  return recv_sai_thrift_create_rpf_group();
}

void switch_sai_rpcClient::send_sai_thrift_create_rpf_group(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_rpf_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_rpf_group_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_rpf_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_rpf_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_rpf_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_rpf_group failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_remove_rpf_group(grp_id);
  return recv_sai_thrift_remove_rpf_group();
}

void switch_sai_rpcClient::send_sai_thrift_remove_rpf_group(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_rpf_group", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_rpf_group_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_rpf_group()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_rpf_group") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_rpf_group_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_rpf_group failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t grp_id)
{
  send_sai_thrift_get_rpf_group_attribute(grp_id);
  recv_sai_thrift_get_rpf_group_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_rpf_group_attribute(const sai_thrift_object_id_t grp_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_rpf_group_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_pargs args;
  args.grp_id = &grp_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_rpf_group_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_rpf_group_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_rpf_group_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_rpf_group_member(thrift_attr_list);
  return recv_sai_thrift_create_rpf_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_create_rpf_group_member(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_rpf_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_rpf_group_member_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_rpf_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_rpf_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_rpf_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_rpf_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_remove_rpf_group_member(member_id);
  return recv_sai_thrift_remove_rpf_group_member();
}

void switch_sai_rpcClient::send_sai_thrift_remove_rpf_group_member(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_rpf_group_member", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_rpf_group_member()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_rpf_group_member") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_rpf_group_member_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_rpf_group_member failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_rpf_group_member_attribute(member_id, thrift_attr);
  return recv_sai_thrift_set_rpf_group_member_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_rpf_group_member_attribute(const sai_thrift_object_id_t member_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_rpf_group_member_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_rpf_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_rpf_group_member_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t member_id)
{
  send_sai_thrift_get_rpf_group_member_attribute(member_id);
  recv_sai_thrift_get_rpf_group_member_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_rpf_group_member_attribute(const sai_thrift_object_id_t member_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_pargs args;
  args.member_id = &member_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_rpf_group_member_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_rpf_group_member_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_rpf_group_member_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_ipmc_entry(thrift_ipmc_entry, thrift_attr_list);
  return recv_sai_thrift_create_ipmc_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_ipmc_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_ipmc_entry_pargs args;
  args.thrift_ipmc_entry = &thrift_ipmc_entry;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_create_ipmc_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_ipmc_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_create_ipmc_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_ipmc_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry)
{
  send_sai_thrift_remove_ipmc_entry(thrift_ipmc_entry);
  return recv_sai_thrift_remove_ipmc_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_ipmc_entry(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_ipmc_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_pargs args;
  args.thrift_ipmc_entry = &thrift_ipmc_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_ipmc_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_ipmc_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_ipmc_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_ipmc_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_ipmc_entry_attribute(thrift_ipmc_entry, thrift_attr);
  return recv_sai_thrift_set_ipmc_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_pargs args;
  args.thrift_ipmc_entry = &thrift_ipmc_entry;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_ipmc_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_ipmc_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_ipmc_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_ipmc_entry_t& thrift_ipmc_entry)
{
  send_sai_thrift_get_ipmc_entry_attribute(thrift_ipmc_entry);
  recv_sai_thrift_get_ipmc_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_ipmc_entry_attribute(const sai_thrift_ipmc_entry_t& thrift_ipmc_entry)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_pargs args;
  args.thrift_ipmc_entry = &thrift_ipmc_entry;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_ipmc_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_ipmc_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_ipmc_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_samplepacket(thrift_attr_list);
  return recv_sai_thrift_create_samplepacket();
}

void switch_sai_rpcClient::send_sai_thrift_create_samplepacket(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_samplepacket", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_samplepacket_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_samplepacket()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_samplepacket") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_samplepacket_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_samplepacket failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id)
{
  send_sai_thrift_remove_samplepacket(samplepacket_id);
  return recv_sai_thrift_remove_samplepacket();
}

void switch_sai_rpcClient::send_sai_thrift_remove_samplepacket(const sai_thrift_object_id_t samplepacket_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_samplepacket", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_samplepacket_pargs args;
  args.samplepacket_id = &samplepacket_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_samplepacket()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_samplepacket") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_samplepacket_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_samplepacket failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t samplepacket_id)
{
  send_sai_thrift_get_samplepacket_attribute(samplepacket_id);
  recv_sai_thrift_get_samplepacket_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_samplepacket_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_pargs args;
  args.samplepacket_id = &samplepacket_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_samplepacket_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_samplepacket_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_samplepacket_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_samplepacket_attribute(samplepacket_id, thrift_attr);
  return recv_sai_thrift_set_samplepacket_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_samplepacket_attribute(const sai_thrift_object_id_t samplepacket_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_samplepacket_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_pargs args;
  args.samplepacket_id = &samplepacket_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_samplepacket_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_samplepacket_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_samplepacket_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_tunnel_map_entry(thrift_attr_list);
  return recv_sai_thrift_create_tunnel_map_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_tunnel_map_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_tunnel_map_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_tunnel_map_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_tunnel_map_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_tunnel_map_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id)
{
  send_sai_thrift_remove_tunnel_map_entry(tunnel_map_entry_id);
  return recv_sai_thrift_remove_tunnel_map_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_tunnel_map_entry(const sai_thrift_object_id_t tunnel_map_entry_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_tunnel_map_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_pargs args;
  args.tunnel_map_entry_id = &tunnel_map_entry_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_tunnel_map_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_tunnel_map_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_tunnel_map_entry failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_entry_id)
{
  send_sai_thrift_get_tunnel_map_entry_attribute(tunnel_map_entry_id);
  recv_sai_thrift_get_tunnel_map_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_pargs args;
  args.tunnel_map_entry_id = &tunnel_map_entry_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_tunnel_map_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_tunnel_map_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_tunnel_map_entry_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_tunnel_map_entry_attribute(tunnel_map_entry_id, thrift_attr);
  return recv_sai_thrift_set_tunnel_map_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_tunnel_map_entry_attribute(const sai_thrift_object_id_t tunnel_map_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_pargs args;
  args.tunnel_map_entry_id = &tunnel_map_entry_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_tunnel_map_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_tunnel_map_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_tunnel_map_entry_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_tunnel_map(thrift_attr_list);
  return recv_sai_thrift_create_tunnel_map();
}

void switch_sai_rpcClient::send_sai_thrift_create_tunnel_map(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_tunnel_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_tunnel_map_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_tunnel_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_tunnel_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_tunnel_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_tunnel_map failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id)
{
  send_sai_thrift_remove_tunnel_map(tunnel_map_id);
  return recv_sai_thrift_remove_tunnel_map();
}

void switch_sai_rpcClient::send_sai_thrift_remove_tunnel_map(const sai_thrift_object_id_t tunnel_map_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_tunnel_map", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_tunnel_map_pargs args;
  args.tunnel_map_id = &tunnel_map_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_tunnel_map()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_tunnel_map") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_tunnel_map_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_tunnel_map failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_map_id)
{
  send_sai_thrift_get_tunnel_map_attribute(tunnel_map_id);
  recv_sai_thrift_get_tunnel_map_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_tunnel_map_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_pargs args;
  args.tunnel_map_id = &tunnel_map_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_tunnel_map_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_tunnel_map_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_tunnel_map_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_tunnel_map_attribute(tunnel_map_id, thrift_attr);
  return recv_sai_thrift_set_tunnel_map_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_tunnel_map_attribute(const sai_thrift_object_id_t tunnel_map_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_tunnel_map_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_pargs args;
  args.tunnel_map_id = &tunnel_map_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_tunnel_map_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_tunnel_map_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_tunnel_map_attribute failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_tunnel(thrift_attr_list);
  return recv_sai_thrift_create_tunnel();
}

void switch_sai_rpcClient::send_sai_thrift_create_tunnel(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_tunnel", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_tunnel_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_tunnel()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_tunnel") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_tunnel_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_tunnel failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id)
{
  send_sai_thrift_remove_tunnel(tunnel_id);
  return recv_sai_thrift_remove_tunnel();
}

void switch_sai_rpcClient::send_sai_thrift_remove_tunnel(const sai_thrift_object_id_t tunnel_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_tunnel", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_tunnel_pargs args;
  args.tunnel_id = &tunnel_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_tunnel()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_tunnel") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_tunnel_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_tunnel failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_tunnel_attribute(tunnel_id, thrift_attr_ids);
  recv_sai_thrift_get_tunnel_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_tunnel_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_pargs args;
  args.tunnel_id = &tunnel_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_tunnel_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_tunnel_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_tunnel_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_tunnel_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_tunnel_attribute(tunnel_id, thrift_attr);
  return recv_sai_thrift_set_tunnel_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_tunnel_attribute(const sai_thrift_object_id_t tunnel_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_tunnel_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_pargs args;
  args.tunnel_id = &tunnel_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_tunnel_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_tunnel_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_tunnel_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_tunnel_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return, const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_get_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
  recv_sai_thrift_get_tunnel_stats(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_tunnel_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_tunnel_stats_pargs args;
  args.tunnel_id = &tunnel_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_tunnel_stats(std::vector<int64_t> & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_tunnel_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_tunnel_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_tunnel_stats failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  send_sai_thrift_clear_tunnel_stats(tunnel_id, counter_ids, number_of_counters);
  return recv_sai_thrift_clear_tunnel_stats();
}

void switch_sai_rpcClient::send_sai_thrift_clear_tunnel_stats(const sai_thrift_object_id_t tunnel_id, const std::vector<sai_thrift_queue_stat_counter_t> & counter_ids, const int32_t number_of_counters)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_tunnel_stats", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_pargs args;
  args.tunnel_id = &tunnel_id;
  args.counter_ids = &counter_ids;
  args.number_of_counters = &number_of_counters;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_clear_tunnel_stats()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_tunnel_stats") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_clear_tunnel_stats_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_tunnel_stats failed: unknown result");
}

sai_thrift_object_id_t switch_sai_rpcClient::sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  send_sai_thrift_create_tunnel_term_table_entry(thrift_attr_list);
  return recv_sai_thrift_create_tunnel_term_table_entry();
}

void switch_sai_rpcClient::send_sai_thrift_create_tunnel_term_table_entry(const std::vector<sai_thrift_attribute_t> & thrift_attr_list)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_pargs args;
  args.thrift_attr_list = &thrift_attr_list;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_object_id_t switch_sai_rpcClient::recv_sai_thrift_create_tunnel_term_table_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_create_tunnel_term_table_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_object_id_t _return;
  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_create_tunnel_term_table_entry failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id)
{
  send_sai_thrift_remove_tunnel_term_table_entry(tunnel_term_table_entry_id);
  return recv_sai_thrift_remove_tunnel_term_table_entry();
}

void switch_sai_rpcClient::send_sai_thrift_remove_tunnel_term_table_entry(const sai_thrift_object_id_t tunnel_term_table_entry_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_pargs args;
  args.tunnel_term_table_entry_id = &tunnel_term_table_entry_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_remove_tunnel_term_table_entry()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_remove_tunnel_term_table_entry") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_remove_tunnel_term_table_entry failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids)
{
  send_sai_thrift_get_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr_ids);
  recv_sai_thrift_get_tunnel_term_table_entry_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const std::vector<int32_t> & thrift_attr_ids)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_pargs args;
  args.tunnel_term_table_entry_id = &tunnel_term_table_entry_id;
  args.thrift_attr_ids = &thrift_attr_ids;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_tunnel_term_table_entry_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_tunnel_term_table_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_tunnel_term_table_entry_attribute failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  send_sai_thrift_set_tunnel_term_table_entry_attribute(tunnel_term_table_entry_id, thrift_attr);
  return recv_sai_thrift_set_tunnel_term_table_entry_attribute();
}

void switch_sai_rpcClient::send_sai_thrift_set_tunnel_term_table_entry_attribute(const sai_thrift_object_id_t tunnel_term_table_entry_id, const sai_thrift_attribute_t& thrift_attr)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_pargs args;
  args.tunnel_term_table_entry_id = &tunnel_term_table_entry_id;
  args.thrift_attr = &thrift_attr;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_set_tunnel_term_table_entry_attribute()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_set_tunnel_term_table_entry_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_set_tunnel_term_table_entry_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return, const sai_thrift_object_id_t switch_id)
{
  send_sai_thrift_get_cpu_packet_attribute(switch_id);
  recv_sai_thrift_get_cpu_packet_attribute(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_cpu_packet_attribute(const sai_thrift_object_id_t switch_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_cpu_packet_attribute", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_pargs args;
  args.switch_id = &switch_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_cpu_packet_attribute(sai_thrift_attribute_list_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_cpu_packet_attribute") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_cpu_packet_attribute failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return)
{
  send_sai_thrift_get_cpu_packet_count();
  recv_sai_thrift_get_cpu_packet_count(_return);
}

void switch_sai_rpcClient::send_sai_thrift_get_cpu_packet_count()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_get_cpu_packet_count", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_get_cpu_packet_count(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_get_cpu_packet_count") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_get_cpu_packet_count_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_get_cpu_packet_count failed: unknown result");
}

void switch_sai_rpcClient::sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return)
{
  send_sai_thrift_clear_cpu_packet_info();
  recv_sai_thrift_clear_cpu_packet_info(_return);
}

void switch_sai_rpcClient::send_sai_thrift_clear_cpu_packet_info()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_clear_cpu_packet_info", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void switch_sai_rpcClient::recv_sai_thrift_clear_cpu_packet_info(sai_thrift_result_t& _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_clear_cpu_packet_info") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_clear_cpu_packet_info failed: unknown result");
}

sai_thrift_status_t switch_sai_rpcClient::sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level)
{
  send_sai_thrift_log_set(sai_api_id, log_level);
  return recv_sai_thrift_log_set();
}

void switch_sai_rpcClient::send_sai_thrift_log_set(const int32_t sai_api_id, const int32_t log_level)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("sai_thrift_log_set", ::apache::thrift::protocol::T_CALL, cseqid);

  switch_sai_rpc_sai_thrift_log_set_pargs args;
  args.sai_api_id = &sai_api_id;
  args.log_level = &log_level;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

sai_thrift_status_t switch_sai_rpcClient::recv_sai_thrift_log_set()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("sai_thrift_log_set") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  sai_thrift_status_t _return;
  switch_sai_rpc_sai_thrift_log_set_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "sai_thrift_log_set failed: unknown result");
}

bool switch_sai_rpcProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void switch_sai_rpcProcessor::process_sai_thrift_set_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
  }

  switch_sai_rpc_sai_thrift_set_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_port_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_port_attribute(args.port_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
  }

  switch_sai_rpc_sai_thrift_get_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_attribute_result result;
  try {
    iface_->sai_thrift_get_port_attribute(result.success, args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
  }

  switch_sai_rpc_sai_thrift_get_port_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_stats_result result;
  try {
    iface_->sai_thrift_get_port_stats(result.success, args.port_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_port_all_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_port_all_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
  }

  switch_sai_rpc_sai_thrift_clear_port_all_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_port_all_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_port_all_stats(args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_port_all_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_port_all_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_create_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_fdb_entry(args.thrift_fdb_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_delete_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_delete_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_delete_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_delete_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_delete_fdb_entry(args.thrift_fdb_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_delete_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_delete_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_flush_fdb_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_flush_fdb_entries", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
  }

  switch_sai_rpc_sai_thrift_flush_fdb_entries_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries", bytes);
  }

  switch_sai_rpc_sai_thrift_flush_fdb_entries_result result;
  try {
    result.success = iface_->sai_thrift_flush_fdb_entries(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries");
  }

  oprot->writeMessageBegin("sai_thrift_flush_fdb_entries", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_flush_fdb_entries", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_fdb_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_fdb_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_fdb_entry_attribute(args.thrift_fdb_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_fdb_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_fdb_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_fdb_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_fdb_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_fdb_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_fdb_entry_attribute(result.success, args.thrift_fdb_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_fdb_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_fdb_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_fdb_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_vlan", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_vlan");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
  }

  switch_sai_rpc_sai_thrift_create_vlan_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan", bytes);
  }

  switch_sai_rpc_sai_thrift_create_vlan_result result;
  try {
    result.success = iface_->sai_thrift_create_vlan(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan");
  }

  oprot->writeMessageBegin("sai_thrift_create_vlan", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_vlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_vlan", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_vlan");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan");
  }

  switch_sai_rpc_sai_thrift_remove_vlan_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_vlan_result result;
  try {
    result.success = iface_->sai_thrift_remove_vlan(args.vlan_oid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_vlan");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_vlan", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan");
  }

  oprot->writeMessageBegin("sai_thrift_remove_vlan", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
  }

  switch_sai_rpc_sai_thrift_get_vlan_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_stats_result result;
  try {
    iface_->sai_thrift_get_vlan_stats(result.success, args.vlan_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_vlan_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
  }

  switch_sai_rpc_sai_thrift_create_vlan_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_vlan_member_result result;
  try {
    result.success = iface_->sai_thrift_create_vlan_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_vlan_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_vlan_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_member_attribute_result result;
  try {
    iface_->sai_thrift_get_vlan_member_attribute(result.success, args.vlan_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_vlan_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_vlan_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
  }

  switch_sai_rpc_sai_thrift_remove_vlan_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_vlan_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_vlan_member(args.vlan_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_vlan_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_vlan_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_vlan_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute");
  }

  switch_sai_rpc_sai_thrift_set_vlan_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_vlan_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_vlan_attribute(args.vlan_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_vlan_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_vlan_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_vlan_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
  }

  switch_sai_rpc_sai_thrift_get_vlan_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_attribute_result result;
  try {
    iface_->sai_thrift_get_vlan_attribute(result.success, args.vlan_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_vlan_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_vlan_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_id");
  }

  switch_sai_rpc_sai_thrift_get_vlan_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_vlan_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_vlan_id_result result;
  try {
    iface_->sai_thrift_get_vlan_id(result.success, args.vlan_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_vlan_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_vlan_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_vlan_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_vlan_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_virtual_router", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
  }

  switch_sai_rpc_sai_thrift_create_virtual_router_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router", bytes);
  }

  switch_sai_rpc_sai_thrift_create_virtual_router_result result;
  try {
    result.success = iface_->sai_thrift_create_virtual_router(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router");
  }

  oprot->writeMessageBegin("sai_thrift_create_virtual_router", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_virtual_router", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_virtual_router(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_virtual_router", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
  }

  switch_sai_rpc_sai_thrift_remove_virtual_router_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_virtual_router_result result;
  try {
    result.success = iface_->sai_thrift_remove_virtual_router(args.vr_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router");
  }

  oprot->writeMessageBegin("sai_thrift_remove_virtual_router", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_virtual_router", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_virtual_router_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute");
  }

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_virtual_router_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_virtual_router_attribute(args.vr_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_virtual_router_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_virtual_router_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_virtual_router_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_virtual_router_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_virtual_router_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute");
  }

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_virtual_router_attribute_result result;
  try {
    iface_->sai_thrift_get_virtual_router_attribute(result.success, args.vr_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_virtual_router_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_virtual_router_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_virtual_router_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_route", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_route");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_route");
  }

  switch_sai_rpc_sai_thrift_create_route_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_route", bytes);
  }

  switch_sai_rpc_sai_thrift_create_route_result result;
  try {
    result.success = iface_->sai_thrift_create_route(args.thrift_route_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_route");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_route");
  }

  oprot->writeMessageBegin("sai_thrift_create_route", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_route", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_route(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_route", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_route");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_route");
  }

  switch_sai_rpc_sai_thrift_remove_route_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_route", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_route_result result;
  try {
    result.success = iface_->sai_thrift_remove_route(args.thrift_route_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_route");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_route");
  }

  oprot->writeMessageBegin("sai_thrift_remove_route", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_route", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_route_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_route_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_route_attribute");
  }

  switch_sai_rpc_sai_thrift_set_route_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_route_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_route_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_route_attribute(args.thrift_route_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_route_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_route_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_route_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_route_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_route_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_route_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_route_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_route_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_route_attribute");
  }

  switch_sai_rpc_sai_thrift_get_route_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_route_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_route_attribute_result result;
  try {
    iface_->sai_thrift_get_route_attribute(result.success, args.thrift_route_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_route_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_route_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_route_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_route_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_route_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_router_interface", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_router_interface");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
  }

  switch_sai_rpc_sai_thrift_create_router_interface_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_router_interface", bytes);
  }

  switch_sai_rpc_sai_thrift_create_router_interface_result result;
  try {
    result.success = iface_->sai_thrift_create_router_interface(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_router_interface");
  }

  oprot->writeMessageBegin("sai_thrift_create_router_interface", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_router_interface", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_router_interface(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_router_interface", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
  }

  switch_sai_rpc_sai_thrift_remove_router_interface_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_router_interface_result result;
  try {
    result.success = iface_->sai_thrift_remove_router_interface(args.rif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface");
  }

  oprot->writeMessageBegin("sai_thrift_remove_router_interface", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_router_interface", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_router_interface_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute");
  }

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_router_interface_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_router_interface_attribute(args.rif_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_router_interface_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_router_interface_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_router_interface_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_router_interface_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_router_interface_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute");
  }

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_router_interface_attribute_result result;
  try {
    iface_->sai_thrift_get_router_interface_attribute(result.success, args.rif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_router_interface_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_router_interface_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_router_interface_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_next_hop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_next_hop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
  }

  switch_sai_rpc_sai_thrift_create_next_hop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop", bytes);
  }

  switch_sai_rpc_sai_thrift_create_next_hop_result result;
  try {
    result.success = iface_->sai_thrift_create_next_hop(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop");
  }

  oprot->writeMessageBegin("sai_thrift_create_next_hop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop(args.next_hop_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_next_hop_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute");
  }

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_next_hop_attribute_result result;
  try {
    iface_->sai_thrift_get_next_hop_attribute(result.success, args.next_hop_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_next_hop_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_next_hop_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_next_hop_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_result result;
  try {
    result.success = iface_->sai_thrift_create_next_hop_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_next_hop_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop_group(args.nhop_group_oid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_next_hop_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute");
  }

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_next_hop_group_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_next_hop_group_attribute(args.nhop_group_oid, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_next_hop_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_next_hop_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_next_hop_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_next_hop_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_next_hop_group_attribute_result result;
  try {
    iface_->sai_thrift_get_next_hop_group_attribute(result.success, args.nhop_group_oid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_next_hop_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_next_hop_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_next_hop_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member");
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_next_hop_group_member_result result;
  try {
    result.success = iface_->sai_thrift_create_next_hop_group_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_next_hop_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_next_hop_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_next_hop_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_next_hop_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_next_hop_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member");
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_next_hop_group_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_next_hop_group_member(args.nhop_group_member_oid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_next_hop_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_next_hop_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_next_hop_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_next_hop_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_next_hop_group_member_attribute_result result;
  try {
    iface_->sai_thrift_get_next_hop_group_member_attribute(result.success, args.nhop_group_member_oid);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_next_hop_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_next_hop_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_lag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_lag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_lag");
  }

  switch_sai_rpc_sai_thrift_create_lag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_lag", bytes);
  }

  switch_sai_rpc_sai_thrift_create_lag_result result;
  try {
    result.success = iface_->sai_thrift_create_lag(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_lag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag");
  }

  oprot->writeMessageBegin("sai_thrift_create_lag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_lag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_lag", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_lag");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
  }

  switch_sai_rpc_sai_thrift_remove_lag_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_lag_result result;
  try {
    result.success = iface_->sai_thrift_remove_lag(args.lag_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag");
  }

  oprot->writeMessageBegin("sai_thrift_remove_lag", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_lag_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute");
  }

  switch_sai_rpc_sai_thrift_set_lag_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_lag_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_lag_attribute(args.lag_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_lag_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_lag_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_lag_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_lag_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_lag_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute");
  }

  switch_sai_rpc_sai_thrift_get_lag_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_lag_attribute_result result;
  try {
    iface_->sai_thrift_get_lag_attribute(result.success, args.lag_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_lag_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_lag_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_lag_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_lag_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_lag_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
  }

  switch_sai_rpc_sai_thrift_create_lag_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_lag_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_lag_member_result result;
  try {
    result.success = iface_->sai_thrift_create_lag_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_lag_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_lag_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_lag_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_lag_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
  }

  switch_sai_rpc_sai_thrift_remove_lag_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_lag_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_lag_member(args.lag_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_lag_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_lag_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_lag_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute");
  }

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_lag_member_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_lag_member_attribute(args.lag_member_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_lag_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_lag_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_lag_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_lag_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_lag_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_lag_member_attribute_result result;
  try {
    iface_->sai_thrift_get_lag_member_attribute(result.success, args.lag_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_lag_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_lag_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_lag_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_stp_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
  }

  switch_sai_rpc_sai_thrift_create_stp_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_stp_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_stp_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_stp_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_stp_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_stp_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_stp_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
  }

  switch_sai_rpc_sai_thrift_remove_stp_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_stp_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_stp_entry(args.stp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_stp_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_stp_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_stp_port_state", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
  }

  switch_sai_rpc_sai_thrift_set_stp_port_state_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state", bytes);
  }

  switch_sai_rpc_sai_thrift_set_stp_port_state_result result;
  try {
    result.success = iface_->sai_thrift_set_stp_port_state(args.stp_id, args.port_id, args.stp_port_state);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state");
  }

  oprot->writeMessageBegin("sai_thrift_set_stp_port_state", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_stp_port_state", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_stp_port_state(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_stp_port_state", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
  }

  switch_sai_rpc_sai_thrift_get_stp_port_state_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state", bytes);
  }

  switch_sai_rpc_sai_thrift_get_stp_port_state_result result;
  try {
    result.success = iface_->sai_thrift_get_stp_port_state(args.stp_id, args.port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state");
  }

  oprot->writeMessageBegin("sai_thrift_get_stp_port_state", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_stp_port_state", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_neighbor_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
  }

  switch_sai_rpc_sai_thrift_create_neighbor_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_neighbor_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_neighbor_entry(args.thrift_neighbor_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_neighbor_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_neighbor_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_neighbor_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
  }

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_neighbor_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_neighbor_entry(args.thrift_neighbor_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_neighbor_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_neighbor_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_all_neighbor_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_all_neighbor_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry");
  }

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_all_neighbor_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_all_neighbor_entry();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_all_neighbor_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_all_neighbor_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_all_neighbor_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_neighbor_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_neighbor_entry_attribute(args.thrift_neighbor_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_neighbor_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_neighbor_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_neighbor_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_neighbor_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_neighbor_entry_attribute(result.success, args.thrift_neighbor_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_neighbor_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_neighbor_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_switch_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
  }

  switch_sai_rpc_sai_thrift_get_switch_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_switch_attribute_result result;
  try {
    iface_->sai_thrift_get_switch_attribute(result.success, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_switch_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_switch_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_list_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_list_by_front_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
  }

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_list_by_front_port_result result;
  try {
    iface_->sai_thrift_get_port_list_by_front_port(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_list_by_front_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_list_by_front_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_cpu_port_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_cpu_port_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
  }

  switch_sai_rpc_sai_thrift_get_cpu_port_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_cpu_port_id_result result;
  try {
    result.success = iface_->sai_thrift_get_cpu_port_id();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_cpu_port_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_port_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
  }

  switch_sai_rpc_sai_thrift_get_default_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_get_default_trap_group();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_router_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_router_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
  }

  switch_sai_rpc_sai_thrift_get_default_router_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_router_id_result result;
  try {
    result.success = iface_->sai_thrift_get_default_router_id();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_router_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_router_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_1q_bridge_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_1q_bridge_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id");
  }

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_1q_bridge_id_result result;
  try {
    result.success = iface_->sai_thrift_get_default_1q_bridge_id();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_1q_bridge_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_1q_bridge_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_1q_bridge_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_default_vlan_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_default_vlan_id", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id");
  }

  switch_sai_rpc_sai_thrift_get_default_vlan_id_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id", bytes);
  }

  switch_sai_rpc_sai_thrift_get_default_vlan_id_result result;
  try {
    iface_->sai_thrift_get_default_vlan_id(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_default_vlan_id", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id");
  }

  oprot->writeMessageBegin("sai_thrift_get_default_vlan_id", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_default_vlan_id", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_port_id_by_front_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_port_id_by_front_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
  }

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port", bytes);
  }

  switch_sai_rpc_sai_thrift_get_port_id_by_front_port_result result;
  try {
    result.success = iface_->sai_thrift_get_port_id_by_front_port(args.port_name);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port");
  }

  oprot->writeMessageBegin("sai_thrift_get_port_id_by_front_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_port_id_by_front_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_switch_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_switch_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
  }

  switch_sai_rpc_sai_thrift_set_switch_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_switch_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_switch_attribute(args.attribute);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_switch_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_switch_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_switch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_switch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_switch");
  }

  switch_sai_rpc_sai_thrift_create_switch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_switch", bytes);
  }

  switch_sai_rpc_sai_thrift_create_switch_result result;
  try {
    result.success = iface_->sai_thrift_create_switch();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_switch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_switch");
  }

  oprot->writeMessageBegin("sai_thrift_create_switch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_switch", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_switch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_switch", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_switch");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_switch");
  }

  switch_sai_rpc_sai_thrift_remove_switch_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_switch", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_switch_result result;
  try {
    result.success = iface_->sai_thrift_remove_switch();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_switch");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_switch", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_switch");
  }

  oprot->writeMessageBegin("sai_thrift_remove_switch", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_switch", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_bridge_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
  }

  switch_sai_rpc_sai_thrift_create_bridge_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port", bytes);
  }

  switch_sai_rpc_sai_thrift_create_bridge_port_result result;
  try {
    iface_->sai_thrift_create_bridge_port(result.success, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port");
  }

  oprot->writeMessageBegin("sai_thrift_create_bridge_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_bridge_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_bridge_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
  }

  switch_sai_rpc_sai_thrift_remove_bridge_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_bridge_port_result result;
  try {
    result.success = iface_->sai_thrift_remove_bridge_port(args.bridge_port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port");
  }

  oprot->writeMessageBegin("sai_thrift_remove_bridge_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge_port", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_bridge_port_list", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list");
  }

  switch_sai_rpc_sai_thrift_get_bridge_port_list_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list", bytes);
  }

  switch_sai_rpc_sai_thrift_get_bridge_port_list_result result;
  try {
    iface_->sai_thrift_get_bridge_port_list(result.success, args.bridge_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_bridge_port_list", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list");
  }

  oprot->writeMessageBegin("sai_thrift_get_bridge_port_list", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_list", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_bridge_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute");
  }

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_bridge_port_attribute_result result;
  try {
    iface_->sai_thrift_get_bridge_port_attribute(result.success, args.bridge_port_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_bridge_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_bridge_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_bridge_port_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_bridge_port_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute");
  }

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_bridge_port_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_bridge_port_attribute(args.bridge_port_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_bridge_port_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_bridge_port_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_bridge_port_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_bridge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_bridge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
  }

  switch_sai_rpc_sai_thrift_create_bridge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_bridge", bytes);
  }

  switch_sai_rpc_sai_thrift_create_bridge_result result;
  try {
    iface_->sai_thrift_create_bridge(result.success, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge");
  }

  oprot->writeMessageBegin("sai_thrift_create_bridge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_bridge", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_bridge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_bridge", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_bridge");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
  }

  switch_sai_rpc_sai_thrift_remove_bridge_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_bridge", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_bridge_result result;
  try {
    result.success = iface_->sai_thrift_remove_bridge(args.bridge_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge");
  }

  oprot->writeMessageBegin("sai_thrift_remove_bridge", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_bridge", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_bridge_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute");
  }

  switch_sai_rpc_sai_thrift_get_bridge_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_bridge_attribute_result result;
  try {
    iface_->sai_thrift_get_bridge_attribute(result.success, args.bridge_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_bridge_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_bridge_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_bridge_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_bridge_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_bridge_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute");
  }

  switch_sai_rpc_sai_thrift_set_bridge_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_bridge_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_bridge_attribute(args.bridge_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_bridge_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_bridge_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_bridge_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
  }

  switch_sai_rpc_sai_thrift_create_hostif_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif(args.thrift_hif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_hostif_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute");
  }

  switch_sai_rpc_sai_thrift_get_hostif_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_hostif_attribute_result result;
  try {
    iface_->sai_thrift_get_hostif_attribute(result.success, args.thrift_hif_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_hostif_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_hostif_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute");
  }

  switch_sai_rpc_sai_thrift_set_hostif_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_attribute(args.thrift_hif_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif_table_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry");
  }

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_table_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif_table_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif_table_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif_table_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_table_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif_table_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_table_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif_table_entry(args.thrift_hostif_table_entry_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif_table_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif_table_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_table_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_hostif_table_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_hostif_table_entry_attribute(result.success, args.thrift_hostif_table_entry_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_hostif_table_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_table_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_table_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_table_entry_attribute(args.thrift_hostif_table_entry_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_table_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_table_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif_trap_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif_trap_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif_trap_group(args.thrift_hostif_trap_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif_trap_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_hostif_trap_group_attribute_result result;
  try {
    iface_->sai_thrift_get_hostif_trap_group_attribute(result.success, args.thrift_hostif_trap_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_hostif_trap_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute");
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_group_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_trap_group_attribute(args.thrift_hostif_trap_group_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_trap_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hostif_trap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hostif_trap_result result;
  try {
    result.success = iface_->sai_thrift_create_hostif_trap(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap");
  }

  oprot->writeMessageBegin("sai_thrift_create_hostif_trap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hostif_trap", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hostif_trap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hostif_trap", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hostif_trap_result result;
  try {
    result.success = iface_->sai_thrift_remove_hostif_trap(args.thrift_hostif_trap_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hostif_trap", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hostif_trap", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_hostif_trap_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute");
  }

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_hostif_trap_attribute_result result;
  try {
    iface_->sai_thrift_get_hostif_trap_attribute(result.success, args.thrift_hostif_trap_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_hostif_trap_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_hostif_trap_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_hostif_trap_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hostif_trap_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hostif_trap_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute");
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hostif_trap_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_hostif_trap_attribute(args.thrift_hostif_trap_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hostif_trap_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_hostif_trap_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hostif_trap_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_table", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_table");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
  }

  switch_sai_rpc_sai_thrift_create_acl_table_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_table_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_table(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_table", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_acl_table", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_acl_table");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table");
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_result result;
  try {
    result.success = iface_->sai_thrift_remove_acl_table(args.acl_table_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_acl_table", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table");
  }

  oprot->writeMessageBegin("sai_thrift_remove_acl_table", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_table_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_table_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_table_attribute(result.success, args.acl_table_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_table_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_table_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
  }

  switch_sai_rpc_sai_thrift_create_acl_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_acl_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_acl_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry");
  }

  switch_sai_rpc_sai_thrift_remove_acl_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_acl_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_acl_entry(args.acl_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_acl_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_acl_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_acl_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_acl_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_acl_entry_attribute(args.acl_entry_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_acl_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_acl_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_acl_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_entry_attribute(result.success, args.acl_entry_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_table_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group");
  }

  switch_sai_rpc_sai_thrift_create_acl_table_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_table_group_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_table_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_table_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_table_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_acl_table_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group");
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_acl_table_group(args.acl_table_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_acl_table_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_acl_table_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_table_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_table_group_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_table_group_attribute(result.success, args.acl_table_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_table_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_table_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_table_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member");
  }

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_table_group_member_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_table_group_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_table_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_table_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_table_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_acl_table_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_acl_table_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member");
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_acl_table_group_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_acl_table_group_member(args.acl_table_group_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_acl_table_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_acl_table_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_table_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_table_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_table_group_member_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_table_group_member_attribute(result.success, args.acl_table_group_member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_table_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_table_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_acl_counter", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
  }

  switch_sai_rpc_sai_thrift_create_acl_counter_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter", bytes);
  }

  switch_sai_rpc_sai_thrift_create_acl_counter_result result;
  try {
    result.success = iface_->sai_thrift_create_acl_counter(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter");
  }

  oprot->writeMessageBegin("sai_thrift_create_acl_counter", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_acl_counter", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_acl_counter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_acl_counter", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter");
  }

  switch_sai_rpc_sai_thrift_remove_acl_counter_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_acl_counter_result result;
  try {
    result.success = iface_->sai_thrift_remove_acl_counter(args.acl_counter_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_acl_counter", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter");
  }

  oprot->writeMessageBegin("sai_thrift_remove_acl_counter", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_acl_counter", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_acl_counter_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_acl_counter_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
  }

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_acl_counter_attribute_result result;
  try {
    iface_->sai_thrift_get_acl_counter_attribute(result.success, args.acl_counter_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_acl_counter_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_acl_counter_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_hash", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_hash");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_hash");
  }

  switch_sai_rpc_sai_thrift_create_hash_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_hash", bytes);
  }

  switch_sai_rpc_sai_thrift_create_hash_result result;
  try {
    result.success = iface_->sai_thrift_create_hash(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_hash");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_hash", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_hash");
  }

  oprot->writeMessageBegin("sai_thrift_create_hash", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_hash", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_hash(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_hash", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_hash");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_hash");
  }

  switch_sai_rpc_sai_thrift_remove_hash_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_hash", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_hash_result result;
  try {
    result.success = iface_->sai_thrift_remove_hash(args.hash_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_hash");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_hash", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hash");
  }

  oprot->writeMessageBegin("sai_thrift_remove_hash", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_hash", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_hash_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute");
  }

  switch_sai_rpc_sai_thrift_set_hash_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_hash_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_hash_attribute(args.thrift_hash_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_hash_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_hash_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_hash_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_hash_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_hash_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute");
  }

  switch_sai_rpc_sai_thrift_get_hash_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_hash_attribute_result result;
  try {
    iface_->sai_thrift_get_hash_attribute(result.success, args.thrift_hash_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_hash_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_hash_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_hash_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_udf_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_udf_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_udf_group");
  }

  switch_sai_rpc_sai_thrift_create_udf_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_udf_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_udf_group_result result;
  try {
    result.success = iface_->sai_thrift_create_udf_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_udf_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_udf_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_udf_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_udf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_udf_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_udf_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf_group");
  }

  switch_sai_rpc_sai_thrift_remove_udf_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_udf_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_udf_group(args.udf_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_udf_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_udf_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_udf_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_udf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_udf_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_udf_group_attribute_result result;
  try {
    iface_->sai_thrift_get_udf_group_attribute(result.success, args.thrift_udf_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_udf_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_udf_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_udf_match", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_udf_match");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_udf_match");
  }

  switch_sai_rpc_sai_thrift_create_udf_match_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_udf_match", bytes);
  }

  switch_sai_rpc_sai_thrift_create_udf_match_result result;
  try {
    result.success = iface_->sai_thrift_create_udf_match(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_udf_match");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_udf_match", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf_match");
  }

  oprot->writeMessageBegin("sai_thrift_create_udf_match", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf_match", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_udf_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_udf_match", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_udf_match");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf_match");
  }

  switch_sai_rpc_sai_thrift_remove_udf_match_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf_match", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_udf_match_result result;
  try {
    result.success = iface_->sai_thrift_remove_udf_match(args.udf_match_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_udf_match");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_udf_match", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf_match");
  }

  oprot->writeMessageBegin("sai_thrift_remove_udf_match", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf_match", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_udf_match_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_udf_match_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute");
  }

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_udf_match_attribute_result result;
  try {
    iface_->sai_thrift_get_udf_match_attribute(result.success, args.thrift_udf_match_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_udf_match_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_udf_match_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_match_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_udf", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_udf");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_udf");
  }

  switch_sai_rpc_sai_thrift_create_udf_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_udf", bytes);
  }

  switch_sai_rpc_sai_thrift_create_udf_result result;
  try {
    result.success = iface_->sai_thrift_create_udf(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_udf");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_udf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf");
  }

  oprot->writeMessageBegin("sai_thrift_create_udf", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_udf", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_udf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_udf", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_udf");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf");
  }

  switch_sai_rpc_sai_thrift_remove_udf_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_udf", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_udf_result result;
  try {
    result.success = iface_->sai_thrift_remove_udf(args.udf_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_udf");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_udf", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf");
  }

  oprot->writeMessageBegin("sai_thrift_remove_udf", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_udf", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_udf_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute");
  }

  switch_sai_rpc_sai_thrift_set_udf_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_udf_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_udf_attribute(args.thrift_udf_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_udf_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_udf_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_udf_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_udf_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_udf_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute");
  }

  switch_sai_rpc_sai_thrift_get_udf_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_udf_attribute_result result;
  try {
    iface_->sai_thrift_get_udf_attribute(result.success, args.thrift_udf_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_udf_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_udf_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_udf_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_mirror_session", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
  }

  switch_sai_rpc_sai_thrift_create_mirror_session_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session", bytes);
  }

  switch_sai_rpc_sai_thrift_create_mirror_session_result result;
  try {
    result.success = iface_->sai_thrift_create_mirror_session(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session");
  }

  oprot->writeMessageBegin("sai_thrift_create_mirror_session", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_mirror_session", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_mirror_session(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_mirror_session", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
  }

  switch_sai_rpc_sai_thrift_remove_mirror_session_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_mirror_session_result result;
  try {
    result.success = iface_->sai_thrift_remove_mirror_session(args.session_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session");
  }

  oprot->writeMessageBegin("sai_thrift_remove_mirror_session", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mirror_session", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_mirror_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute");
  }

  switch_sai_rpc_sai_thrift_set_mirror_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_mirror_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_mirror_attribute(args.thrift_mirror_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_mirror_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_mirror_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_mirror_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_mirror_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_mirror_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute");
  }

  switch_sai_rpc_sai_thrift_get_mirror_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_mirror_attribute_result result;
  try {
    iface_->sai_thrift_get_mirror_attribute(result.success, args.thrift_mirror_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_mirror_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_mirror_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_mirror_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_inseg_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry");
  }

  switch_sai_rpc_sai_thrift_create_inseg_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_inseg_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_inseg_entry(args.thrift_inseg_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_inseg_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_inseg_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_inseg_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_inseg_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_inseg_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry");
  }

  switch_sai_rpc_sai_thrift_remove_inseg_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_inseg_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_inseg_entry(args.thrift_inseg_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_inseg_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_inseg_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_inseg_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_inseg_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_inseg_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_inseg_entry_attribute(args.thrift_inseg_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_inseg_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_inseg_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_inseg_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_inseg_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_inseg_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_inseg_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_inseg_entry_attribute(result.success, args.thrift_inseg_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_inseg_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_inseg_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_inseg_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_dump_log(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_dump_log", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_dump_log");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_dump_log");
  }

  switch_sai_rpc_sai_thrift_dump_log_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_dump_log", bytes);
  }

  switch_sai_rpc_sai_thrift_dump_log_result result;
  try {
    result.success = iface_->sai_thrift_dump_log(args.dump_file_name);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_dump_log");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_dump_log", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_dump_log");
  }

  oprot->writeMessageBegin("sai_thrift_dump_log", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_dump_log", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_policer", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_policer");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_policer");
  }

  switch_sai_rpc_sai_thrift_create_policer_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_policer", bytes);
  }

  switch_sai_rpc_sai_thrift_create_policer_result result;
  try {
    result.success = iface_->sai_thrift_create_policer(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_policer");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_policer");
  }

  oprot->writeMessageBegin("sai_thrift_create_policer", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_policer", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_policer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_policer", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_policer");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
  }

  switch_sai_rpc_sai_thrift_remove_policer_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_policer", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_policer_result result;
  try {
    result.success = iface_->sai_thrift_remove_policer(args.thrift_policer_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_policer");
  }

  oprot->writeMessageBegin("sai_thrift_remove_policer", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_policer", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_policer_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute");
  }

  switch_sai_rpc_sai_thrift_get_policer_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_policer_attribute_result result;
  try {
    iface_->sai_thrift_get_policer_attribute(result.success, args.thrift_policer_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_policer_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_policer_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_policer_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_policer_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute");
  }

  switch_sai_rpc_sai_thrift_set_policer_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_policer_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_policer_attribute(args.thrift_policer_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_policer_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_policer_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_policer_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_policer_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
  }

  switch_sai_rpc_sai_thrift_get_policer_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_policer_stats_result result;
  try {
    iface_->sai_thrift_get_policer_stats(result.success, args.thrift_policer_id, args.thrift_counter_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_policer_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_policer_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_policer_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_policer_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats");
  }

  switch_sai_rpc_sai_thrift_clear_policer_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_policer_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_policer_stats(args.thrift_policer_id, args.thrift_counter_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_policer_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_policer_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_policer_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_scheduler_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
  }

  switch_sai_rpc_sai_thrift_create_scheduler_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_scheduler_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_scheduler_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_scheduler_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_scheduler_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_profile_result result;
  try {
    result.success = iface_->sai_thrift_remove_scheduler_profile(args.scheduler_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile");
  }

  oprot->writeMessageBegin("sai_thrift_remove_scheduler_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_scheduler_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute");
  }

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_scheduler_attribute_result result;
  try {
    iface_->sai_thrift_get_scheduler_attribute(result.success, args.thrift_scheduler_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_scheduler_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_scheduler_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_scheduler_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute");
  }

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_scheduler_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_scheduler_attribute(args.thrift_scheduler_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_scheduler_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_scheduler_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_scheduler_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group");
  }

  switch_sai_rpc_sai_thrift_create_scheduler_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_scheduler_group_result result;
  try {
    result.success = iface_->sai_thrift_create_scheduler_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_scheduler_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_scheduler_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_scheduler_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_scheduler_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_scheduler_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group");
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_scheduler_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_scheduler_group(args.scheduler_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_scheduler_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_scheduler_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_scheduler_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_scheduler_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_scheduler_group_attribute_result result;
  try {
    iface_->sai_thrift_get_scheduler_group_attribute(result.success, args.scheduler_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_scheduler_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_scheduler_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_scheduler_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_scheduler_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_scheduler_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute");
  }

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_scheduler_group_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_scheduler_group_attribute(args.scheduler_group_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_scheduler_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_scheduler_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_scheduler_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_queue_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
  }

  switch_sai_rpc_sai_thrift_get_queue_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_queue_stats_result result;
  try {
    iface_->sai_thrift_get_queue_stats(result.success, args.queue_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_queue_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_queue_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_queue_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
  }

  switch_sai_rpc_sai_thrift_clear_queue_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_queue_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_queue_stats(args.queue_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_queue_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_queue_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_queue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_queue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_queue");
  }

  switch_sai_rpc_sai_thrift_create_queue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_queue", bytes);
  }

  switch_sai_rpc_sai_thrift_create_queue_result result;
  try {
    result.success = iface_->sai_thrift_create_queue(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_queue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_queue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_queue");
  }

  oprot->writeMessageBegin("sai_thrift_create_queue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_queue", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_queue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_queue", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_queue");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_queue");
  }

  switch_sai_rpc_sai_thrift_remove_queue_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_queue", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_queue_result result;
  try {
    result.success = iface_->sai_thrift_remove_queue(args.queue_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_queue");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_queue", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_queue");
  }

  oprot->writeMessageBegin("sai_thrift_remove_queue", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_queue", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_queue_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute");
  }

  switch_sai_rpc_sai_thrift_get_queue_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_queue_attribute_result result;
  try {
    iface_->sai_thrift_get_queue_attribute(result.success, args.queue_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_queue_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_queue_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_queue_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_queue_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_queue_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
  }

  switch_sai_rpc_sai_thrift_set_queue_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_queue_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_queue_attribute(args.queue_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_queue_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_queue_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_buffer_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
  }

  switch_sai_rpc_sai_thrift_create_buffer_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_buffer_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_buffer_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_buffer_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_buffer_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_buffer_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_buffer_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile");
  }

  switch_sai_rpc_sai_thrift_remove_buffer_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_buffer_profile_result result;
  try {
    result.success = iface_->sai_thrift_remove_buffer_profile(args.buffer_profile_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_buffer_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile");
  }

  oprot->writeMessageBegin("sai_thrift_remove_buffer_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_buffer_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_buffer_profile_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute");
  }

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_buffer_profile_attribute_result result;
  try {
    iface_->sai_thrift_get_buffer_profile_attribute(result.success, args.buffer_profile_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_buffer_profile_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_buffer_profile_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_buffer_profile_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_buffer_profile_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_buffer_profile_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute");
  }

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_buffer_profile_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_buffer_profile_attribute(args.buffer_profile_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_buffer_profile_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_buffer_profile_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_buffer_profile_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_pool_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_pool_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
  }

  switch_sai_rpc_sai_thrift_create_pool_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_pool_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_pool_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_pool_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_pool_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_priority_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_priority_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_priority_group");
  }

  switch_sai_rpc_sai_thrift_create_priority_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_priority_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_priority_group_result result;
  try {
    result.success = iface_->sai_thrift_create_priority_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_priority_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_priority_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_priority_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_priority_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_priority_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_priority_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_priority_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_priority_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_priority_group");
  }

  switch_sai_rpc_sai_thrift_remove_priority_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_priority_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_priority_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_priority_group(args.priority_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_priority_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_priority_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_priority_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_priority_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_priority_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_priority_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_priority_group_attribute_result result;
  try {
    iface_->sai_thrift_get_priority_group_attribute(result.success, args.priority_group_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_priority_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_priority_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_priority_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_priority_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_priority_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
  }

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_priority_group_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_priority_group_attribute(args.pg_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_priority_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_priority_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_pg_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_pg_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
  }

  switch_sai_rpc_sai_thrift_get_pg_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_pg_stats_result result;
  try {
    iface_->sai_thrift_get_pg_stats(result.success, args.pg_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_pg_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_pg_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_wred_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
  }

  switch_sai_rpc_sai_thrift_create_wred_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_create_wred_profile_result result;
  try {
    result.success = iface_->sai_thrift_create_wred_profile(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile");
  }

  oprot->writeMessageBegin("sai_thrift_create_wred_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_wred_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_wred_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_wred_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
  }

  switch_sai_rpc_sai_thrift_remove_wred_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_wred_profile_result result;
  try {
    result.success = iface_->sai_thrift_remove_wred_profile(args.wred_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile");
  }

  oprot->writeMessageBegin("sai_thrift_remove_wred_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_wred_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_wred_attribute_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile");
  }

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_get_wred_attribute_profile_result result;
  try {
    iface_->sai_thrift_get_wred_attribute_profile(result.success, args.wred_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_wred_attribute_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile");
  }

  oprot->writeMessageBegin("sai_thrift_get_wred_attribute_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_wred_attribute_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_wred_attribute_profile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_wred_attribute_profile", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile");
  }

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile", bytes);
  }

  switch_sai_rpc_sai_thrift_set_wred_attribute_profile_result result;
  try {
    result.success = iface_->sai_thrift_set_wred_attribute_profile(args.wred_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_wred_attribute_profile", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile");
  }

  oprot->writeMessageBegin("sai_thrift_set_wred_attribute_profile", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_wred_attribute_profile", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_qos_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_qos_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
  }

  switch_sai_rpc_sai_thrift_create_qos_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_qos_map", bytes);
  }

  switch_sai_rpc_sai_thrift_create_qos_map_result result;
  try {
    result.success = iface_->sai_thrift_create_qos_map(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_qos_map");
  }

  oprot->writeMessageBegin("sai_thrift_create_qos_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_qos_map", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_qos_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_qos_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
  }

  switch_sai_rpc_sai_thrift_remove_qos_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_qos_map_result result;
  try {
    result.success = iface_->sai_thrift_remove_qos_map(args.qos_map_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map");
  }

  oprot->writeMessageBegin("sai_thrift_remove_qos_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_qos_map", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_qos_map_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute");
  }

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_qos_map_attribute_result result;
  try {
    iface_->sai_thrift_get_qos_map_attribute(result.success, args.qos_map_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_qos_map_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_qos_map_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_qos_map_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_qos_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_qos_map_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute");
  }

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_qos_map_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_qos_map_attribute(args.qos_map_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_qos_map_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_qos_map_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_qos_map_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_l2mc_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group");
  }

  switch_sai_rpc_sai_thrift_create_l2mc_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_l2mc_group_result result;
  try {
    result.success = iface_->sai_thrift_create_l2mc_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_l2mc_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_l2mc_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_l2mc_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group");
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_l2mc_group(args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_l2mc_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_l2mc_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_l2mc_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_l2mc_group_attribute_result result;
  try {
    iface_->sai_thrift_get_l2mc_group_attribute(result.success, args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_l2mc_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_l2mc_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_l2mc_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member");
  }

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_l2mc_group_member_result result;
  try {
    result.success = iface_->sai_thrift_create_l2mc_group_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_l2mc_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_l2mc_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_l2mc_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member");
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_group_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_l2mc_group_member(args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_l2mc_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_l2mc_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_l2mc_group_member_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_l2mc_group_member_attribute(args.member_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_l2mc_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_l2mc_group_member_attribute_result result;
  try {
    iface_->sai_thrift_get_l2mc_group_member_attribute(result.success, args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_l2mc_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_l2mc_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry");
  }

  switch_sai_rpc_sai_thrift_create_l2mc_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_l2mc_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_l2mc_entry(args.thrift_l2mc_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_l2mc_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_l2mc_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_l2mc_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_l2mc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_l2mc_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry");
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_l2mc_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_l2mc_entry(args.thrift_l2mc_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_l2mc_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_l2mc_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_l2mc_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_l2mc_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_l2mc_entry_attribute(args.thrift_l2mc_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_l2mc_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_l2mc_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_l2mc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_l2mc_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_l2mc_entry_attribute(result.success, args.thrift_l2mc_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_l2mc_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_l2mc_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_mcast_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_mcast_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_mcast_fdb_entry(args.thrift_mcast_fdb_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_mcast_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_mcast_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_mcast_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_mcast_fdb_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry");
  }

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_mcast_fdb_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_mcast_fdb_entry(args.thrift_mcast_fdb_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_mcast_fdb_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_mcast_fdb_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_mcast_fdb_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_mcast_fdb_entry_attribute(args.thrift_mcast_fdb_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_mcast_fdb_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_mcast_fdb_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_mcast_fdb_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_mcast_fdb_entry_attribute(result.success, args.thrift_mcast_fdb_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_mcast_fdb_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_mcast_fdb_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_ipmc_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group");
  }

  switch_sai_rpc_sai_thrift_create_ipmc_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_ipmc_group_result result;
  try {
    result.success = iface_->sai_thrift_create_ipmc_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_ipmc_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_ipmc_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_ipmc_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group");
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_ipmc_group(args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_ipmc_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_ipmc_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_ipmc_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_ipmc_group_attribute_result result;
  try {
    iface_->sai_thrift_get_ipmc_group_attribute(result.success, args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_ipmc_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_ipmc_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_ipmc_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member");
  }

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_ipmc_group_member_result result;
  try {
    result.success = iface_->sai_thrift_create_ipmc_group_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_ipmc_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_ipmc_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_ipmc_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member");
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_group_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_ipmc_group_member(args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_ipmc_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_ipmc_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_ipmc_group_member_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_ipmc_group_member_attribute(args.member_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_ipmc_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_ipmc_group_member_attribute_result result;
  try {
    iface_->sai_thrift_get_ipmc_group_member_attribute(result.success, args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_ipmc_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_rpf_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_rpf_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group");
  }

  switch_sai_rpc_sai_thrift_create_rpf_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group", bytes);
  }

  switch_sai_rpc_sai_thrift_create_rpf_group_result result;
  try {
    result.success = iface_->sai_thrift_create_rpf_group(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_rpf_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group");
  }

  oprot->writeMessageBegin("sai_thrift_create_rpf_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_rpf_group", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group");
  }

  switch_sai_rpc_sai_thrift_remove_rpf_group_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_rpf_group_result result;
  try {
    result.success = iface_->sai_thrift_remove_rpf_group(args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_rpf_group", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group");
  }

  oprot->writeMessageBegin("sai_thrift_remove_rpf_group", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_rpf_group_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute");
  }

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_rpf_group_attribute_result result;
  try {
    iface_->sai_thrift_get_rpf_group_attribute(result.success, args.grp_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_rpf_group_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_rpf_group_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_rpf_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member");
  }

  switch_sai_rpc_sai_thrift_create_rpf_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_create_rpf_group_member_result result;
  try {
    result.success = iface_->sai_thrift_create_rpf_group_member(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_rpf_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_create_rpf_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_rpf_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_rpf_group_member(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_rpf_group_member", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member");
  }

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_rpf_group_member_result result;
  try {
    result.success = iface_->sai_thrift_remove_rpf_group_member(args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_rpf_group_member", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member");
  }

  oprot->writeMessageBegin("sai_thrift_remove_rpf_group_member", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_rpf_group_member", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_rpf_group_member_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_rpf_group_member_attribute(args.member_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_rpf_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_rpf_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_rpf_group_member_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute");
  }

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_rpf_group_member_attribute_result result;
  try {
    iface_->sai_thrift_get_rpf_group_member_attribute(result.success, args.member_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_rpf_group_member_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_rpf_group_member_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_ipmc_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry");
  }

  switch_sai_rpc_sai_thrift_create_ipmc_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_ipmc_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_ipmc_entry(args.thrift_ipmc_entry, args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_ipmc_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_ipmc_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_ipmc_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_ipmc_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_ipmc_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry");
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_ipmc_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_ipmc_entry(args.thrift_ipmc_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_ipmc_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_ipmc_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_ipmc_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_ipmc_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_ipmc_entry_attribute(args.thrift_ipmc_entry, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_ipmc_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_ipmc_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_ipmc_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_ipmc_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_ipmc_entry_attribute(result.success, args.thrift_ipmc_entry);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_ipmc_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_ipmc_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_samplepacket", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_samplepacket");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_samplepacket");
  }

  switch_sai_rpc_sai_thrift_create_samplepacket_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_samplepacket", bytes);
  }

  switch_sai_rpc_sai_thrift_create_samplepacket_result result;
  try {
    result.success = iface_->sai_thrift_create_samplepacket(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_samplepacket");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_samplepacket", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_samplepacket");
  }

  oprot->writeMessageBegin("sai_thrift_create_samplepacket", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_samplepacket", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_samplepacket(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_samplepacket", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket");
  }

  switch_sai_rpc_sai_thrift_remove_samplepacket_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_samplepacket_result result;
  try {
    result.success = iface_->sai_thrift_remove_samplepacket(args.samplepacket_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_samplepacket", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket");
  }

  oprot->writeMessageBegin("sai_thrift_remove_samplepacket", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_samplepacket", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_samplepacket_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute");
  }

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_samplepacket_attribute_result result;
  try {
    iface_->sai_thrift_get_samplepacket_attribute(result.success, args.samplepacket_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_samplepacket_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_samplepacket_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_samplepacket_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_samplepacket_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_samplepacket_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute");
  }

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_samplepacket_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_samplepacket_attribute(args.samplepacket_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_samplepacket_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_samplepacket_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_samplepacket_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_tunnel_map_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry");
  }

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_tunnel_map_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_tunnel_map_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_tunnel_map_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_tunnel_map_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_tunnel_map_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry");
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_map_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_tunnel_map_entry(args.tunnel_map_entry_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_tunnel_map_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_tunnel_map_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_tunnel_map_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_tunnel_map_entry_attribute(result.success, args.tunnel_map_entry_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_tunnel_map_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_tunnel_map_entry_attribute(args.tunnel_map_entry_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_tunnel_map_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_tunnel_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map");
  }

  switch_sai_rpc_sai_thrift_create_tunnel_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map", bytes);
  }

  switch_sai_rpc_sai_thrift_create_tunnel_map_result result;
  try {
    result.success = iface_->sai_thrift_create_tunnel_map(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_tunnel_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map");
  }

  oprot->writeMessageBegin("sai_thrift_create_tunnel_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_map", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_tunnel_map", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map");
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_map_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_map_result result;
  try {
    result.success = iface_->sai_thrift_remove_tunnel_map(args.tunnel_map_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_tunnel_map", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map");
  }

  oprot->writeMessageBegin("sai_thrift_remove_tunnel_map", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_map", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_tunnel_map_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute");
  }

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_tunnel_map_attribute_result result;
  try {
    iface_->sai_thrift_get_tunnel_map_attribute(result.success, args.tunnel_map_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_tunnel_map_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_tunnel_map_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_map_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_map_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_tunnel_map_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute");
  }

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_tunnel_map_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_tunnel_map_attribute(args.tunnel_map_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_tunnel_map_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_tunnel_map_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_map_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_tunnel", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_tunnel");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel");
  }

  switch_sai_rpc_sai_thrift_create_tunnel_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel", bytes);
  }

  switch_sai_rpc_sai_thrift_create_tunnel_result result;
  try {
    result.success = iface_->sai_thrift_create_tunnel(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_tunnel");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_tunnel", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel");
  }

  oprot->writeMessageBegin("sai_thrift_create_tunnel", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_tunnel", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_tunnel");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel");
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_result result;
  try {
    result.success = iface_->sai_thrift_remove_tunnel(args.tunnel_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_tunnel", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel");
  }

  oprot->writeMessageBegin("sai_thrift_remove_tunnel", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_tunnel_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute");
  }

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_tunnel_attribute_result result;
  try {
    iface_->sai_thrift_get_tunnel_attribute(result.success, args.tunnel_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_tunnel_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_tunnel_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_tunnel_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute");
  }

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_tunnel_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_tunnel_attribute(args.tunnel_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_tunnel_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_tunnel_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_tunnel_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats");
  }

  switch_sai_rpc_sai_thrift_get_tunnel_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_get_tunnel_stats_result result;
  try {
    iface_->sai_thrift_get_tunnel_stats(result.success, args.tunnel_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_tunnel_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats");
  }

  oprot->writeMessageBegin("sai_thrift_get_tunnel_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_tunnel_stats(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_tunnel_stats", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats");
  }

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_tunnel_stats_result result;
  try {
    result.success = iface_->sai_thrift_clear_tunnel_stats(args.tunnel_id, args.counter_ids, args.number_of_counters);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_tunnel_stats", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats");
  }

  oprot->writeMessageBegin("sai_thrift_clear_tunnel_stats", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_tunnel_stats", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_create_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry");
  }

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_create_tunnel_term_table_entry_result result;
  try {
    result.success = iface_->sai_thrift_create_tunnel_term_table_entry(args.thrift_attr_list);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry");
  }

  oprot->writeMessageBegin("sai_thrift_create_tunnel_term_table_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_create_tunnel_term_table_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_remove_tunnel_term_table_entry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry");
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry", bytes);
  }

  switch_sai_rpc_sai_thrift_remove_tunnel_term_table_entry_result result;
  try {
    result.success = iface_->sai_thrift_remove_tunnel_term_table_entry(args.tunnel_term_table_entry_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry");
  }

  oprot->writeMessageBegin("sai_thrift_remove_tunnel_term_table_entry", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_remove_tunnel_term_table_entry", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_tunnel_term_table_entry_attribute_result result;
  try {
    iface_->sai_thrift_get_tunnel_term_table_entry_attribute(result.success, args.tunnel_term_table_entry_id, args.thrift_attr_ids);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_tunnel_term_table_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_set_tunnel_term_table_entry_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute");
  }

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_set_tunnel_term_table_entry_attribute_result result;
  try {
    result.success = iface_->sai_thrift_set_tunnel_term_table_entry_attribute(args.tunnel_term_table_entry_id, args.thrift_attr);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_set_tunnel_term_table_entry_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_set_tunnel_term_table_entry_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_attribute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_cpu_packet_attribute", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute");
  }

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute", bytes);
  }

  switch_sai_rpc_sai_thrift_get_cpu_packet_attribute_result result;
  try {
    iface_->sai_thrift_get_cpu_packet_attribute(result.success, args.switch_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_cpu_packet_attribute", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute");
  }

  oprot->writeMessageBegin("sai_thrift_get_cpu_packet_attribute", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_attribute", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_get_cpu_packet_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_get_cpu_packet_count", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count");
  }

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count", bytes);
  }

  switch_sai_rpc_sai_thrift_get_cpu_packet_count_result result;
  try {
    iface_->sai_thrift_get_cpu_packet_count(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_get_cpu_packet_count", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count");
  }

  oprot->writeMessageBegin("sai_thrift_get_cpu_packet_count", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_get_cpu_packet_count", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_clear_cpu_packet_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_clear_cpu_packet_info", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info");
  }

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info", bytes);
  }

  switch_sai_rpc_sai_thrift_clear_cpu_packet_info_result result;
  try {
    iface_->sai_thrift_clear_cpu_packet_info(result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_clear_cpu_packet_info", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info");
  }

  oprot->writeMessageBegin("sai_thrift_clear_cpu_packet_info", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_clear_cpu_packet_info", bytes);
  }
}

void switch_sai_rpcProcessor::process_sai_thrift_log_set(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("switch_sai_rpc.sai_thrift_log_set", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "switch_sai_rpc.sai_thrift_log_set");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "switch_sai_rpc.sai_thrift_log_set");
  }

  switch_sai_rpc_sai_thrift_log_set_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "switch_sai_rpc.sai_thrift_log_set", bytes);
  }

  switch_sai_rpc_sai_thrift_log_set_result result;
  try {
    result.success = iface_->sai_thrift_log_set(args.sai_api_id, args.log_level);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "switch_sai_rpc.sai_thrift_log_set");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("sai_thrift_log_set", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "switch_sai_rpc.sai_thrift_log_set");
  }

  oprot->writeMessageBegin("sai_thrift_log_set", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "switch_sai_rpc.sai_thrift_log_set", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > switch_sai_rpcProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< switch_sai_rpcIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< switch_sai_rpcIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new switch_sai_rpcProcessor(handler));
  return processor;
}
} // namespace

